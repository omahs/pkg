// Code generated by capnpc-go. DO NOT EDIT.

package tools

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	http "github.com/wetware/ww/experiments/api/http"
)

type Tools capnp.Client

// Tools_TypeID is the unique identifier for the type Tools.
const Tools_TypeID = 0xc3221609faacdf31

func (c Tools) Http(ctx context.Context, params func(Tools_http_Params) error) (Tools_http_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc3221609faacdf31,
			MethodID:      0,
			InterfaceName: "tools.capnp:Tools",
			MethodName:    "http",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Tools_http_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Tools_http_Results_Future{Future: ans.Future()}, release

}

func (c Tools) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Tools) String() string {
	return "Tools(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Tools) AddRef() Tools {
	return Tools(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Tools) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Tools) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Tools) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Tools) DecodeFromPtr(p capnp.Ptr) Tools {
	return Tools(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Tools) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Tools) IsSame(other Tools) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Tools) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Tools) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Tools_Server is a Tools with a local implementation.
type Tools_Server interface {
	Http(context.Context, Tools_http) error
}

// Tools_NewServer creates a new Server from an implementation of Tools_Server.
func Tools_NewServer(s Tools_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Tools_Methods(nil, s), s, c)
}

// Tools_ServerToClient creates a new Client from an implementation of Tools_Server.
// The caller is responsible for calling Release on the returned Client.
func Tools_ServerToClient(s Tools_Server) Tools {
	return Tools(capnp.NewClient(Tools_NewServer(s)))
}

// Tools_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Tools_Methods(methods []server.Method, s Tools_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc3221609faacdf31,
			MethodID:      0,
			InterfaceName: "tools.capnp:Tools",
			MethodName:    "http",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Http(ctx, Tools_http{call})
		},
	})

	return methods
}

// Tools_http holds the state for a server call to Tools.http.
// See server.Call for documentation.
type Tools_http struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Tools_http) Args() Tools_http_Params {
	return Tools_http_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Tools_http) AllocResults() (Tools_http_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tools_http_Results(r), err
}

// Tools_List is a list of Tools.
type Tools_List = capnp.CapList[Tools]

// NewTools creates a new list of Tools.
func NewTools_List(s *capnp.Segment, sz int32) (Tools_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Tools](l), err
}

type Tools_http_Params capnp.Struct

// Tools_http_Params_TypeID is the unique identifier for the type Tools_http_Params.
const Tools_http_Params_TypeID = 0x9a1eb30f3036bdee

func NewTools_http_Params(s *capnp.Segment) (Tools_http_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Tools_http_Params(st), err
}

func NewRootTools_http_Params(s *capnp.Segment) (Tools_http_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Tools_http_Params(st), err
}

func ReadRootTools_http_Params(msg *capnp.Message) (Tools_http_Params, error) {
	root, err := msg.Root()
	return Tools_http_Params(root.Struct()), err
}

func (s Tools_http_Params) String() string {
	str, _ := text.Marshal(0x9a1eb30f3036bdee, capnp.Struct(s))
	return str
}

func (s Tools_http_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tools_http_Params) DecodeFromPtr(p capnp.Ptr) Tools_http_Params {
	return Tools_http_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tools_http_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tools_http_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tools_http_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tools_http_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Tools_http_Params_List is a list of Tools_http_Params.
type Tools_http_Params_List = capnp.StructList[Tools_http_Params]

// NewTools_http_Params creates a new list of Tools_http_Params.
func NewTools_http_Params_List(s *capnp.Segment, sz int32) (Tools_http_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Tools_http_Params](l), err
}

// Tools_http_Params_Future is a wrapper for a Tools_http_Params promised by a client call.
type Tools_http_Params_Future struct{ *capnp.Future }

func (f Tools_http_Params_Future) Struct() (Tools_http_Params, error) {
	p, err := f.Future.Ptr()
	return Tools_http_Params(p.Struct()), err
}

type Tools_http_Results capnp.Struct

// Tools_http_Results_TypeID is the unique identifier for the type Tools_http_Results.
const Tools_http_Results_TypeID = 0xb47e5ef67bea5d04

func NewTools_http_Results(s *capnp.Segment) (Tools_http_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tools_http_Results(st), err
}

func NewRootTools_http_Results(s *capnp.Segment) (Tools_http_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tools_http_Results(st), err
}

func ReadRootTools_http_Results(msg *capnp.Message) (Tools_http_Results, error) {
	root, err := msg.Root()
	return Tools_http_Results(root.Struct()), err
}

func (s Tools_http_Results) String() string {
	str, _ := text.Marshal(0xb47e5ef67bea5d04, capnp.Struct(s))
	return str
}

func (s Tools_http_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tools_http_Results) DecodeFromPtr(p capnp.Ptr) Tools_http_Results {
	return Tools_http_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tools_http_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tools_http_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tools_http_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tools_http_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tools_http_Results) Http() http.Requester {
	p, _ := capnp.Struct(s).Ptr(0)
	return http.Requester(p.Interface().Client())
}

func (s Tools_http_Results) HasHttp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tools_http_Results) SetHttp(v http.Requester) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Tools_http_Results_List is a list of Tools_http_Results.
type Tools_http_Results_List = capnp.StructList[Tools_http_Results]

// NewTools_http_Results creates a new list of Tools_http_Results.
func NewTools_http_Results_List(s *capnp.Segment, sz int32) (Tools_http_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Tools_http_Results](l), err
}

// Tools_http_Results_Future is a wrapper for a Tools_http_Results promised by a client call.
type Tools_http_Results_Future struct{ *capnp.Future }

func (f Tools_http_Results_Future) Struct() (Tools_http_Results, error) {
	p, err := f.Future.Ptr()
	return Tools_http_Results(p.Struct()), err
}
func (p Tools_http_Results_Future) Http() http.Requester {
	return http.Requester(p.Future.Field(0, nil).Client())
}

const schema_9462f07b5ef19869 = "x\xda\x12\xd8\xe4\xc0b\xc8\xab\xce\xc2\xc0\x14h\xc0\xca" +
	"\xf6\xff\xdd^3\x03\xfe\xcdr\xb3\x18\x04\x85\x18\x19\x18" +
	"X\xd8\x19\x18\x84\x7f2~b`\xf9\xcf\x12\xfb\xaa\xfa" +
	"[\\\xdd\x16\x88\x04+#H\xe6.\xe3/\x06F\xe1" +
	"\x87\x8c\xf6\x0c\x8c\xff\x0d\xef\xaf\xf9\xc5)\xa6t\x98A" +
	"\x90\x87\xf9\x7f\xe6\x8c\x8fq\xd5\x1f\x92\xa6000\x0a" +
	"32M\x12\xe6d\x02)ger\x17\xd6ebg" +
	"H\xfe_\x92\x9f\x9fS\xac\x97\x9c\xc8T\x90W`\x15" +
	"\x02\xe6d\x94\x94\x14\xa8\x04\xc8'\x16%\xe6\x16\xe3\x94" +
	"\x0f\xb2O-.\xcd))\x0edafa``a" +
	"d`\x10\xe4\xd5b`\x08\xe4`f\x0c\x14ab\xe4" +
	"\x07)b\x14\xfc_tr\xb2\xc3\x96\xaf:\xa7\x18\x18" +
	"\x18\x19\x05\x19\x18\xe1\xc61\xc2\x8cc,\x0e`d\x0c" +
	"dafe`\x80\xfb\x98\x11\xe6CAA-\x06&" +
	"AVv\xb0i\x0e\x8c\x01\x8c\x8c\x80\x00\x00\x00\xff\xff" +
	"\x8a\xdcT,"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9462f07b5ef19869,
		Nodes: []uint64{
			0x9a1eb30f3036bdee,
			0xb47e5ef67bea5d04,
			0xc3221609faacdf31,
		},
		Compressed: true,
	})
}
