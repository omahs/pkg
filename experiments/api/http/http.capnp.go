// Code generated by capnpc-go. DO NOT EDIT.

package http

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type HttpGetter capnp.Client

// HttpGetter_TypeID is the unique identifier for the type HttpGetter.
const HttpGetter_TypeID = 0xfc98acef9abe3c68

func (c HttpGetter) Get(ctx context.Context, params func(HttpGetter_get_Params) error) (HttpGetter_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfc98acef9abe3c68,
			MethodID:      0,
			InterfaceName: "http.capnp:HttpGetter",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HttpGetter_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return HttpGetter_get_Results_Future{Future: ans.Future()}, release

}

func (c HttpGetter) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c HttpGetter) String() string {
	return "HttpGetter(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c HttpGetter) AddRef() HttpGetter {
	return HttpGetter(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c HttpGetter) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c HttpGetter) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c HttpGetter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (HttpGetter) DecodeFromPtr(p capnp.Ptr) HttpGetter {
	return HttpGetter(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c HttpGetter) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c HttpGetter) IsSame(other HttpGetter) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c HttpGetter) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c HttpGetter) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A HttpGetter_Server is a HttpGetter with a local implementation.
type HttpGetter_Server interface {
	Get(context.Context, HttpGetter_get) error
}

// HttpGetter_NewServer creates a new Server from an implementation of HttpGetter_Server.
func HttpGetter_NewServer(s HttpGetter_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HttpGetter_Methods(nil, s), s, c)
}

// HttpGetter_ServerToClient creates a new Client from an implementation of HttpGetter_Server.
// The caller is responsible for calling Release on the returned Client.
func HttpGetter_ServerToClient(s HttpGetter_Server) HttpGetter {
	return HttpGetter(capnp.NewClient(HttpGetter_NewServer(s)))
}

// HttpGetter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HttpGetter_Methods(methods []server.Method, s HttpGetter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfc98acef9abe3c68,
			MethodID:      0,
			InterfaceName: "http.capnp:HttpGetter",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, HttpGetter_get{call})
		},
	})

	return methods
}

// HttpGetter_get holds the state for a server call to HttpGetter.get.
// See server.Call for documentation.
type HttpGetter_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HttpGetter_get) Args() HttpGetter_get_Params {
	return HttpGetter_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c HttpGetter_get) AllocResults() (HttpGetter_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HttpGetter_get_Results(r), err
}

// HttpGetter_List is a list of HttpGetter.
type HttpGetter_List = capnp.CapList[HttpGetter]

// NewHttpGetter creates a new list of HttpGetter.
func NewHttpGetter_List(s *capnp.Segment, sz int32) (HttpGetter_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[HttpGetter](l), err
}

type HttpGetter_get_Params capnp.Struct

// HttpGetter_get_Params_TypeID is the unique identifier for the type HttpGetter_get_Params.
const HttpGetter_get_Params_TypeID = 0xfeeecd93e405c211

func NewHttpGetter_get_Params(s *capnp.Segment) (HttpGetter_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HttpGetter_get_Params(st), err
}

func NewRootHttpGetter_get_Params(s *capnp.Segment) (HttpGetter_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HttpGetter_get_Params(st), err
}

func ReadRootHttpGetter_get_Params(msg *capnp.Message) (HttpGetter_get_Params, error) {
	root, err := msg.Root()
	return HttpGetter_get_Params(root.Struct()), err
}

func (s HttpGetter_get_Params) String() string {
	str, _ := text.Marshal(0xfeeecd93e405c211, capnp.Struct(s))
	return str
}

func (s HttpGetter_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HttpGetter_get_Params) DecodeFromPtr(p capnp.Ptr) HttpGetter_get_Params {
	return HttpGetter_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HttpGetter_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HttpGetter_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HttpGetter_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HttpGetter_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HttpGetter_get_Params) Url() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HttpGetter_get_Params) HasUrl() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HttpGetter_get_Params) UrlBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HttpGetter_get_Params) SetUrl(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HttpGetter_get_Params_List is a list of HttpGetter_get_Params.
type HttpGetter_get_Params_List = capnp.StructList[HttpGetter_get_Params]

// NewHttpGetter_get_Params creates a new list of HttpGetter_get_Params.
func NewHttpGetter_get_Params_List(s *capnp.Segment, sz int32) (HttpGetter_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[HttpGetter_get_Params](l), err
}

// HttpGetter_get_Params_Future is a wrapper for a HttpGetter_get_Params promised by a client call.
type HttpGetter_get_Params_Future struct{ *capnp.Future }

func (f HttpGetter_get_Params_Future) Struct() (HttpGetter_get_Params, error) {
	p, err := f.Future.Ptr()
	return HttpGetter_get_Params(p.Struct()), err
}

type HttpGetter_get_Results capnp.Struct

// HttpGetter_get_Results_TypeID is the unique identifier for the type HttpGetter_get_Results.
const HttpGetter_get_Results_TypeID = 0xd83f041b50142dbb

func NewHttpGetter_get_Results(s *capnp.Segment) (HttpGetter_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HttpGetter_get_Results(st), err
}

func NewRootHttpGetter_get_Results(s *capnp.Segment) (HttpGetter_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HttpGetter_get_Results(st), err
}

func ReadRootHttpGetter_get_Results(msg *capnp.Message) (HttpGetter_get_Results, error) {
	root, err := msg.Root()
	return HttpGetter_get_Results(root.Struct()), err
}

func (s HttpGetter_get_Results) String() string {
	str, _ := text.Marshal(0xd83f041b50142dbb, capnp.Struct(s))
	return str
}

func (s HttpGetter_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HttpGetter_get_Results) DecodeFromPtr(p capnp.Ptr) HttpGetter_get_Results {
	return HttpGetter_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HttpGetter_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HttpGetter_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HttpGetter_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HttpGetter_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HttpGetter_get_Results) Status() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s HttpGetter_get_Results) SetStatus(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s HttpGetter_get_Results) Body() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s HttpGetter_get_Results) HasBody() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HttpGetter_get_Results) SetBody(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s HttpGetter_get_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s HttpGetter_get_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s HttpGetter_get_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s HttpGetter_get_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// HttpGetter_get_Results_List is a list of HttpGetter_get_Results.
type HttpGetter_get_Results_List = capnp.StructList[HttpGetter_get_Results]

// NewHttpGetter_get_Results creates a new list of HttpGetter_get_Results.
func NewHttpGetter_get_Results_List(s *capnp.Segment, sz int32) (HttpGetter_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[HttpGetter_get_Results](l), err
}

// HttpGetter_get_Results_Future is a wrapper for a HttpGetter_get_Results promised by a client call.
type HttpGetter_get_Results_Future struct{ *capnp.Future }

func (f HttpGetter_get_Results_Future) Struct() (HttpGetter_get_Results, error) {
	p, err := f.Future.Ptr()
	return HttpGetter_get_Results(p.Struct()), err
}

const schema_bb59054ba43c3861 = "x\xda|\xd0\xb1K#A\x1c\xc5\xf1\xf7fvo\xc3" +
	"]\x96\xbb\xb9]\xd2\xdc\x1d\x81p6B\x02\x9aFB" +
	" )\x94DT\xd8\x11\x1b\xcbU\x97\xa4\x88f\xd9\x9d" +
	"\x14\xfe\x1d6bm\xa7 \xd8\x06\x05\x05K\x0b;\xed" +
	"ml\xf4\x1f\x10WV\x8cX\xd9\x0dS<>\xdf\xdf" +
	"\xaf\xa3\xb65\xe3\x0e\x05\x84\xfek\x7f\xcb\xc6U?\xf8" +
	"c\xb5n\xa1K$`\x0b\x07\xa8\xff\xe3o\x82\xde\x14" +
	"O\xc0\xac\xdf<?x:\xde\x7f\x86\xfa!\xb3p\xae" +
	"y\xb8d\xaf\x8f\x01zg<\xf5\xae\xe8\x00\xde\x05;" +
	"\xdeC\xfe\xca\xd4\xa5}\xbfw\xfd\xf8\x02U\xca\xd7\xf2" +
	"\xbf\xfa\x0d\xbf\xe7kwl\xa1\x9a\xf5\x8d\x89k\x9ba" +
	",w\xe2F\xd7\x98\xb8\x13\x19\x13%\xb5^d\xfe\xaf" +
	"F\xe9h`\x98\xea\xa2\xb4\x00\x8b\x80Zh\x00\xba-" +
	"\xa9\x97\x05I?\x17\xaa\xc5i@\xcfK\xea@P\x09" +
	"\xfa\x14\x80Z\x99\x05tWR\xaf\x09\xb6R\x13\x9aQ" +
	"\xca\x02\x04\x0b\xe0\xcf\x8d\xe1\xd6.]\x08\xba`9J" +
	"\x92a\xc2\"\x04\x8by\xdb\xbb\x86\x13M\xf9\x8d\x13\x90" +
	"\xda\x92\xf6\xa7\x1eN\xee\xa4T\x05B\xd9\x8e\xd3\x8bL" +
	"\x9b\x01\xf9UQ\x10&\xe1v\x0ah\xeb\xa3\xc8\xad\x00" +
	"\xba \xa9}Ag\x94\x0c&\x94\xd7\x00\x00\x00\xff\xff" +
	"\x11\x93^\xbf"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_bb59054ba43c3861,
		Nodes: []uint64{
			0xd83f041b50142dbb,
			0xfc98acef9abe3c68,
			0xfeeecd93e405c211,
		},
		Compressed: true,
	})
}
