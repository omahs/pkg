// Code generated by capnpc-go. DO NOT EDIT.

package service

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	cluster "github.com/wetware/ww/internal/api/cluster"
	strconv "strconv"
)

type Record capnp.Struct
type Record_Which uint16

const (
	Record_Which_sturdyRef    Record_Which = 0
	Record_Which_multiaddr    Record_Which = 1
	Record_Which_anchor       Record_Which = 2
	Record_Which_customStruct Record_Which = 3
	Record_Which_customList   Record_Which = 4
	Record_Which_customText   Record_Which = 5
	Record_Which_customData   Record_Which = 6
)

func (w Record_Which) String() string {
	const s = "sturdyRefmultiaddranchorcustomStructcustomListcustomTextcustomData"
	switch w {
	case Record_Which_sturdyRef:
		return s[0:9]
	case Record_Which_multiaddr:
		return s[9:18]
	case Record_Which_anchor:
		return s[18:24]
	case Record_Which_customStruct:
		return s[24:36]
	case Record_Which_customList:
		return s[36:46]
	case Record_Which_customText:
		return s[46:56]
	case Record_Which_customData:
		return s[56:66]

	}
	return "Record_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Record_TypeID is the unique identifier for the type Record.
const Record_TypeID = 0xb637146fbf2eaba6

func NewRecord(s *capnp.Segment) (Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Record(st), err
}

func NewRootRecord(s *capnp.Segment) (Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Record(st), err
}

func ReadRootRecord(msg *capnp.Message) (Record, error) {
	root, err := msg.Root()
	return Record(root.Struct()), err
}

func (s Record) String() string {
	str, _ := text.Marshal(0xb637146fbf2eaba6, capnp.Struct(s))
	return str
}

func (s Record) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Record) DecodeFromPtr(p capnp.Ptr) Record {
	return Record(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Record) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Record) Which() Record_Which {
	return Record_Which(capnp.Struct(s).Uint16(0))
}
func (s Record) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Record) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Record) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Record) ServiceName() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Record) HasServiceName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Record) ServiceNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Record) SetServiceName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Record) SturdyRef() (cluster.SturdyRef, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != sturdyRef")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return cluster.SturdyRef(p.Struct()), err
}

func (s Record) HasSturdyRef() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Record) SetSturdyRef(v cluster.SturdyRef) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSturdyRef sets the sturdyRef field to a newly
// allocated cluster.SturdyRef struct, preferring placement in s's segment.
func (s Record) NewSturdyRef() (cluster.SturdyRef, error) {
	capnp.Struct(s).SetUint16(0, 0)
	ss, err := cluster.NewSturdyRef(capnp.Struct(s).Segment())
	if err != nil {
		return cluster.SturdyRef{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Record) Multiaddr() ([]byte, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != multiaddr")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Record) HasMultiaddr() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Record) SetMultiaddr(v []byte) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetData(1, v)
}

func (s Record) Anchor() (string, error) {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != anchor")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Record) HasAnchor() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Record) AnchorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Record) SetAnchor(v string) error {
	capnp.Struct(s).SetUint16(0, 2)
	return capnp.Struct(s).SetText(1, v)
}

func (s Record) CustomStruct() (capnp.Struct, error) {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != customStruct")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.Struct(), err
}

func (s Record) HasCustomStruct() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Record) SetCustomStruct(v capnp.Struct) error {
	capnp.Struct(s).SetUint16(0, 3)
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}
func (s Record) CustomList() (capnp.List, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != customList")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.List(), err
}

func (s Record) HasCustomList() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Record) SetCustomList(v capnp.List) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}
func (s Record) CustomText() (string, error) {
	if capnp.Struct(s).Uint16(0) != 5 {
		panic("Which() != customText")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Record) HasCustomText() bool {
	if capnp.Struct(s).Uint16(0) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Record) CustomTextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Record) SetCustomText(v string) error {
	capnp.Struct(s).SetUint16(0, 5)
	return capnp.Struct(s).SetText(1, v)
}

func (s Record) CustomData() ([]byte, error) {
	if capnp.Struct(s).Uint16(0) != 6 {
		panic("Which() != customData")
	}
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s Record) HasCustomData() bool {
	if capnp.Struct(s).Uint16(0) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(1)
}

func (s Record) SetCustomData(v []byte) error {
	capnp.Struct(s).SetUint16(0, 6)
	return capnp.Struct(s).SetData(1, v)
}

// Record_List is a list of Record.
type Record_List = capnp.StructList[Record]

// NewRecord creates a new list of Record.
func NewRecord_List(s *capnp.Segment, sz int32) (Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Record](l), err
}

// Record_Future is a wrapper for a Record promised by a client call.
type Record_Future struct{ *capnp.Future }

func (f Record_Future) Struct() (Record, error) {
	p, err := f.Future.Ptr()
	return Record(p.Struct()), err
}
func (p Record_Future) SturdyRef() cluster.SturdyRef_Future {
	return cluster.SturdyRef_Future{Future: p.Future.Field(1, nil)}
}
func (p Record_Future) CustomStruct() *capnp.Future {
	return p.Future.Field(1, nil)
}
func (p Record_Future) CustomList() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_fcba4f486a351ac3 = "x\xda\\\xcf?\xab\xd3P\x1c\xc6\xf1\xe79\xe7\xa4q" +
	"hm\xd2v\x12\x03:\xb8\x16DD\xe8bA\x05\x07" +
	"QO\xe2P\xba\xc5$b\x8bmJ\xfe\x88\xbe\x14\xdf" +
	"\x80C\x9d\\\x1c\\\x1c\x1c\\uR\xc1A\xa1\x8bP" +
	"\xc1AA\xefm\xef\xb9\x9c\xa1\x85{\xd7\xcf\x0f\x9e\x1f" +
	"_\xef\xf3P]n\xe5\x02B\x9fw\x1a\xe6\xe5\xab\xfe" +
	"\xbb\xbcw\xed\x0d\xf4Y\xd2\xbc?wuz\xfb\xde\xdb" +
	"\x0dn\x09\xd7\x05\xba\x01\x97\xddKt\x81+\x17\xf9\x81" +
	"\xb8a\xca\xacx:I\xb2>\x93x1_\x0c\xc2\xac" +
	"\x9d\xe4Ez\x9f\xd4\x17\xa4\x02\x14\x01\xff\xd3C@\x7f" +
	"\x94\xd4\xdf\x04\x03\x1a\xc3\x1e-\x7f\x0d\x01\xfdER\xaf" +
	"\x04\x03qdY\x00\xfe\x0f\xcb\xdf%\xf5Z0\x90[" +
	"\xcb\x12\xf0\x7f\x0e\x00\xbd\x92\xd4\xbf\x05\x03\xb5\xb1\xac\x00" +
	"\xff\xd7\x14\xd0kI\xfdO0p\x0e-;\x80\xffw" +
	"\x0c\xe8?\x92!\x05\x83\xc6\x81\xe5\x06\xe0o-o$" +
	"\xa33\xd6\xdd\xff\xd6m\x96\xc31\x10)JF\x1e\x05" +
	"wUw\xe1\xc6\xb3\x8cM\x086ASVu\x91>" +
	"\x0f3\xf0\x11=\xf3b\x94\x0f\x97#\xf5\x1a =\xd0" +
	"\xcc\xea'\xd5$NS\xb0`\x0b\x82-\xf0z<O" +
	"\x1e\xe7\xc5~ \xa9\xcb*\x9fE\x15\xdaE\x9dT\xec" +
	"(\x82\xec\xec\x0fw&\x90\xa5eq\x82\x1fd\x90\xcf" +
	"\xaaS#7c\xc8*\xde=:\x0e\x00\x00\xff\xff\x9c" +
	"\xccn\xed"

func init() {
	schemas.Register(schema_fcba4f486a351ac3,
		0xb637146fbf2eaba6)
}
