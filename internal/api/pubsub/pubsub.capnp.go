// Code generated by capnpc-go. DO NOT EDIT.

package pubsub

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Topic struct{ Client *capnp.Client }

// Topic_TypeID is the unique identifier for the type Topic.
const Topic_TypeID = 0x986ea9282f106bb0

func (c Topic) Publish(ctx context.Context, params func(Topic_publish_Params) error) (Topic_publish_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_publish_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_publish_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Subscribe(ctx context.Context, params func(Topic_subscribe_Params) error) (Topic_subscribe_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_subscribe_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_subscribe_Results_Future{Future: ans.Future()}, release
}
func (c Topic) Name(ctx context.Context, params func(Topic_name_Params) error) (Topic_name_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_name_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_name_Results_Future{Future: ans.Future()}, release
}

func (c Topic) AddRef() Topic {
	return Topic{
		Client: c.Client.AddRef(),
	}
}

func (c Topic) Release() {
	c.Client.Release()
}

// A Topic_Server is a Topic with a local implementation.
type Topic_Server interface {
	Publish(context.Context, Topic_publish) error

	Subscribe(context.Context, Topic_subscribe) error

	Name(context.Context, Topic_name) error
}

// Topic_NewServer creates a new Server from an implementation of Topic_Server.
func Topic_NewServer(s Topic_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Topic_Methods(nil, s), s, c, policy)
}

// Topic_ServerToClient creates a new Client from an implementation of Topic_Server.
// The caller is responsible for calling Release on the returned Client.
func Topic_ServerToClient(s Topic_Server, policy *server.Policy) Topic {
	return Topic{Client: capnp.NewClient(Topic_NewServer(s, policy))}
}

// Topic_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Topic_Methods(methods []server.Method, s Topic_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "publish",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Publish(ctx, Topic_publish{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      1,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "subscribe",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subscribe(ctx, Topic_subscribe{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x986ea9282f106bb0,
			MethodID:      2,
			InterfaceName: "pubsub.capnp:Topic",
			MethodName:    "name",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Name(ctx, Topic_name{call})
		},
	})

	return methods
}

// Topic_publish holds the state for a server call to Topic.publish.
// See server.Call for documentation.
type Topic_publish struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_publish) Args() Topic_publish_Params {
	return Topic_publish_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_publish) AllocResults() (Topic_publish_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{Struct: r}, err
}

// Topic_subscribe holds the state for a server call to Topic.subscribe.
// See server.Call for documentation.
type Topic_subscribe struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_subscribe) Args() Topic_subscribe_Params {
	return Topic_subscribe_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_subscribe) AllocResults() (Topic_subscribe_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{Struct: r}, err
}

// Topic_name holds the state for a server call to Topic.name.
// See server.Call for documentation.
type Topic_name struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_name) Args() Topic_name_Params {
	return Topic_name_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_name) AllocResults() (Topic_name_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{Struct: r}, err
}

type Topic_Handler struct{ Client *capnp.Client }

// Topic_Handler_TypeID is the unique identifier for the type Topic_Handler.
const Topic_Handler_TypeID = 0xd19c472616f2c6fb

func (c Topic_Handler) Handle(ctx context.Context, params func(Topic_Handler_handle_Params) error) (Topic_Handler_handle_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd19c472616f2c6fb,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic.Handler",
			MethodName:    "handle",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Topic_Handler_handle_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Topic_Handler_handle_Results_Future{Future: ans.Future()}, release
}

func (c Topic_Handler) AddRef() Topic_Handler {
	return Topic_Handler{
		Client: c.Client.AddRef(),
	}
}

func (c Topic_Handler) Release() {
	c.Client.Release()
}

// A Topic_Handler_Server is a Topic_Handler with a local implementation.
type Topic_Handler_Server interface {
	Handle(context.Context, Topic_Handler_handle) error
}

// Topic_Handler_NewServer creates a new Server from an implementation of Topic_Handler_Server.
func Topic_Handler_NewServer(s Topic_Handler_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Topic_Handler_Methods(nil, s), s, c, policy)
}

// Topic_Handler_ServerToClient creates a new Client from an implementation of Topic_Handler_Server.
// The caller is responsible for calling Release on the returned Client.
func Topic_Handler_ServerToClient(s Topic_Handler_Server, policy *server.Policy) Topic_Handler {
	return Topic_Handler{Client: capnp.NewClient(Topic_Handler_NewServer(s, policy))}
}

// Topic_Handler_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Topic_Handler_Methods(methods []server.Method, s Topic_Handler_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd19c472616f2c6fb,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:Topic.Handler",
			MethodName:    "handle",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Handle(ctx, Topic_Handler_handle{call})
		},
	})

	return methods
}

// Topic_Handler_handle holds the state for a server call to Topic_Handler.handle.
// See server.Call for documentation.
type Topic_Handler_handle struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Topic_Handler_handle) Args() Topic_Handler_handle_Params {
	return Topic_Handler_handle_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Topic_Handler_handle) AllocResults() (Topic_Handler_handle_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_Handler_handle_Results{Struct: r}, err
}

type Topic_Handler_handle_Params struct{ capnp.Struct }

// Topic_Handler_handle_Params_TypeID is the unique identifier for the type Topic_Handler_handle_Params.
const Topic_Handler_handle_Params_TypeID = 0x89d849f1a30adbf2

func NewTopic_Handler_handle_Params(s *capnp.Segment) (Topic_Handler_handle_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_Handler_handle_Params{st}, err
}

func NewRootTopic_Handler_handle_Params(s *capnp.Segment) (Topic_Handler_handle_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_Handler_handle_Params{st}, err
}

func ReadRootTopic_Handler_handle_Params(msg *capnp.Message) (Topic_Handler_handle_Params, error) {
	root, err := msg.Root()
	return Topic_Handler_handle_Params{root.Struct()}, err
}

func (s Topic_Handler_handle_Params) String() string {
	str, _ := text.Marshal(0x89d849f1a30adbf2, s.Struct)
	return str
}

func (s Topic_Handler_handle_Params) Msg() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Topic_Handler_handle_Params) HasMsg() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_Handler_handle_Params) SetMsg(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Topic_Handler_handle_Params_List is a list of Topic_Handler_handle_Params.
type Topic_Handler_handle_Params_List = capnp.StructList[Topic_Handler_handle_Params]

// NewTopic_Handler_handle_Params creates a new list of Topic_Handler_handle_Params.
func NewTopic_Handler_handle_Params_List(s *capnp.Segment, sz int32) (Topic_Handler_handle_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_Handler_handle_Params]{l}, err
}

// Topic_Handler_handle_Params_Future is a wrapper for a Topic_Handler_handle_Params promised by a client call.
type Topic_Handler_handle_Params_Future struct{ *capnp.Future }

func (p Topic_Handler_handle_Params_Future) Struct() (Topic_Handler_handle_Params, error) {
	s, err := p.Future.Struct()
	return Topic_Handler_handle_Params{s}, err
}

type Topic_Handler_handle_Results struct{ capnp.Struct }

// Topic_Handler_handle_Results_TypeID is the unique identifier for the type Topic_Handler_handle_Results.
const Topic_Handler_handle_Results_TypeID = 0xf8d41329eb57bd62

func NewTopic_Handler_handle_Results(s *capnp.Segment) (Topic_Handler_handle_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_Handler_handle_Results{st}, err
}

func NewRootTopic_Handler_handle_Results(s *capnp.Segment) (Topic_Handler_handle_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_Handler_handle_Results{st}, err
}

func ReadRootTopic_Handler_handle_Results(msg *capnp.Message) (Topic_Handler_handle_Results, error) {
	root, err := msg.Root()
	return Topic_Handler_handle_Results{root.Struct()}, err
}

func (s Topic_Handler_handle_Results) String() string {
	str, _ := text.Marshal(0xf8d41329eb57bd62, s.Struct)
	return str
}

// Topic_Handler_handle_Results_List is a list of Topic_Handler_handle_Results.
type Topic_Handler_handle_Results_List = capnp.StructList[Topic_Handler_handle_Results]

// NewTopic_Handler_handle_Results creates a new list of Topic_Handler_handle_Results.
func NewTopic_Handler_handle_Results_List(s *capnp.Segment, sz int32) (Topic_Handler_handle_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_Handler_handle_Results]{l}, err
}

// Topic_Handler_handle_Results_Future is a wrapper for a Topic_Handler_handle_Results promised by a client call.
type Topic_Handler_handle_Results_Future struct{ *capnp.Future }

func (p Topic_Handler_handle_Results_Future) Struct() (Topic_Handler_handle_Results, error) {
	s, err := p.Future.Struct()
	return Topic_Handler_handle_Results{s}, err
}

type Topic_publish_Params struct{ capnp.Struct }

// Topic_publish_Params_TypeID is the unique identifier for the type Topic_publish_Params.
const Topic_publish_Params_TypeID = 0x8810938879cb8443

func NewTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params{st}, err
}

func NewRootTopic_publish_Params(s *capnp.Segment) (Topic_publish_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_publish_Params{st}, err
}

func ReadRootTopic_publish_Params(msg *capnp.Message) (Topic_publish_Params, error) {
	root, err := msg.Root()
	return Topic_publish_Params{root.Struct()}, err
}

func (s Topic_publish_Params) String() string {
	str, _ := text.Marshal(0x8810938879cb8443, s.Struct)
	return str
}

func (s Topic_publish_Params) Msg() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Topic_publish_Params) HasMsg() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_publish_Params) SetMsg(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Topic_publish_Params_List is a list of Topic_publish_Params.
type Topic_publish_Params_List = capnp.StructList[Topic_publish_Params]

// NewTopic_publish_Params creates a new list of Topic_publish_Params.
func NewTopic_publish_Params_List(s *capnp.Segment, sz int32) (Topic_publish_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_publish_Params]{l}, err
}

// Topic_publish_Params_Future is a wrapper for a Topic_publish_Params promised by a client call.
type Topic_publish_Params_Future struct{ *capnp.Future }

func (p Topic_publish_Params_Future) Struct() (Topic_publish_Params, error) {
	s, err := p.Future.Struct()
	return Topic_publish_Params{s}, err
}

type Topic_publish_Results struct{ capnp.Struct }

// Topic_publish_Results_TypeID is the unique identifier for the type Topic_publish_Results.
const Topic_publish_Results_TypeID = 0x9d3775c65b79b54c

func NewTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{st}, err
}

func NewRootTopic_publish_Results(s *capnp.Segment) (Topic_publish_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_publish_Results{st}, err
}

func ReadRootTopic_publish_Results(msg *capnp.Message) (Topic_publish_Results, error) {
	root, err := msg.Root()
	return Topic_publish_Results{root.Struct()}, err
}

func (s Topic_publish_Results) String() string {
	str, _ := text.Marshal(0x9d3775c65b79b54c, s.Struct)
	return str
}

// Topic_publish_Results_List is a list of Topic_publish_Results.
type Topic_publish_Results_List = capnp.StructList[Topic_publish_Results]

// NewTopic_publish_Results creates a new list of Topic_publish_Results.
func NewTopic_publish_Results_List(s *capnp.Segment, sz int32) (Topic_publish_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_publish_Results]{l}, err
}

// Topic_publish_Results_Future is a wrapper for a Topic_publish_Results promised by a client call.
type Topic_publish_Results_Future struct{ *capnp.Future }

func (p Topic_publish_Results_Future) Struct() (Topic_publish_Results, error) {
	s, err := p.Future.Struct()
	return Topic_publish_Results{s}, err
}

type Topic_subscribe_Params struct{ capnp.Struct }

// Topic_subscribe_Params_TypeID is the unique identifier for the type Topic_subscribe_Params.
const Topic_subscribe_Params_TypeID = 0xc772c6756fef5ba8

func NewTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_subscribe_Params{st}, err
}

func NewRootTopic_subscribe_Params(s *capnp.Segment) (Topic_subscribe_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_subscribe_Params{st}, err
}

func ReadRootTopic_subscribe_Params(msg *capnp.Message) (Topic_subscribe_Params, error) {
	root, err := msg.Root()
	return Topic_subscribe_Params{root.Struct()}, err
}

func (s Topic_subscribe_Params) String() string {
	str, _ := text.Marshal(0xc772c6756fef5ba8, s.Struct)
	return str
}

func (s Topic_subscribe_Params) Handler() Topic_Handler {
	p, _ := s.Struct.Ptr(0)
	return Topic_Handler{Client: p.Interface().Client()}
}

func (s Topic_subscribe_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_subscribe_Params) SetHandler(v Topic_Handler) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Topic_subscribe_Params_List is a list of Topic_subscribe_Params.
type Topic_subscribe_Params_List = capnp.StructList[Topic_subscribe_Params]

// NewTopic_subscribe_Params creates a new list of Topic_subscribe_Params.
func NewTopic_subscribe_Params_List(s *capnp.Segment, sz int32) (Topic_subscribe_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_subscribe_Params]{l}, err
}

// Topic_subscribe_Params_Future is a wrapper for a Topic_subscribe_Params promised by a client call.
type Topic_subscribe_Params_Future struct{ *capnp.Future }

func (p Topic_subscribe_Params_Future) Struct() (Topic_subscribe_Params, error) {
	s, err := p.Future.Struct()
	return Topic_subscribe_Params{s}, err
}

func (p Topic_subscribe_Params_Future) Handler() Topic_Handler {
	return Topic_Handler{Client: p.Future.Field(0, nil).Client()}
}

type Topic_subscribe_Results struct{ capnp.Struct }

// Topic_subscribe_Results_TypeID is the unique identifier for the type Topic_subscribe_Results.
const Topic_subscribe_Results_TypeID = 0x8470369ac91fcc32

func NewTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{st}, err
}

func NewRootTopic_subscribe_Results(s *capnp.Segment) (Topic_subscribe_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_subscribe_Results{st}, err
}

func ReadRootTopic_subscribe_Results(msg *capnp.Message) (Topic_subscribe_Results, error) {
	root, err := msg.Root()
	return Topic_subscribe_Results{root.Struct()}, err
}

func (s Topic_subscribe_Results) String() string {
	str, _ := text.Marshal(0x8470369ac91fcc32, s.Struct)
	return str
}

// Topic_subscribe_Results_List is a list of Topic_subscribe_Results.
type Topic_subscribe_Results_List = capnp.StructList[Topic_subscribe_Results]

// NewTopic_subscribe_Results creates a new list of Topic_subscribe_Results.
func NewTopic_subscribe_Results_List(s *capnp.Segment, sz int32) (Topic_subscribe_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_subscribe_Results]{l}, err
}

// Topic_subscribe_Results_Future is a wrapper for a Topic_subscribe_Results promised by a client call.
type Topic_subscribe_Results_Future struct{ *capnp.Future }

func (p Topic_subscribe_Results_Future) Struct() (Topic_subscribe_Results, error) {
	s, err := p.Future.Struct()
	return Topic_subscribe_Results{s}, err
}

type Topic_name_Params struct{ capnp.Struct }

// Topic_name_Params_TypeID is the unique identifier for the type Topic_name_Params.
const Topic_name_Params_TypeID = 0xf1fc6ff9f4d43e07

func NewTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params{st}, err
}

func NewRootTopic_name_Params(s *capnp.Segment) (Topic_name_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Topic_name_Params{st}, err
}

func ReadRootTopic_name_Params(msg *capnp.Message) (Topic_name_Params, error) {
	root, err := msg.Root()
	return Topic_name_Params{root.Struct()}, err
}

func (s Topic_name_Params) String() string {
	str, _ := text.Marshal(0xf1fc6ff9f4d43e07, s.Struct)
	return str
}

// Topic_name_Params_List is a list of Topic_name_Params.
type Topic_name_Params_List = capnp.StructList[Topic_name_Params]

// NewTopic_name_Params creates a new list of Topic_name_Params.
func NewTopic_name_Params_List(s *capnp.Segment, sz int32) (Topic_name_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Topic_name_Params]{l}, err
}

// Topic_name_Params_Future is a wrapper for a Topic_name_Params promised by a client call.
type Topic_name_Params_Future struct{ *capnp.Future }

func (p Topic_name_Params_Future) Struct() (Topic_name_Params, error) {
	s, err := p.Future.Struct()
	return Topic_name_Params{s}, err
}

type Topic_name_Results struct{ capnp.Struct }

// Topic_name_Results_TypeID is the unique identifier for the type Topic_name_Results.
const Topic_name_Results_TypeID = 0xd5765aab1c56263f

func NewTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{st}, err
}

func NewRootTopic_name_Results(s *capnp.Segment) (Topic_name_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Topic_name_Results{st}, err
}

func ReadRootTopic_name_Results(msg *capnp.Message) (Topic_name_Results, error) {
	root, err := msg.Root()
	return Topic_name_Results{root.Struct()}, err
}

func (s Topic_name_Results) String() string {
	str, _ := text.Marshal(0xd5765aab1c56263f, s.Struct)
	return str
}

func (s Topic_name_Results) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Topic_name_Results) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Topic_name_Results) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Topic_name_Results) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Topic_name_Results_List is a list of Topic_name_Results.
type Topic_name_Results_List = capnp.StructList[Topic_name_Results]

// NewTopic_name_Results creates a new list of Topic_name_Results.
func NewTopic_name_Results_List(s *capnp.Segment, sz int32) (Topic_name_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Topic_name_Results]{l}, err
}

// Topic_name_Results_Future is a wrapper for a Topic_name_Results promised by a client call.
type Topic_name_Results_Future struct{ *capnp.Future }

func (p Topic_name_Results_Future) Struct() (Topic_name_Results, error) {
	s, err := p.Future.Struct()
	return Topic_name_Results{s}, err
}

type PubSub struct{ Client *capnp.Client }

// PubSub_TypeID is the unique identifier for the type PubSub.
const PubSub_TypeID = 0xf1cc149f1c06e50e

func (c PubSub) Join(ctx context.Context, params func(PubSub_join_Params) error) (PubSub_join_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf1cc149f1c06e50e,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:PubSub",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PubSub_join_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return PubSub_join_Results_Future{Future: ans.Future()}, release
}

func (c PubSub) AddRef() PubSub {
	return PubSub{
		Client: c.Client.AddRef(),
	}
}

func (c PubSub) Release() {
	c.Client.Release()
}

// A PubSub_Server is a PubSub with a local implementation.
type PubSub_Server interface {
	Join(context.Context, PubSub_join) error
}

// PubSub_NewServer creates a new Server from an implementation of PubSub_Server.
func PubSub_NewServer(s PubSub_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PubSub_Methods(nil, s), s, c, policy)
}

// PubSub_ServerToClient creates a new Client from an implementation of PubSub_Server.
// The caller is responsible for calling Release on the returned Client.
func PubSub_ServerToClient(s PubSub_Server, policy *server.Policy) PubSub {
	return PubSub{Client: capnp.NewClient(PubSub_NewServer(s, policy))}
}

// PubSub_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PubSub_Methods(methods []server.Method, s PubSub_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf1cc149f1c06e50e,
			MethodID:      0,
			InterfaceName: "pubsub.capnp:PubSub",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, PubSub_join{call})
		},
	})

	return methods
}

// PubSub_join holds the state for a server call to PubSub.join.
// See server.Call for documentation.
type PubSub_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PubSub_join) Args() PubSub_join_Params {
	return PubSub_join_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c PubSub_join) AllocResults() (PubSub_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{Struct: r}, err
}

type PubSub_join_Params struct{ capnp.Struct }

// PubSub_join_Params_TypeID is the unique identifier for the type PubSub_join_Params.
const PubSub_join_Params_TypeID = 0xfb4016d002794da7

func NewPubSub_join_Params(s *capnp.Segment) (PubSub_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Params{st}, err
}

func NewRootPubSub_join_Params(s *capnp.Segment) (PubSub_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Params{st}, err
}

func ReadRootPubSub_join_Params(msg *capnp.Message) (PubSub_join_Params, error) {
	root, err := msg.Root()
	return PubSub_join_Params{root.Struct()}, err
}

func (s PubSub_join_Params) String() string {
	str, _ := text.Marshal(0xfb4016d002794da7, s.Struct)
	return str
}

func (s PubSub_join_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PubSub_join_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PubSub_join_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PubSub_join_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// PubSub_join_Params_List is a list of PubSub_join_Params.
type PubSub_join_Params_List = capnp.StructList[PubSub_join_Params]

// NewPubSub_join_Params creates a new list of PubSub_join_Params.
func NewPubSub_join_Params_List(s *capnp.Segment, sz int32) (PubSub_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PubSub_join_Params]{l}, err
}

// PubSub_join_Params_Future is a wrapper for a PubSub_join_Params promised by a client call.
type PubSub_join_Params_Future struct{ *capnp.Future }

func (p PubSub_join_Params_Future) Struct() (PubSub_join_Params, error) {
	s, err := p.Future.Struct()
	return PubSub_join_Params{s}, err
}

type PubSub_join_Results struct{ capnp.Struct }

// PubSub_join_Results_TypeID is the unique identifier for the type PubSub_join_Results.
const PubSub_join_Results_TypeID = 0x9f6c50fbc67b1d88

func NewPubSub_join_Results(s *capnp.Segment) (PubSub_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{st}, err
}

func NewRootPubSub_join_Results(s *capnp.Segment) (PubSub_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PubSub_join_Results{st}, err
}

func ReadRootPubSub_join_Results(msg *capnp.Message) (PubSub_join_Results, error) {
	root, err := msg.Root()
	return PubSub_join_Results{root.Struct()}, err
}

func (s PubSub_join_Results) String() string {
	str, _ := text.Marshal(0x9f6c50fbc67b1d88, s.Struct)
	return str
}

func (s PubSub_join_Results) Topic() Topic {
	p, _ := s.Struct.Ptr(0)
	return Topic{Client: p.Interface().Client()}
}

func (s PubSub_join_Results) HasTopic() bool {
	return s.Struct.HasPtr(0)
}

func (s PubSub_join_Results) SetTopic(v Topic) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// PubSub_join_Results_List is a list of PubSub_join_Results.
type PubSub_join_Results_List = capnp.StructList[PubSub_join_Results]

// NewPubSub_join_Results creates a new list of PubSub_join_Results.
func NewPubSub_join_Results_List(s *capnp.Segment, sz int32) (PubSub_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PubSub_join_Results]{l}, err
}

// PubSub_join_Results_Future is a wrapper for a PubSub_join_Results promised by a client call.
type PubSub_join_Results_Future struct{ *capnp.Future }

func (p PubSub_join_Results_Future) Struct() (PubSub_join_Results, error) {
	s, err := p.Future.Struct()
	return PubSub_join_Results{s}, err
}

func (p PubSub_join_Results_Future) Topic() Topic {
	return Topic{Client: p.Future.Field(0, nil).Client()}
}

const schema_f9d8a0180405d9ed = "x\xda\x94\x93OH\x14m\x1c\xc7\x7f\xbf\xe7\x99u^" +
	"\xc4}\xf5y\x1f\xf1}}3$Q\xa9\x85\xb64(" +
	"\xf2\xd0.VXQ0\xb3FA\x9ef\xb6!\xb7\xf6" +
	"\x1f3N \x1d\xbc\x18\xd89\x82\xb0\xc4\xa8CE\x97" +
	".\x1d=\xba\"y(P\xd0\"\xa2\x83\xa7\x90X\xe9" +
	"\x90YL<3\xce\xce\xb8\x96\xd9i\x17\xe6\xc7\xf7\xf7" +
	"\xfd}\xbe\xdf\xe7\xe0=LJ]\xd1\xf7\x11 \xea\x89" +
	"H\x8d\xd3=\xd7:;~\xb88\x0a\x8c#\x80$\x03" +
	"\x1cZ 1\x04\xc99>\xfarx\xecv\xc3\x98\xf7" +
	"%\x82\xe2\xd3\x14\xf9\x07\x01\xf94I\x00:\xabok" +
	"\x1f\x95O/\xde\x02\xb6\xab2\xb0L\xce\x88\x81\xb2;" +
	"\xf0\xfcZ\xc3\x81\xbdO\xf3w\x81E\xa9\xb3\xb2\x14\x91" +
	"\xfe{\xb0\xb8\x06\x80\x9c\xd1q\xdeL\xff\x05\xe0{\xe8" +
	"\x0c\x9f\xa02\x80s\xf6\xc5\xf0@\xc9>2\x112r" +
	"\x93\xfe/\x8c\x8c\xed\xbeQZW\xb2\x93\xc0\x1a+{" +
	"r\xb4V\xec\xb1\xa9\xd8\xf3d\xe0S\xc1.\x993a" +
	"\xa7wh\x9b\x18\x98p\x07\xd6K\xabM\x9d}\xf7_" +
	"\x03\xe34p\x05\xc8\xa7\xe8\x1b>+\xd6\xf3i\xda\xc7" +
	"W\\#\x89\xce\x0b-\xcf.]_\x08\xab-P\"" +
	"\xd4\x96\\\xb5\xbf\x97kZ&\x1b\xe7\xca[\xceZ\xa3" +
	"\x0f9\x0a\xe7\xfc;\xed\xe3\x1d\xe2\x9f#\x1f\x9b\xff\xbc" +
	"V\xf8V\x0e\xce\xe2Q\xe9+H\x8e>u\xf1\xe3>" +
	">\xff\xc5\xa3\xe7\xde[\xa6)q\xef\xe3s\xc3\xe4U" +
	"Sr=|\xef;\xcf\xc0\x07\x9a\x80\xfdN\xd1\xd6-" +
	"[\x8f\xa7\xa9V\xcc\x17{\xce\x17\x8a\x99t\xdc\xb2u" +
	"+mft\xa3=eX\xf5vv\xc8\xfa\xe9X\xd1" +
	"\xd6\xb3\x19k\xb0]\xd1L-\x87\x96*Q\x09@B" +
	"\x00\x16m\x03P\xff\xa2\xa86\x12\x94s\xd6\x15\x8c\x02" +
	"\xc1(`EF\x0a\xc9\x9c\xd2\xf2\x97\xb3\x86\x19\x1ft" +
	"\x7f=5\x0b\xe0O\xe4\xd0\x97\xa3\x99\xb4*a8$" +
	"\xec\x1d\xd9X\xa0\xd6\xd1\x08@\xa5\x8a\xe8\x97\x84\xa9\xbd" +
	"@\xd8I\x19\x83\xf0\xd1o2;\x9a\x02\xc2\xbad$" +
	"\x15\xf8\xe8g\xca:b@X\xb3<\xb2\xc1!\x89\x8e" +
	"\x0f\x0e\xd0Hb}^\xcb\x19IT\x10\xb7\xa5\x972" +
	",;K\xb7 Vl\xbd\xdf\xd6\xe3W\x0b\x99\xbc7" +
	"2T\xc5\xa4;`\xd2:$\x14\x91\x85\xeb\x88\x0c\xf0" +
	"7\xe1*\x9a)k\xb9M\xb9\xf5\x06\xa2#^\x1e&" +
	"\xb2\x80f\x95,\xa9N\x91\x1a\xa6\x82\xa8J.h\xff" +
	"I\xa3\xdfN\xc6z\x80\xb0\x88\x9c\xf0\x94\x7f\x8dF\x80" +
	"\xab\x1c\x1d\xb6\x17\x0b\xec\xb9t\xb1\x0e\x08\xd6m)\x82" +
	"b\xebr\xbf\xad\x07V\xfcW\x80\xfe\xf3g,\xe6Z" +
	"\xa9\x17|7\x1b!\xd5F\x12^#w\xd2]\xcf3" +
	"n\x97\xe5F\xbdwr\xd5\x8f\x00\x00\x00\xff\xff\xbc\xdf" +
	"\x89x"

func init() {
	schemas.Register(schema_f9d8a0180405d9ed,
		0x8470369ac91fcc32,
		0x8810938879cb8443,
		0x89d849f1a30adbf2,
		0x986ea9282f106bb0,
		0x9d3775c65b79b54c,
		0x9f6c50fbc67b1d88,
		0xc772c6756fef5ba8,
		0xd19c472616f2c6fb,
		0xd5765aab1c56263f,
		0xf1cc149f1c06e50e,
		0xf1fc6ff9f4d43e07,
		0xf8d41329eb57bd62,
		0xfb4016d002794da7)
}
