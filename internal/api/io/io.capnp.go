// Code generated by capnpc-go. DO NOT EDIT.

package io

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Reader struct{ Client *capnp.Client }

// Reader_TypeID is the unique identifier for the type Reader.
const Reader_TypeID = 0xced01e7e70669396

func (c Reader) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xced01e7e70669396,
			MethodID:      0,
			InterfaceName: "io.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}

func (c Reader) AddRef() Reader {
	return Reader{
		Client: c.Client.AddRef(),
	}
}

func (c Reader) Release() {
	c.Client.Release()
}

// A Reader_Server is a Reader with a local implementation.
type Reader_Server interface {
	Read(context.Context, Reader_read) error
}

// Reader_NewServer creates a new Server from an implementation of Reader_Server.
func Reader_NewServer(s Reader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Reader_Methods(nil, s), s, c, policy)
}

// Reader_ServerToClient creates a new Client from an implementation of Reader_Server.
// The caller is responsible for calling Release on the returned Client.
func Reader_ServerToClient(s Reader_Server, policy *server.Policy) Reader {
	return Reader{Client: capnp.NewClient(Reader_NewServer(s, policy))}
}

// Reader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Reader_Methods(methods []server.Method, s Reader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xced01e7e70669396,
			MethodID:      0,
			InterfaceName: "io.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	return methods
}

// Reader_read holds the state for a server call to Reader.read.
// See server.Call for documentation.
type Reader_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Reader_read) Args() Reader_read_Params {
	return Reader_read_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Reader_read) AllocResults() (Reader_read_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Reader_read_Results{Struct: r}, err
}

type Reader_read_Params struct{ capnp.Struct }

// Reader_read_Params_TypeID is the unique identifier for the type Reader_read_Params.
const Reader_read_Params_TypeID = 0x886ae50aa2e2ee84

func NewReader_read_Params(s *capnp.Segment) (Reader_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Reader_read_Params{st}, err
}

func NewRootReader_read_Params(s *capnp.Segment) (Reader_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Reader_read_Params{st}, err
}

func ReadRootReader_read_Params(msg *capnp.Message) (Reader_read_Params, error) {
	root, err := msg.Root()
	return Reader_read_Params{root.Struct()}, err
}

func (s Reader_read_Params) String() string {
	str, _ := text.Marshal(0x886ae50aa2e2ee84, s.Struct)
	return str
}

func (s Reader_read_Params) N() uint16 {
	return s.Struct.Uint16(0)
}

func (s Reader_read_Params) SetN(v uint16) {
	s.Struct.SetUint16(0, v)
}

// Reader_read_Params_List is a list of Reader_read_Params.
type Reader_read_Params_List = capnp.StructList[Reader_read_Params]

// NewReader_read_Params creates a new list of Reader_read_Params.
func NewReader_read_Params_List(s *capnp.Segment, sz int32) (Reader_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Reader_read_Params]{List: l}, err
}

// Reader_read_Params_Future is a wrapper for a Reader_read_Params promised by a client call.
type Reader_read_Params_Future struct{ *capnp.Future }

func (p Reader_read_Params_Future) Struct() (Reader_read_Params, error) {
	s, err := p.Future.Struct()
	return Reader_read_Params{s}, err
}

type Reader_read_Results struct{ capnp.Struct }

// Reader_read_Results_TypeID is the unique identifier for the type Reader_read_Results.
const Reader_read_Results_TypeID = 0x88568f44f461736f

func NewReader_read_Results(s *capnp.Segment) (Reader_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Reader_read_Results{st}, err
}

func NewRootReader_read_Results(s *capnp.Segment) (Reader_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Reader_read_Results{st}, err
}

func ReadRootReader_read_Results(msg *capnp.Message) (Reader_read_Results, error) {
	root, err := msg.Root()
	return Reader_read_Results{root.Struct()}, err
}

func (s Reader_read_Results) String() string {
	str, _ := text.Marshal(0x88568f44f461736f, s.Struct)
	return str
}

func (s Reader_read_Results) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Reader_read_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Reader_read_Results) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Reader_read_Results) Err() (Error, error) {
	p, err := s.Struct.Ptr(1)
	return Error{Struct: p.Struct()}, err
}

func (s Reader_read_Results) HasErr() bool {
	return s.Struct.HasPtr(1)
}

func (s Reader_read_Results) SetErr(v Error) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewErr sets the err field to a newly
// allocated Error struct, preferring placement in s's segment.
func (s Reader_read_Results) NewErr() (Error, error) {
	ss, err := NewError(s.Struct.Segment())
	if err != nil {
		return Error{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Reader_read_Results_List is a list of Reader_read_Results.
type Reader_read_Results_List = capnp.StructList[Reader_read_Results]

// NewReader_read_Results creates a new list of Reader_read_Results.
func NewReader_read_Results_List(s *capnp.Segment, sz int32) (Reader_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Reader_read_Results]{List: l}, err
}

// Reader_read_Results_Future is a wrapper for a Reader_read_Results promised by a client call.
type Reader_read_Results_Future struct{ *capnp.Future }

func (p Reader_read_Results_Future) Struct() (Reader_read_Results, error) {
	s, err := p.Future.Struct()
	return Reader_read_Results{s}, err
}

func (p Reader_read_Results_Future) Err() Error_Future {
	return Error_Future{Future: p.Future.Field(1, nil)}
}

type Writer struct{ Client *capnp.Client }

// Writer_TypeID is the unique identifier for the type Writer.
const Writer_TypeID = 0xdbc9a6253f362378

func (c Writer) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbc9a6253f362378,
			MethodID:      0,
			InterfaceName: "io.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}

func (c Writer) AddRef() Writer {
	return Writer{
		Client: c.Client.AddRef(),
	}
}

func (c Writer) Release() {
	c.Client.Release()
}

// A Writer_Server is a Writer with a local implementation.
type Writer_Server interface {
	Write(context.Context, Writer_write) error
}

// Writer_NewServer creates a new Server from an implementation of Writer_Server.
func Writer_NewServer(s Writer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Writer_Methods(nil, s), s, c, policy)
}

// Writer_ServerToClient creates a new Client from an implementation of Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Writer_ServerToClient(s Writer_Server, policy *server.Policy) Writer {
	return Writer{Client: capnp.NewClient(Writer_NewServer(s, policy))}
}

// Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Writer_Methods(methods []server.Method, s Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbc9a6253f362378,
			MethodID:      0,
			InterfaceName: "io.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	return methods
}

// Writer_write holds the state for a server call to Writer.write.
// See server.Call for documentation.
type Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Writer_write) Args() Writer_write_Params {
	return Writer_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Writer_write) AllocResults() (Writer_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Writer_write_Results{Struct: r}, err
}

type Writer_write_Params struct{ capnp.Struct }

// Writer_write_Params_TypeID is the unique identifier for the type Writer_write_Params.
const Writer_write_Params_TypeID = 0x84b973adfd026e77

func NewWriter_write_Params(s *capnp.Segment) (Writer_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Writer_write_Params{st}, err
}

func NewRootWriter_write_Params(s *capnp.Segment) (Writer_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Writer_write_Params{st}, err
}

func ReadRootWriter_write_Params(msg *capnp.Message) (Writer_write_Params, error) {
	root, err := msg.Root()
	return Writer_write_Params{root.Struct()}, err
}

func (s Writer_write_Params) String() string {
	str, _ := text.Marshal(0x84b973adfd026e77, s.Struct)
	return str
}

func (s Writer_write_Params) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Writer_write_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Writer_write_Params) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Writer_write_Params_List is a list of Writer_write_Params.
type Writer_write_Params_List = capnp.StructList[Writer_write_Params]

// NewWriter_write_Params creates a new list of Writer_write_Params.
func NewWriter_write_Params_List(s *capnp.Segment, sz int32) (Writer_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Writer_write_Params]{List: l}, err
}

// Writer_write_Params_Future is a wrapper for a Writer_write_Params promised by a client call.
type Writer_write_Params_Future struct{ *capnp.Future }

func (p Writer_write_Params_Future) Struct() (Writer_write_Params, error) {
	s, err := p.Future.Struct()
	return Writer_write_Params{s}, err
}

type Writer_write_Results struct{ capnp.Struct }

// Writer_write_Results_TypeID is the unique identifier for the type Writer_write_Results.
const Writer_write_Results_TypeID = 0xb4d73f2cdd5814d8

func NewWriter_write_Results(s *capnp.Segment) (Writer_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Writer_write_Results{st}, err
}

func NewRootWriter_write_Results(s *capnp.Segment) (Writer_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Writer_write_Results{st}, err
}

func ReadRootWriter_write_Results(msg *capnp.Message) (Writer_write_Results, error) {
	root, err := msg.Root()
	return Writer_write_Results{root.Struct()}, err
}

func (s Writer_write_Results) String() string {
	str, _ := text.Marshal(0xb4d73f2cdd5814d8, s.Struct)
	return str
}

func (s Writer_write_Results) N() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Writer_write_Results) SetN(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Writer_write_Results) Err() (Error, error) {
	p, err := s.Struct.Ptr(0)
	return Error{Struct: p.Struct()}, err
}

func (s Writer_write_Results) HasErr() bool {
	return s.Struct.HasPtr(0)
}

func (s Writer_write_Results) SetErr(v Error) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewErr sets the err field to a newly
// allocated Error struct, preferring placement in s's segment.
func (s Writer_write_Results) NewErr() (Error, error) {
	ss, err := NewError(s.Struct.Segment())
	if err != nil {
		return Error{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Writer_write_Results_List is a list of Writer_write_Results.
type Writer_write_Results_List = capnp.StructList[Writer_write_Results]

// NewWriter_write_Results creates a new list of Writer_write_Results.
func NewWriter_write_Results_List(s *capnp.Segment, sz int32) (Writer_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Writer_write_Results]{List: l}, err
}

// Writer_write_Results_Future is a wrapper for a Writer_write_Results promised by a client call.
type Writer_write_Results_Future struct{ *capnp.Future }

func (p Writer_write_Results_Future) Struct() (Writer_write_Results, error) {
	s, err := p.Future.Struct()
	return Writer_write_Results{s}, err
}

func (p Writer_write_Results_Future) Err() Error_Future {
	return Error_Future{Future: p.Future.Field(0, nil)}
}

type Closer struct{ Client *capnp.Client }

// Closer_TypeID is the unique identifier for the type Closer.
const Closer_TypeID = 0x9f19772a0967797e

func (c Closer) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9f19772a0967797e,
			MethodID:      0,
			InterfaceName: "io.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c Closer) AddRef() Closer {
	return Closer{
		Client: c.Client.AddRef(),
	}
}

func (c Closer) Release() {
	c.Client.Release()
}

// A Closer_Server is a Closer with a local implementation.
type Closer_Server interface {
	Close(context.Context, Closer_close) error
}

// Closer_NewServer creates a new Server from an implementation of Closer_Server.
func Closer_NewServer(s Closer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Closer_Methods(nil, s), s, c, policy)
}

// Closer_ServerToClient creates a new Client from an implementation of Closer_Server.
// The caller is responsible for calling Release on the returned Client.
func Closer_ServerToClient(s Closer_Server, policy *server.Policy) Closer {
	return Closer{Client: capnp.NewClient(Closer_NewServer(s, policy))}
}

// Closer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Closer_Methods(methods []server.Method, s Closer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f19772a0967797e,
			MethodID:      0,
			InterfaceName: "io.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

// Closer_close holds the state for a server call to Closer.close.
// See server.Call for documentation.
type Closer_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Closer_close) Args() Closer_close_Params {
	return Closer_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Closer_close) AllocResults() (Closer_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{Struct: r}, err
}

type Closer_close_Params struct{ capnp.Struct }

// Closer_close_Params_TypeID is the unique identifier for the type Closer_close_Params.
const Closer_close_Params_TypeID = 0xc3e6312dd5a55d71

func NewCloser_close_Params(s *capnp.Segment) (Closer_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Params{st}, err
}

func NewRootCloser_close_Params(s *capnp.Segment) (Closer_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Params{st}, err
}

func ReadRootCloser_close_Params(msg *capnp.Message) (Closer_close_Params, error) {
	root, err := msg.Root()
	return Closer_close_Params{root.Struct()}, err
}

func (s Closer_close_Params) String() string {
	str, _ := text.Marshal(0xc3e6312dd5a55d71, s.Struct)
	return str
}

// Closer_close_Params_List is a list of Closer_close_Params.
type Closer_close_Params_List = capnp.StructList[Closer_close_Params]

// NewCloser_close_Params creates a new list of Closer_close_Params.
func NewCloser_close_Params_List(s *capnp.Segment, sz int32) (Closer_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Closer_close_Params]{List: l}, err
}

// Closer_close_Params_Future is a wrapper for a Closer_close_Params promised by a client call.
type Closer_close_Params_Future struct{ *capnp.Future }

func (p Closer_close_Params_Future) Struct() (Closer_close_Params, error) {
	s, err := p.Future.Struct()
	return Closer_close_Params{s}, err
}

type Closer_close_Results struct{ capnp.Struct }

// Closer_close_Results_TypeID is the unique identifier for the type Closer_close_Results.
const Closer_close_Results_TypeID = 0xcdd1e8b5002f0852

func NewCloser_close_Results(s *capnp.Segment) (Closer_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{st}, err
}

func NewRootCloser_close_Results(s *capnp.Segment) (Closer_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Closer_close_Results{st}, err
}

func ReadRootCloser_close_Results(msg *capnp.Message) (Closer_close_Results, error) {
	root, err := msg.Root()
	return Closer_close_Results{root.Struct()}, err
}

func (s Closer_close_Results) String() string {
	str, _ := text.Marshal(0xcdd1e8b5002f0852, s.Struct)
	return str
}

// Closer_close_Results_List is a list of Closer_close_Results.
type Closer_close_Results_List = capnp.StructList[Closer_close_Results]

// NewCloser_close_Results creates a new list of Closer_close_Results.
func NewCloser_close_Results_List(s *capnp.Segment, sz int32) (Closer_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Closer_close_Results]{List: l}, err
}

// Closer_close_Results_Future is a wrapper for a Closer_close_Results promised by a client call.
type Closer_close_Results_Future struct{ *capnp.Future }

func (p Closer_close_Results_Future) Struct() (Closer_close_Results, error) {
	s, err := p.Future.Struct()
	return Closer_close_Results{s}, err
}

type ReadCloser struct{ Client *capnp.Client }

// ReadCloser_TypeID is the unique identifier for the type ReadCloser.
const ReadCloser_TypeID = 0x8160a1e032380cef

func (c ReadCloser) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xced01e7e70669396,
			MethodID:      0,
			InterfaceName: "io.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}
func (c ReadCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9f19772a0967797e,
			MethodID:      0,
			InterfaceName: "io.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c ReadCloser) AddRef() ReadCloser {
	return ReadCloser{
		Client: c.Client.AddRef(),
	}
}

func (c ReadCloser) Release() {
	c.Client.Release()
}

// A ReadCloser_Server is a ReadCloser with a local implementation.
type ReadCloser_Server interface {
	Read(context.Context, Reader_read) error

	Close(context.Context, Closer_close) error
}

// ReadCloser_NewServer creates a new Server from an implementation of ReadCloser_Server.
func ReadCloser_NewServer(s ReadCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ReadCloser_Methods(nil, s), s, c, policy)
}

// ReadCloser_ServerToClient creates a new Client from an implementation of ReadCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func ReadCloser_ServerToClient(s ReadCloser_Server, policy *server.Policy) ReadCloser {
	return ReadCloser{Client: capnp.NewClient(ReadCloser_NewServer(s, policy))}
}

// ReadCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ReadCloser_Methods(methods []server.Method, s ReadCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xced01e7e70669396,
			MethodID:      0,
			InterfaceName: "io.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f19772a0967797e,
			MethodID:      0,
			InterfaceName: "io.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type WriteCloser struct{ Client *capnp.Client }

// WriteCloser_TypeID is the unique identifier for the type WriteCloser.
const WriteCloser_TypeID = 0x93929ed3dc3696cc

func (c WriteCloser) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbc9a6253f362378,
			MethodID:      0,
			InterfaceName: "io.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}
func (c WriteCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9f19772a0967797e,
			MethodID:      0,
			InterfaceName: "io.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c WriteCloser) AddRef() WriteCloser {
	return WriteCloser{
		Client: c.Client.AddRef(),
	}
}

func (c WriteCloser) Release() {
	c.Client.Release()
}

// A WriteCloser_Server is a WriteCloser with a local implementation.
type WriteCloser_Server interface {
	Write(context.Context, Writer_write) error

	Close(context.Context, Closer_close) error
}

// WriteCloser_NewServer creates a new Server from an implementation of WriteCloser_Server.
func WriteCloser_NewServer(s WriteCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WriteCloser_Methods(nil, s), s, c, policy)
}

// WriteCloser_ServerToClient creates a new Client from an implementation of WriteCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func WriteCloser_ServerToClient(s WriteCloser_Server, policy *server.Policy) WriteCloser {
	return WriteCloser{Client: capnp.NewClient(WriteCloser_NewServer(s, policy))}
}

// WriteCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WriteCloser_Methods(methods []server.Method, s WriteCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbc9a6253f362378,
			MethodID:      0,
			InterfaceName: "io.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f19772a0967797e,
			MethodID:      0,
			InterfaceName: "io.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type ReadWriter struct{ Client *capnp.Client }

// ReadWriter_TypeID is the unique identifier for the type ReadWriter.
const ReadWriter_TypeID = 0x9aa26d7b18bb8346

func (c ReadWriter) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xced01e7e70669396,
			MethodID:      0,
			InterfaceName: "io.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}
func (c ReadWriter) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbc9a6253f362378,
			MethodID:      0,
			InterfaceName: "io.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}

func (c ReadWriter) AddRef() ReadWriter {
	return ReadWriter{
		Client: c.Client.AddRef(),
	}
}

func (c ReadWriter) Release() {
	c.Client.Release()
}

// A ReadWriter_Server is a ReadWriter with a local implementation.
type ReadWriter_Server interface {
	Read(context.Context, Reader_read) error

	Write(context.Context, Writer_write) error
}

// ReadWriter_NewServer creates a new Server from an implementation of ReadWriter_Server.
func ReadWriter_NewServer(s ReadWriter_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ReadWriter_Methods(nil, s), s, c, policy)
}

// ReadWriter_ServerToClient creates a new Client from an implementation of ReadWriter_Server.
// The caller is responsible for calling Release on the returned Client.
func ReadWriter_ServerToClient(s ReadWriter_Server, policy *server.Policy) ReadWriter {
	return ReadWriter{Client: capnp.NewClient(ReadWriter_NewServer(s, policy))}
}

// ReadWriter_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ReadWriter_Methods(methods []server.Method, s ReadWriter_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xced01e7e70669396,
			MethodID:      0,
			InterfaceName: "io.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbc9a6253f362378,
			MethodID:      0,
			InterfaceName: "io.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	return methods
}

type ReadWriteCloser struct{ Client *capnp.Client }

// ReadWriteCloser_TypeID is the unique identifier for the type ReadWriteCloser.
const ReadWriteCloser_TypeID = 0x8b0597c6f582be70

func (c ReadWriteCloser) Read(ctx context.Context, params func(Reader_read_Params) error) (Reader_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xced01e7e70669396,
			MethodID:      0,
			InterfaceName: "io.capnp:Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Reader_read_Results_Future{Future: ans.Future()}, release
}
func (c ReadWriteCloser) Write(ctx context.Context, params func(Writer_write_Params) error) (Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdbc9a6253f362378,
			MethodID:      0,
			InterfaceName: "io.capnp:Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Writer_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Writer_write_Results_Future{Future: ans.Future()}, release
}
func (c ReadWriteCloser) Close(ctx context.Context, params func(Closer_close_Params) error) (Closer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9f19772a0967797e,
			MethodID:      0,
			InterfaceName: "io.capnp:Closer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Closer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Closer_close_Results_Future{Future: ans.Future()}, release
}

func (c ReadWriteCloser) AddRef() ReadWriteCloser {
	return ReadWriteCloser{
		Client: c.Client.AddRef(),
	}
}

func (c ReadWriteCloser) Release() {
	c.Client.Release()
}

// A ReadWriteCloser_Server is a ReadWriteCloser with a local implementation.
type ReadWriteCloser_Server interface {
	Read(context.Context, Reader_read) error

	Write(context.Context, Writer_write) error

	Close(context.Context, Closer_close) error
}

// ReadWriteCloser_NewServer creates a new Server from an implementation of ReadWriteCloser_Server.
func ReadWriteCloser_NewServer(s ReadWriteCloser_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ReadWriteCloser_Methods(nil, s), s, c, policy)
}

// ReadWriteCloser_ServerToClient creates a new Client from an implementation of ReadWriteCloser_Server.
// The caller is responsible for calling Release on the returned Client.
func ReadWriteCloser_ServerToClient(s ReadWriteCloser_Server, policy *server.Policy) ReadWriteCloser {
	return ReadWriteCloser{Client: capnp.NewClient(ReadWriteCloser_NewServer(s, policy))}
}

// ReadWriteCloser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ReadWriteCloser_Methods(methods []server.Method, s ReadWriteCloser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xced01e7e70669396,
			MethodID:      0,
			InterfaceName: "io.capnp:Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdbc9a6253f362378,
			MethodID:      0,
			InterfaceName: "io.capnp:Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f19772a0967797e,
			MethodID:      0,
			InterfaceName: "io.capnp:Closer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Closer_close{call})
		},
	})

	return methods
}

type Error struct{ capnp.Struct }

// Error_TypeID is the unique identifier for the type Error.
const Error_TypeID = 0xe8cced5800c06912

func NewError(s *capnp.Segment) (Error, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Error{st}, err
}

func NewRootError(s *capnp.Segment) (Error, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Error{st}, err
}

func ReadRootError(msg *capnp.Message) (Error, error) {
	root, err := msg.Root()
	return Error{root.Struct()}, err
}

func (s Error) String() string {
	str, _ := text.Marshal(0xe8cced5800c06912, s.Struct)
	return str
}

func (s Error) Code() Error_Code {
	return Error_Code(s.Struct.Uint16(0))
}

func (s Error) SetCode(v Error_Code) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Error) Message() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Error) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s Error) MessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Error) SetMessage(v string) error {
	return s.Struct.SetText(0, v)
}

// Error_List is a list of Error.
type Error_List = capnp.StructList[Error]

// NewError creates a new list of Error.
func NewError_List(s *capnp.Segment, sz int32) (Error_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Error]{List: l}, err
}

// Error_Future is a wrapper for a Error promised by a client call.
type Error_Future struct{ *capnp.Future }

func (p Error_Future) Struct() (Error, error) {
	s, err := p.Future.Struct()
	return Error{s}, err
}

type Error_Code uint16

// Error_Code_TypeID is the unique identifier for the type Error_Code.
const Error_Code_TypeID = 0x9c494f3c5120daa3

// Values of Error_Code.
const (
	Error_Code_nil              Error_Code = 0
	Error_Code_shortWrite       Error_Code = 1
	Error_Code_shortBuf         Error_Code = 2
	Error_Code_eof              Error_Code = 3
	Error_Code_unexpectedEOF    Error_Code = 4
	Error_Code_noProgress       Error_Code = 5
	Error_Code_closed           Error_Code = 6
	Error_Code_canceled         Error_Code = 7
	Error_Code_deadlineExceeded Error_Code = 8
)

// String returns the enum's constant name.
func (c Error_Code) String() string {
	switch c {
	case Error_Code_nil:
		return "nil"
	case Error_Code_shortWrite:
		return "shortWrite"
	case Error_Code_shortBuf:
		return "shortBuf"
	case Error_Code_eof:
		return "eof"
	case Error_Code_unexpectedEOF:
		return "unexpectedEOF"
	case Error_Code_noProgress:
		return "noProgress"
	case Error_Code_closed:
		return "closed"
	case Error_Code_canceled:
		return "canceled"
	case Error_Code_deadlineExceeded:
		return "deadlineExceeded"

	default:
		return ""
	}
}

// Error_CodeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Error_CodeFromString(c string) Error_Code {
	switch c {
	case "nil":
		return Error_Code_nil
	case "shortWrite":
		return Error_Code_shortWrite
	case "shortBuf":
		return Error_Code_shortBuf
	case "eof":
		return Error_Code_eof
	case "unexpectedEOF":
		return Error_Code_unexpectedEOF
	case "noProgress":
		return Error_Code_noProgress
	case "closed":
		return Error_Code_closed
	case "canceled":
		return Error_Code_canceled
	case "deadlineExceeded":
		return Error_Code_deadlineExceeded

	default:
		return 0
	}
}

type Error_Code_List = capnp.EnumList[Error_Code]

func NewError_Code_List(s *capnp.Segment, sz int32) (Error_Code_List, error) {
	return capnp.NewEnumList[Error_Code](s, sz)
}

const schema_eba464918d53d496 = "x\xda\x84T]h\x1cU\x14\xfe\xce\xdc\xbb\x99\x8d$" +
	"lnn@}1R#\xda`\xd2\xa6h\xd5\xa0l" +
	"iLC\xc5\xd2\x9d\x15m\x15\x0a\x0e;7qe\xb3" +
	"\xb3\xde\xd9\xb0\xa9B\xc5\xd8\x87\xa2\x94\xa2\x85\x08b\x95" +
	"\xae?\x0fB\x1e\x0a\xfaPDQD\xa1R\xc5\xa2\x8b" +
	"F\x0djA)\x15\x15\x8aR\x10d\xe4\xce\xfe\xefv" +
	"\xe9\xd3\xce\xde\xf3\x9d\xef~\xe7\xbb\xe7\x9c\xad\xff\xd2\x0e" +
	">5x\xac\x0f\x96\xf3@\xac/\xfck\xe0\xaem?" +
	"\x9f|\xecY\x88~\x16\xae~\xf3\xe0\xd1\x17\xbd7\x7f" +
	"\x07HN\xb0\xb2\xbc\x83\xd9\x80\x9cb\xb6\x9cb\xb7\x00" +
	"a)o\xfd\xb7\x16\x9c>\x0c1D@\x8cLt3" +
	"\xbb\x18\xa1\x93\xa0\xd0\x0f\xdc\xbf\xef;\xf6\xf0\x91Z\xdc" +
	"2\xf1=Q\xdca%Px\xf8\xcf\xf3\xe5k~}" +
	"\xe2\x08\x9c!\"\x80\x9b\xf8\x1a;\x0f\x92\xa7\xa2\xfc\xc2" +
	"\x87+\xff|\xf6r\xec\x85.1\xe7\xd8\xe7r#\x12" +
	"\xb3\xcel\xb9\xce\xee\x04\xc2\xb3\xab\xdb\x7f\xfc\xfa\xb5\x97" +
	"\x8ew\x81\xd7\xd9;\xf2\x97\x08\xbc\xc1l\xb9\x11)\xdf" +
	"\xf5\xdc\xfb\xd7=\xbdX~\xa5\x0b\\a\xe56f\x03" +
	"~\xe3\xfb\x1b\x9d{\xf6\xee~\x15\"a]\x1e\xce~" +
	"\xb4\xff\x8f\xb3\x17\"\x11e\x03\x02d\x85\xfd\x04\x0a\x0f" +
	"\x1d\\\xe8\x1f/]\xffz\x17\xa7\xe2+2\x1b\x15\xa7" +
	"\xf8\x9c<j\xbe\xc2\xefF\xf6o\xdc\x96\xfc\xf6\xddZ" +
	"\xe9U\xef\x96\xf8%\x90<\xc8\x8d7O\x1ex\xab2" +
	"1\xf5\xdb'U\xef\xa2\xec\x0a\xbf\x08~9\x1d\xdf\xf2" +
	"\xde\x85s_4\x8fO\xf3K\xe0\xe1\xea\xf1\xf9\xc2\xa1" +
	"\x1b\xbe\xfa\xb2\xeb\xf6\x13|E\x9e\x8c\x80'\xf8\x9c\xfc" +
	"4\xba}\xf9\xa6\xed\xc9\x9b\xdf>\xf3C\x17x\x8d\xaf" +
	"\xc8S\xd5w\xe0s\xb2b\xbe\xea\x15;\xfdDMl" +
	"U\xf0\x07\xfc)\xf91\xbf\x16\x90gx\x09\x13a\xd6" +
	"\x9f\xcc\xb8\x85|\x81\xa6\xd3\xca\xf5fr\xbe\x1d(\x9d" +
	"\"J\xb1\x98\x137\xe9u\x91@\xd3.\xa0\x91gM" +
	"\xef\xd3\xd9\xa2\xd2\x93%\xf33\x96r\x13\xda]\x0c\x1c" +
	"\xce8\xc0\x09\x10\x83\xe3\x80\x13g\xe4\x8cX\x94\xf0\xdc" +
	"\xa2K\x83\xb0h\x10\xd4Ba\xaeVzR+\xd7\x1b" +
	"K\xab \xb1\x94+\x06N\xbcA\xb1\xd9P\x8c1r" +
	"\xb6Z$\x88F\x8c\xfdbb\x13\xe0\xdc\xca\xc8\xb9\xbd" +
	"\x83\xd7VZ\xd3P\xf3\xd5i\xa8\xe7])W\xdb\x1d" +
	"j\x87\x9bj)O6,\xb2\xbb\xd2\xa3\x8agr~" +
	"\xa04P\xf3j\xa0\xc3\xab\xc6{\xf5\xf0\x8d\xa6k," +
	"\x09\xbf\xdd\xf0\xab'\xd6$\xd8\xc5\x9e\x0f\xd5\xca\xd1\xcc" +
	"\x9b\xd5\xda\xd7\x933\xb6\xef\xa9\x14\x913F\x16 \xd4" +
	"&\x80H\x1cx\x14 K<r?@L<d\x0e" +
	"\xb9\xd8\xa3\x01\x8a\x89\xdd&\xd6'f\xa7\x01\xb2\xc5\xbd" +
	"\x06\x12\x17w?\x0f\xd8\xf9l.\x0c\x1e\xf7uq\x9f" +
	"\xce\x82\x15U\xf5\xcf\xce\xa5y\x00\xb6\xf2\xe7\xc3\xa5\xbc" +
	"Z.\xa8L\x11\xa3\xca\x9b\xdd\xbb+\xcc\xfb)\xed/" +
	"h\x05\x16\x04\xc9\x8cq\xd0\x0b3n>\xa3r\xca3" +
	"b=\xe5z\xb9l^\xd1\xecrF)\xcf\x1c\xb6\x14" +
	"P\xb3\xdc\x88\xe7,\x064&\x8e\xd2\xf1-\x88FL" +
	"l\x83%b\xf6h\xc4\xbd\x83RD\xbd:5\xadF" +
	"\x83\xce>\x1bn\xf6\xd9\x95\xda\x8c\xf2\x14\x83E\xb1\xab" +
	"\xf6XU\xe8d$\xa2>\x12\xbd\xc2u\x1d\x1d\x0f\xdc" +
	"Vg}\xebR}=\x0b1\x1e\xd5\x990m\xdc^" +
	"f\xad\xb1Z\xd3\xebK\x9f\xea+\xacaSdE{" +
	">\x92\xd5Fq8Q\xcb\x1e\xa5\xf1\xc4\x8c\xef\xa9\x1e" +
	"S\xd9pkg\xcbPf|OQ\xa2\xc9\x01\xa2\x04" +
	"\xe8\x99E\x15\x04\xee\x82\xa2\x01X4\x00\xfa?\x00\x00" +
	"\xff\xff\x0d\xa5\xf0p"

func init() {
	schemas.Register(schema_eba464918d53d496,
		0x8160a1e032380cef,
		0x84b973adfd026e77,
		0x88568f44f461736f,
		0x886ae50aa2e2ee84,
		0x8b0597c6f582be70,
		0x93929ed3dc3696cc,
		0x9aa26d7b18bb8346,
		0x9c494f3c5120daa3,
		0x9f19772a0967797e,
		0xb4d73f2cdd5814d8,
		0xc3e6312dd5a55d71,
		0xcdd1e8b5002f0852,
		0xced01e7e70669396,
		0xdbc9a6253f362378,
		0xe8cced5800c06912)
}
