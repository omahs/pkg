// Code generated by capnpc-go. DO NOT EDIT.

package anchor

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	channel "github.com/wetware/ww/internal/api/channel"
	strconv "strconv"
)

type Value struct{ capnp.Struct }
type Value_chan Value
type Value_Which uint16

const (
	Value_Which_empty      Value_Which = 0
	Value_Which_capability Value_Which = 1
	Value_Which_chan       Value_Which = 2
)

func (w Value_Which) String() string {
	const s = "emptycapabilitychan"
	switch w {
	case Value_Which_empty:
		return s[0:5]
	case Value_Which_capability:
		return s[5:15]
	case Value_Which_chan:
		return s[15:19]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Value_chan_Which uint16

const (
	Value_chan_Which_sender         Value_chan_Which = 0
	Value_chan_Which_recver         Value_chan_Which = 1
	Value_chan_Which_closer         Value_chan_Which = 2
	Value_chan_Which_sendCloser     Value_chan_Which = 3
	Value_chan_Which_sendRecvCloser Value_chan_Which = 4
)

func (w Value_chan_Which) String() string {
	const s = "senderrecverclosersendClosersendRecvCloser"
	switch w {
	case Value_chan_Which_sender:
		return s[0:6]
	case Value_chan_Which_recver:
		return s[6:12]
	case Value_chan_Which_closer:
		return s[12:18]
	case Value_chan_Which_sendCloser:
		return s[18:28]
	case Value_chan_Which_sendRecvCloser:
		return s[28:42]

	}
	return "Value_chan_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xcfaebe761f647d07

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value{st}, err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value{st}, err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value{root.Struct()}, err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xcfaebe761f647d07, s.Struct)
	return str
}

func (s Value) Which() Value_Which {
	return Value_Which(s.Struct.Uint16(0))
}
func (s Value) SetEmpty() {
	s.Struct.SetUint16(0, 0)

}

func (s Value) Capability() *capnp.Client {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != capability")
	}
	p, _ := s.Struct.Ptr(0)
	return p.Interface().Client()
}

func (s Value) HasCapability() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value) SetCapability(c *capnp.Client) error {
	s.Struct.SetUint16(0, 1)
	if !c.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return s.Struct.SetPtr(0, in.ToPtr())
}
func (s Value) Chan() Value_chan { return Value_chan(s) }

func (s Value) SetChan() {
	s.Struct.SetUint16(0, 2)
}

func (s Value_chan) Which() Value_chan_Which {
	return Value_chan_Which(s.Struct.Uint16(2))
}
func (s Value_chan) Sender() channel.Sender {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != sender")
	}
	p, _ := s.Struct.Ptr(0)
	return channel.Sender{Client: p.Interface().Client()}
}

func (s Value_chan) HasSender() bool {
	if s.Struct.Uint16(2) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value_chan) SetSender(v channel.Sender) error {
	s.Struct.SetUint16(2, 0)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Value_chan) Recver() channel.PeekRecver {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != recver")
	}
	p, _ := s.Struct.Ptr(0)
	return channel.PeekRecver{Client: p.Interface().Client()}
}

func (s Value_chan) HasRecver() bool {
	if s.Struct.Uint16(2) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value_chan) SetRecver(v channel.PeekRecver) error {
	s.Struct.SetUint16(2, 1)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Value_chan) Closer() channel.Closer {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != closer")
	}
	p, _ := s.Struct.Ptr(0)
	return channel.Closer{Client: p.Interface().Client()}
}

func (s Value_chan) HasCloser() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value_chan) SetCloser(v channel.Closer) error {
	s.Struct.SetUint16(2, 2)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Value_chan) SendCloser() channel.SendCloser {
	if s.Struct.Uint16(2) != 3 {
		panic("Which() != sendCloser")
	}
	p, _ := s.Struct.Ptr(0)
	return channel.SendCloser{Client: p.Interface().Client()}
}

func (s Value_chan) HasSendCloser() bool {
	if s.Struct.Uint16(2) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value_chan) SetSendCloser(v channel.SendCloser) error {
	s.Struct.SetUint16(2, 3)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Value_chan) SendRecvCloser() channel.PeekableChan {
	if s.Struct.Uint16(2) != 4 {
		panic("Which() != sendRecvCloser")
	}
	p, _ := s.Struct.Ptr(0)
	return channel.PeekableChan{Client: p.Interface().Client()}
}

func (s Value_chan) HasSendRecvCloser() bool {
	if s.Struct.Uint16(2) != 4 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Value_chan) SetSendRecvCloser(v channel.PeekableChan) error {
	s.Struct.SetUint16(2, 4)
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Value]{List: l}, err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (p Value_Future) Struct() (Value, error) {
	s, err := p.Future.Struct()
	return Value{s}, err
}

func (p Value_Future) Capability() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Value_Future) Chan() Value_chan_Future { return Value_chan_Future{p.Future} }

// Value_chan_Future is a wrapper for a Value_chan promised by a client call.
type Value_chan_Future struct{ *capnp.Future }

func (p Value_chan_Future) Struct() (Value_chan, error) {
	s, err := p.Future.Struct()
	return Value_chan{s}, err
}

func (p Value_chan_Future) Sender() channel.Sender {
	return channel.Sender{Client: p.Future.Field(0, nil).Client()}
}

func (p Value_chan_Future) Recver() channel.PeekRecver {
	return channel.PeekRecver{Client: p.Future.Field(0, nil).Client()}
}

func (p Value_chan_Future) Closer() channel.Closer {
	return channel.Closer{Client: p.Future.Field(0, nil).Client()}
}

func (p Value_chan_Future) SendCloser() channel.SendCloser {
	return channel.SendCloser{Client: p.Future.Field(0, nil).Client()}
}

func (p Value_chan_Future) SendRecvCloser() channel.PeekableChan {
	return channel.PeekableChan{Client: p.Future.Field(0, nil).Client()}
}

type Loader struct{ Client *capnp.Client }

// Loader_TypeID is the unique identifier for the type Loader.
const Loader_TypeID = 0x8f85860d3c5e499a

func (c Loader) Load(ctx context.Context, params func(Loader_load_Params) error) (Loader_load_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f85860d3c5e499a,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Loader",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Loader_load_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Loader_load_Results_Future{Future: ans.Future()}, release
}

func (c Loader) AddRef() Loader {
	return Loader{
		Client: c.Client.AddRef(),
	}
}

func (c Loader) Release() {
	c.Client.Release()
}

// A Loader_Server is a Loader with a local implementation.
type Loader_Server interface {
	Load(context.Context, Loader_load) error
}

// Loader_NewServer creates a new Server from an implementation of Loader_Server.
func Loader_NewServer(s Loader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Loader_Methods(nil, s), s, c, policy)
}

// Loader_ServerToClient creates a new Client from an implementation of Loader_Server.
// The caller is responsible for calling Release on the returned Client.
func Loader_ServerToClient(s Loader_Server, policy *server.Policy) Loader {
	return Loader{Client: capnp.NewClient(Loader_NewServer(s, policy))}
}

// Loader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Loader_Methods(methods []server.Method, s Loader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f85860d3c5e499a,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Loader",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Loader_load{call})
		},
	})

	return methods
}

// Loader_load holds the state for a server call to Loader.load.
// See server.Call for documentation.
type Loader_load struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Loader_load) Args() Loader_load_Params {
	return Loader_load_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Loader_load) AllocResults() (Loader_load_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{Struct: r}, err
}

type Loader_load_Params struct{ capnp.Struct }

// Loader_load_Params_TypeID is the unique identifier for the type Loader_load_Params.
const Loader_load_Params_TypeID = 0xeed523cf9607ecc8

func NewLoader_load_Params(s *capnp.Segment) (Loader_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Loader_load_Params{st}, err
}

func NewRootLoader_load_Params(s *capnp.Segment) (Loader_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Loader_load_Params{st}, err
}

func ReadRootLoader_load_Params(msg *capnp.Message) (Loader_load_Params, error) {
	root, err := msg.Root()
	return Loader_load_Params{root.Struct()}, err
}

func (s Loader_load_Params) String() string {
	str, _ := text.Marshal(0xeed523cf9607ecc8, s.Struct)
	return str
}

// Loader_load_Params_List is a list of Loader_load_Params.
type Loader_load_Params_List = capnp.StructList[Loader_load_Params]

// NewLoader_load_Params creates a new list of Loader_load_Params.
func NewLoader_load_Params_List(s *capnp.Segment, sz int32) (Loader_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Loader_load_Params]{List: l}, err
}

// Loader_load_Params_Future is a wrapper for a Loader_load_Params promised by a client call.
type Loader_load_Params_Future struct{ *capnp.Future }

func (p Loader_load_Params_Future) Struct() (Loader_load_Params, error) {
	s, err := p.Future.Struct()
	return Loader_load_Params{s}, err
}

type Loader_load_Results struct{ capnp.Struct }

// Loader_load_Results_TypeID is the unique identifier for the type Loader_load_Results.
const Loader_load_Results_TypeID = 0x85962033efbe6161

func NewLoader_load_Results(s *capnp.Segment) (Loader_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{st}, err
}

func NewRootLoader_load_Results(s *capnp.Segment) (Loader_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Loader_load_Results{st}, err
}

func ReadRootLoader_load_Results(msg *capnp.Message) (Loader_load_Results, error) {
	root, err := msg.Root()
	return Loader_load_Results{root.Struct()}, err
}

func (s Loader_load_Results) String() string {
	str, _ := text.Marshal(0x85962033efbe6161, s.Struct)
	return str
}

func (s Loader_load_Results) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Loader_load_Results) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Loader_load_Results) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Loader_load_Results) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Loader_load_Results_List is a list of Loader_load_Results.
type Loader_load_Results_List = capnp.StructList[Loader_load_Results]

// NewLoader_load_Results creates a new list of Loader_load_Results.
func NewLoader_load_Results_List(s *capnp.Segment, sz int32) (Loader_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Loader_load_Results]{List: l}, err
}

// Loader_load_Results_Future is a wrapper for a Loader_load_Results promised by a client call.
type Loader_load_Results_Future struct{ *capnp.Future }

func (p Loader_load_Results_Future) Struct() (Loader_load_Results, error) {
	s, err := p.Future.Struct()
	return Loader_load_Results{s}, err
}

func (p Loader_load_Results_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

type Storer struct{ Client *capnp.Client }

// Storer_TypeID is the unique identifier for the type Storer.
const Storer_TypeID = 0xd03a10b4ad79653b

func (c Storer) Store(ctx context.Context, params func(Storer_store_Params) error) (Storer_store_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd03a10b4ad79653b,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Storer",
			MethodName:    "store",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Storer_store_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Storer_store_Results_Future{Future: ans.Future()}, release
}

func (c Storer) AddRef() Storer {
	return Storer{
		Client: c.Client.AddRef(),
	}
}

func (c Storer) Release() {
	c.Client.Release()
}

// A Storer_Server is a Storer with a local implementation.
type Storer_Server interface {
	Store(context.Context, Storer_store) error
}

// Storer_NewServer creates a new Server from an implementation of Storer_Server.
func Storer_NewServer(s Storer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Storer_Methods(nil, s), s, c, policy)
}

// Storer_ServerToClient creates a new Client from an implementation of Storer_Server.
// The caller is responsible for calling Release on the returned Client.
func Storer_ServerToClient(s Storer_Server, policy *server.Policy) Storer {
	return Storer{Client: capnp.NewClient(Storer_NewServer(s, policy))}
}

// Storer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Storer_Methods(methods []server.Method, s Storer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd03a10b4ad79653b,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Storer",
			MethodName:    "store",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Store(ctx, Storer_store{call})
		},
	})

	return methods
}

// Storer_store holds the state for a server call to Storer.store.
// See server.Call for documentation.
type Storer_store struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Storer_store) Args() Storer_store_Params {
	return Storer_store_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Storer_store) AllocResults() (Storer_store_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Storer_store_Results{Struct: r}, err
}

type Storer_store_Params struct{ capnp.Struct }

// Storer_store_Params_TypeID is the unique identifier for the type Storer_store_Params.
const Storer_store_Params_TypeID = 0x8f702043cf5adb9c

func NewStorer_store_Params(s *capnp.Segment) (Storer_store_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storer_store_Params{st}, err
}

func NewRootStorer_store_Params(s *capnp.Segment) (Storer_store_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Storer_store_Params{st}, err
}

func ReadRootStorer_store_Params(msg *capnp.Message) (Storer_store_Params, error) {
	root, err := msg.Root()
	return Storer_store_Params{root.Struct()}, err
}

func (s Storer_store_Params) String() string {
	str, _ := text.Marshal(0x8f702043cf5adb9c, s.Struct)
	return str
}

func (s Storer_store_Params) Value() (Value, error) {
	p, err := s.Struct.Ptr(0)
	return Value{Struct: p.Struct()}, err
}

func (s Storer_store_Params) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s Storer_store_Params) SetValue(v Value) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewValue sets the value field to a newly
// allocated Value struct, preferring placement in s's segment.
func (s Storer_store_Params) NewValue() (Value, error) {
	ss, err := NewValue(s.Struct.Segment())
	if err != nil {
		return Value{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Storer_store_Params_List is a list of Storer_store_Params.
type Storer_store_Params_List = capnp.StructList[Storer_store_Params]

// NewStorer_store_Params creates a new list of Storer_store_Params.
func NewStorer_store_Params_List(s *capnp.Segment, sz int32) (Storer_store_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Storer_store_Params]{List: l}, err
}

// Storer_store_Params_Future is a wrapper for a Storer_store_Params promised by a client call.
type Storer_store_Params_Future struct{ *capnp.Future }

func (p Storer_store_Params_Future) Struct() (Storer_store_Params, error) {
	s, err := p.Future.Struct()
	return Storer_store_Params{s}, err
}

func (p Storer_store_Params_Future) Value() Value_Future {
	return Value_Future{Future: p.Future.Field(0, nil)}
}

type Storer_store_Results struct{ capnp.Struct }

// Storer_store_Results_TypeID is the unique identifier for the type Storer_store_Results.
const Storer_store_Results_TypeID = 0xd3426cb2da908260

func NewStorer_store_Results(s *capnp.Segment) (Storer_store_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Storer_store_Results{st}, err
}

func NewRootStorer_store_Results(s *capnp.Segment) (Storer_store_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Storer_store_Results{st}, err
}

func ReadRootStorer_store_Results(msg *capnp.Message) (Storer_store_Results, error) {
	root, err := msg.Root()
	return Storer_store_Results{root.Struct()}, err
}

func (s Storer_store_Results) String() string {
	str, _ := text.Marshal(0xd3426cb2da908260, s.Struct)
	return str
}

// Storer_store_Results_List is a list of Storer_store_Results.
type Storer_store_Results_List = capnp.StructList[Storer_store_Results]

// NewStorer_store_Results creates a new list of Storer_store_Results.
func NewStorer_store_Results_List(s *capnp.Segment, sz int32) (Storer_store_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Storer_store_Results]{List: l}, err
}

// Storer_store_Results_Future is a wrapper for a Storer_store_Results promised by a client call.
type Storer_store_Results_Future struct{ *capnp.Future }

func (p Storer_store_Results_Future) Struct() (Storer_store_Results, error) {
	s, err := p.Future.Struct()
	return Storer_store_Results{s}, err
}

type Register struct{ Client *capnp.Client }

// Register_TypeID is the unique identifier for the type Register.
const Register_TypeID = 0xdbbdb0fd1b231b9a

func (c Register) Load(ctx context.Context, params func(Loader_load_Params) error) (Loader_load_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f85860d3c5e499a,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Loader",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Loader_load_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Loader_load_Results_Future{Future: ans.Future()}, release
}
func (c Register) Store(ctx context.Context, params func(Storer_store_Params) error) (Storer_store_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd03a10b4ad79653b,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Storer",
			MethodName:    "store",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Storer_store_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Storer_store_Results_Future{Future: ans.Future()}, release
}

func (c Register) AddRef() Register {
	return Register{
		Client: c.Client.AddRef(),
	}
}

func (c Register) Release() {
	c.Client.Release()
}

// A Register_Server is a Register with a local implementation.
type Register_Server interface {
	Load(context.Context, Loader_load) error

	Store(context.Context, Storer_store) error
}

// Register_NewServer creates a new Server from an implementation of Register_Server.
func Register_NewServer(s Register_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Register_Methods(nil, s), s, c, policy)
}

// Register_ServerToClient creates a new Client from an implementation of Register_Server.
// The caller is responsible for calling Release on the returned Client.
func Register_ServerToClient(s Register_Server, policy *server.Policy) Register {
	return Register{Client: capnp.NewClient(Register_NewServer(s, policy))}
}

// Register_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Register_Methods(methods []server.Method, s Register_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f85860d3c5e499a,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Loader",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Loader_load{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd03a10b4ad79653b,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Storer",
			MethodName:    "store",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Store(ctx, Storer_store{call})
		},
	})

	return methods
}

type Anchor struct{ Client *capnp.Client }

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xe41237e4098ed922

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release
}
func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release
}

func (c Anchor) AddRef() Anchor {
	return Anchor{
		Client: c.Client.AddRef(),
	}
}

func (c Anchor) Release() {
	c.Client.Release()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c, policy)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server, policy *server.Policy) Anchor {
	return Anchor{Client: capnp.NewClient(Anchor_NewServer(s, policy))}
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{Struct: r}, err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{Struct: r}, err
}

type Anchor_Child struct{ capnp.Struct }

// Anchor_Child_TypeID is the unique identifier for the type Anchor_Child.
const Anchor_Child_TypeID = 0xc718781cb2553199

func NewAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child{st}, err
}

func NewRootAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child{st}, err
}

func ReadRootAnchor_Child(msg *capnp.Message) (Anchor_Child, error) {
	root, err := msg.Root()
	return Anchor_Child{root.Struct()}, err
}

func (s Anchor_Child) String() string {
	str, _ := text.Marshal(0xc718781cb2553199, s.Struct)
	return str
}

func (s Anchor_Child) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_Child) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_Child) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_Child) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Anchor_Child) Anchor() Anchor {
	p, _ := s.Struct.Ptr(1)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_Child) HasAnchor() bool {
	return s.Struct.HasPtr(1)
}

func (s Anchor_Child) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Anchor_Child_List is a list of Anchor_Child.
type Anchor_Child_List = capnp.StructList[Anchor_Child]

// NewAnchor_Child creates a new list of Anchor_Child.
func NewAnchor_Child_List(s *capnp.Segment, sz int32) (Anchor_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Anchor_Child]{List: l}, err
}

// Anchor_Child_Future is a wrapper for a Anchor_Child promised by a client call.
type Anchor_Child_Future struct{ *capnp.Future }

func (p Anchor_Child_Future) Struct() (Anchor_Child, error) {
	s, err := p.Future.Struct()
	return Anchor_Child{s}, err
}

func (p Anchor_Child_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(1, nil).Client()}
}

type Anchor_ls_Params struct{ capnp.Struct }

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xc105d085735711e1

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params{st}, err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params{root.Struct()}, err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xc105d085735711e1, s.Struct)
	return str
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List = capnp.StructList[Anchor_ls_Params]

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_ls_Params]{List: l}, err
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (p Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Params{s}, err
}

type Anchor_ls_Results struct{ capnp.Struct }

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xe325af947f127758

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results{st}, err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results{root.Struct()}, err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xe325af947f127758, s.Struct)
	return str
}

func (s Anchor_ls_Results) Children() (Anchor_Child_List, error) {
	p, err := s.Struct.Ptr(0)
	return Anchor_Child_List{List: p.List()}, err
}

func (s Anchor_ls_Results) HasChildren() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_ls_Results) SetChildren(v Anchor_Child_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_Child_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_Child_List, error) {
	l, err := NewAnchor_Child_List(s.Struct.Segment(), n)
	if err != nil {
		return Anchor_Child_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List = capnp.StructList[Anchor_ls_Results]

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_ls_Results]{List: l}, err
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (p Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_ls_Results{s}, err
}

type Anchor_walk_Params struct{ capnp.Struct }

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb90ffa2761585171

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params{st}, err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params{root.Struct()}, err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb90ffa2761585171, s.Struct)
	return str
}

func (s Anchor_walk_Params) Path() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return s.Struct.SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List = capnp.StructList[Anchor_walk_Params]

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Params]{List: l}, err
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (p Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Params{s}, err
}

type Anchor_walk_Results struct{ capnp.Struct }

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0xaec21d58779cc86c

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results{st}, err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results{root.Struct()}, err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0xaec21d58779cc86c, s.Struct)
	return str
}

func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := s.Struct.Ptr(0)
	return Anchor{Client: p.Interface().Client()}
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return s.Struct.HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List = capnp.StructList[Anchor_walk_Results]

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Results]{List: l}, err
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (p Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Anchor_walk_Results{s}, err
}

func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor{Client: p.Future.Field(0, nil).Client()}
}

const schema_efb5a91f96d44de3 = "x\xda\xa4U]h\x1cU\x1b~\x9f9\xb33\x93\x8f" +
	"\x9do3\x99\xb5\xfe\xd4\xb2\xc5\xa6\xa6\x06\x0cM\"T" +
	"be\x13C\xa8-U\xf6\xa4\xa6\xc6^H\xc7\xdd\xc1" +
	"]\x9c\xecnw7?+.\x1a1\xdaB\xb5\x15j" +
	"\xc0\x18or#^\xd8j0`\x91VZ/,Z" +
	"H\xfc\xe9\x85\xf6Fi\x84FL\x0b\x82\xa0\xd1:r" +
	"f3\xddq\x1b\xf5\xc2\xabL\xce\xfb\xec\xf3>\xcf\xfb" +
	"s\xce\xd6\xcbR\xb7\xdc\xaeG\xc2$\xf1\xc3!\xc5\xb5" +
	"\xac\xd3W;7NN\x90\x11\x05Q\x08*Q\xe7r" +
	"\xe8\x7f \x98?\x87\xe2\x04w\xfa\xe2\xbe\xf9\xde\x8d\xf9" +
	"#A\xc0M\x8a\x07\xd8\xa0\x08\xc0\xd4\xce\xc7\xb7\xeb/" +
	"N\x1c!Cg\xee\xa5\x87\xbe\x9a\x8c\xbd=w\x95\x08" +
	"\xe6\xfd\xca\x8c\xd9\xa7\xa8Df\x8f\xb2\xc3\xcc\x88/\xd7" +
	"97=:\xb8\xe1\xec\xf1 \x1b\xaf\xb2=\xe6\xb1\x1d" +
	"\xe0\x83V\xcbJ\xe4d\x10PV$\x01\xa8x\x80\xef" +
	"\x8cG\x8b\x13\x0b\xa13U\x80,\xe8\xdfT~\"\xd9" +
	"}\xbd}`\xf6\xf6\xb1[>\x11\x01\xf7\x8e\xaf_i" +
	"X\xdc\xd6\xb4H!I \xc6\x95/\xcc\x97=)\x87" +
	"\x94Q\x82\xabVR\xb1\x91\xd3\xc7\xe7\x89\xeb@Mt" +
	"\x1fTFd~\xafL\x99\xcb\x1ezI9Ap\xef" +
	"\xb3\xcb\xef\xbc\xdf\xd8\xb5p\x83\xc3\x8c:c\x1eP\x05" +
	"pH\xdda\xbe&\xbe\xdc\xfd\xcf\x1f\xfdf\xd6y\xe0" +
	"\xcb\x9a\xbe\xce\x8a\xda\x04\x92\xdd\xfdw\xae\x1b\x88g\xcf" +
	"_ n\" a\x00*B\x80i\xabg\x09\x9d\xb6" +
	"\x1a\x83(\xea\xfaM\xeb\xaf\xbd{\xea\xe2\x0d)+\xda" +
	"\xac9\xa1y\x9e4\xd5\x1c\xd7Z\x88\xdc\xc1\xd1\xa6g" +
	"\x8f\x9d\xd8|)P3\xb3\xac\xadxhQ\xb2\xeb\xc5" +
	"\xa8'{O\x9b1Oj7\x13\x99g\xb4\x97L\xa3" +
	"A\xe8?\xf7\xa3:9\xbf\xe9\xc2\x95\x80\xfe_5\x09" +
	"\xf4\xadke\x93\xe9\\\xa1-\xc9\xac|6\xdf\xb5;" +
	"g\xa5\xecB\x9b\x93\xb3R\xcd\xfdvq\xd8)\x15\x89" +
	"\xb8\xccd\"\x19D\x86\xdeA\xc45\x06\x1e\x95\x10\x1b" +
	"\xb1\x9ca\x1b\x8d5\xd3\x044\x12\xea(\xf7\x94r\x05" +
	"\xbb\xd0V\x14\x7f\x9a\x13V\xc1\x1a\xfa\x0f\x94\xf0U\xaa" +
	")\xbb\x90\x00\xb8\xccB\x01{\xf0\x07\xdf0ZI2" +
	"BjD8\xe9F\x02\xf5\xaaz\xaa\xff\x8dZ\xceS" +
	"k\x1b\xed\xaa\xa9\x8aW\x7f\x0a\xa3Vs\x02\x0c\xfa'" +
	"\xceU\xa3A\xc6\xd6\x1ac$o\x95\xd2\x08\x93\x84p" +
	"\x80E\x0a\xb28\xc5\xe6D\xcc#Y;\xde\x9b\xce8" +
	"H\x89\x12h\xd7S\xdc%R43\xf0\xad\x12\x0c " +
	"\x0aqx\xb7p\xb2\x85\x81\xdf#!\x92\xb5\x86l?" +
	"\xef\xbf\xdb\xaaV{\xaf\xe5\xb0a[d\x0a39\xec" +
	"\xba^\xaa>\xd1\xb5n\x06\xbe[\x82\x8e?\xdcj\xae" +
	"\x9d\xfb\x88\xf8\x83\x0c\xfc\x11\x09\xbat\xcd\x05j\xfba" +
	"\xf0V\x92b\xf6P\xbeT&\xc5MZy\xeb\x89\x8c" +
	"\x93!V*\xa3If\x044\x11\"\xc9\xb4\x95\xadK" +
	"\xbf\xa7\x94S\x0b\xc1f\xfbw\x17\xfc\xa54\x8c\x0e\xaf" +
	"\xd91o\xc6\xd6\xea\xf6_f\xb0\xdan\xd4\xd7u\xaf" +
	"\x18\xbd6!\x80x\xd43\x1a\x85DdTD\xfd\xc6" +
	"\x18\xf8\x0b\xbeSFd\x8c\x8b\xd3g\x18\xf8\xc1\xaa\xd3" +
	"(d\"cB\x9c>\xc7\xc0\x0fK\xd0\xd9\xefn\x14" +
	"!\"\xe3\x90\xa8\xcaA\x06~L\x82.\xff\xe6F\xa1" +
	"\x10\x19\xaf>M\xc4\x8f2\xf0i\x09\xf1\xa2\x9dM\xd9" +
	"\xa2\x15W\xd6\xfdpot\xf9\xc3\xcb\xab\xad\x88\x17\xec" +
	"\xe4\x88\x17\xd8\xde0w\xfe\x97\x8fvM\xf9\x81\xa4\x93" +
	"+z\x81\x8f\xcb\xdb\xf4\x0f\x16\x17V\xfc\xe6\x09\xaa^" +
	"'W$\xe6\x85\x1f^\x8aV\xa6>\x7fk)\x18\xee" +
	"\xb7\x93#\x14\xef\xf5\x19\xc6\xc6O\xbd\xf1\xe9g-s" +
	"k\xb7\xbf\xdf~2\x96)\x96\xbc\x0e$X\x88k\x08" +
	"\xbc\x0eD\xb5{\x94\xe8o'\xb9?^]\xb1\xe0:" +
	"\xec\"\xe2a\x06\xbeE\x82\x9bLg\x9cT\xc1\xce\x12" +
	"\x11\xfeOH0\xa0\xb1v\xf5\x13\xc4a\x9d\xac\x9el" +
	"RM\xe7\x0a\\\x06\x02\x8f\x04:bb1R\\\xf3" +
	"F\xc5\x7fV\xe0_\xa6F\xfbm$\x19\x9bU\xd4\xde" +
	"$\xf8\xaf\x97q\xab\xb83t\x959\xc5nD\xc4\x16" +
	"\xaf5J\xc1\x1bru\xc9\xff\x0c\x00\x00\xff\xff'U" +
	"\x19F"

func init() {
	schemas.Register(schema_efb5a91f96d44de3,
		0x85962033efbe6161,
		0x8f702043cf5adb9c,
		0x8f85860d3c5e499a,
		0xaec21d58779cc86c,
		0xb90ffa2761585171,
		0xc105d085735711e1,
		0xc718781cb2553199,
		0xcfaebe761f647d07,
		0xd03a10b4ad79653b,
		0xd3426cb2da908260,
		0xd5cc6e3f55162660,
		0xdbbdb0fd1b231b9a,
		0xe325af947f127758,
		0xe41237e4098ed922,
		0xeed523cf9607ecc8)
}
