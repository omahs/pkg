// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	anchor "github.com/wetware/ww/internal/api/anchor"
	process "github.com/wetware/ww/internal/api/process"
	pubsub "github.com/wetware/ww/internal/api/pubsub"
	strconv "strconv"
)

type Host capnp.Client

// Host_TypeID is the unique identifier for the type Host.
const Host_TypeID = 0x957cbefc645fd307

func (c Host) View(ctx context.Context, params func(Host_view_Params) error) (Host_view_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "view",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_view_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_view_Results_Future{Future: ans.Future()}, release
}
func (c Host) PubSub(ctx context.Context, params func(Host_pubSub_Params) error) (Host_pubSub_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "pubSub",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_pubSub_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_pubSub_Results_Future{Future: ans.Future()}, release
}
func (c Host) Root(ctx context.Context, params func(Host_root_Params) error) (Host_root_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      2,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "root",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_root_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_root_Results_Future{Future: ans.Future()}, release
}
func (c Host) Debug(ctx context.Context, params func(Host_debug_Params) error) (Host_debug_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      3,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "debug",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_debug_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_debug_Results_Future{Future: ans.Future()}, release
}
func (c Host) Executor(ctx context.Context, params func(Host_executor_Params) error) (Host_executor_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      4,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "executor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_executor_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_executor_Results_Future{Future: ans.Future()}, release
}
func (c Host) Resolve(ctx context.Context, params func(Host_resolve_Params) error) (Host_resolve_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      5,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "resolve",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Host_resolve_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Host_resolve_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Host) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Host) AddRef() Host {
	return Host(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Host) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Host) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Host) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Host) DecodeFromPtr(p capnp.Ptr) Host {
	return Host(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Host) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Host) IsSame(other Host) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Host) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Host) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Host_Server is a Host with a local implementation.
type Host_Server interface {
	View(context.Context, Host_view) error

	PubSub(context.Context, Host_pubSub) error

	Root(context.Context, Host_root) error

	Debug(context.Context, Host_debug) error

	Executor(context.Context, Host_executor) error

	Resolve(context.Context, Host_resolve) error
}

// Host_NewServer creates a new Server from an implementation of Host_Server.
func Host_NewServer(s Host_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Host_Methods(nil, s), s, c)
}

// Host_ServerToClient creates a new Client from an implementation of Host_Server.
// The caller is responsible for calling Release on the returned Client.
func Host_ServerToClient(s Host_Server) Host {
	return Host(capnp.NewClient(Host_NewServer(s)))
}

// Host_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Host_Methods(methods []server.Method, s Host_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "view",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.View(ctx, Host_view{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      1,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "pubSub",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.PubSub(ctx, Host_pubSub{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      2,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "root",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Root(ctx, Host_root{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      3,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "debug",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Debug(ctx, Host_debug{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      4,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "executor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Executor(ctx, Host_executor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x957cbefc645fd307,
			MethodID:      5,
			InterfaceName: "cluster.capnp:Host",
			MethodName:    "resolve",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolve(ctx, Host_resolve{call})
		},
	})

	return methods
}

// Host_view holds the state for a server call to Host.view.
// See server.Call for documentation.
type Host_view struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_view) Args() Host_view_Params {
	return Host_view_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_view) AllocResults() (Host_view_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(r), err
}

// Host_pubSub holds the state for a server call to Host.pubSub.
// See server.Call for documentation.
type Host_pubSub struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_pubSub) Args() Host_pubSub_Params {
	return Host_pubSub_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_pubSub) AllocResults() (Host_pubSub_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(r), err
}

// Host_root holds the state for a server call to Host.root.
// See server.Call for documentation.
type Host_root struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_root) Args() Host_root_Params {
	return Host_root_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_root) AllocResults() (Host_root_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(r), err
}

// Host_debug holds the state for a server call to Host.debug.
// See server.Call for documentation.
type Host_debug struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_debug) Args() Host_debug_Params {
	return Host_debug_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_debug) AllocResults() (Host_debug_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_debug_Results(r), err
}

// Host_executor holds the state for a server call to Host.executor.
// See server.Call for documentation.
type Host_executor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_executor) Args() Host_executor_Params {
	return Host_executor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_executor) AllocResults() (Host_executor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(r), err
}

// Host_resolve holds the state for a server call to Host.resolve.
// See server.Call for documentation.
type Host_resolve struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Host_resolve) Args() Host_resolve_Params {
	return Host_resolve_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Host_resolve) AllocResults() (Host_resolve_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_resolve_Results(r), err
}

// Host_List is a list of Host.
type Host_List = capnp.CapList[Host]

// NewHost creates a new list of Host.
func NewHost_List(s *capnp.Segment, sz int32) (Host_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Host](l), err
}

type Host_view_Params capnp.Struct

// Host_view_Params_TypeID is the unique identifier for the type Host_view_Params.
const Host_view_Params_TypeID = 0xa404c24b5375b9e4

func NewHost_view_Params(s *capnp.Segment) (Host_view_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_view_Params(st), err
}

func NewRootHost_view_Params(s *capnp.Segment) (Host_view_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_view_Params(st), err
}

func ReadRootHost_view_Params(msg *capnp.Message) (Host_view_Params, error) {
	root, err := msg.Root()
	return Host_view_Params(root.Struct()), err
}

func (s Host_view_Params) String() string {
	str, _ := text.Marshal(0xa404c24b5375b9e4, capnp.Struct(s))
	return str
}

func (s Host_view_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_view_Params) DecodeFromPtr(p capnp.Ptr) Host_view_Params {
	return Host_view_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_view_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_view_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_view_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_view_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_view_Params_List is a list of Host_view_Params.
type Host_view_Params_List = capnp.StructList[Host_view_Params]

// NewHost_view_Params creates a new list of Host_view_Params.
func NewHost_view_Params_List(s *capnp.Segment, sz int32) (Host_view_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_view_Params](l), err
}

// Host_view_Params_Future is a wrapper for a Host_view_Params promised by a client call.
type Host_view_Params_Future struct{ *capnp.Future }

func (f Host_view_Params_Future) Struct() (Host_view_Params, error) {
	p, err := f.Future.Ptr()
	return Host_view_Params(p.Struct()), err
}

type Host_view_Results capnp.Struct

// Host_view_Results_TypeID is the unique identifier for the type Host_view_Results.
const Host_view_Results_TypeID = 0x8f58928e854cd4f5

func NewHost_view_Results(s *capnp.Segment) (Host_view_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(st), err
}

func NewRootHost_view_Results(s *capnp.Segment) (Host_view_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_view_Results(st), err
}

func ReadRootHost_view_Results(msg *capnp.Message) (Host_view_Results, error) {
	root, err := msg.Root()
	return Host_view_Results(root.Struct()), err
}

func (s Host_view_Results) String() string {
	str, _ := text.Marshal(0x8f58928e854cd4f5, capnp.Struct(s))
	return str
}

func (s Host_view_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_view_Results) DecodeFromPtr(p capnp.Ptr) Host_view_Results {
	return Host_view_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_view_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_view_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_view_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_view_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_view_Results) View() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Host_view_Results) HasView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_view_Results) SetView(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_view_Results_List is a list of Host_view_Results.
type Host_view_Results_List = capnp.StructList[Host_view_Results]

// NewHost_view_Results creates a new list of Host_view_Results.
func NewHost_view_Results_List(s *capnp.Segment, sz int32) (Host_view_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_view_Results](l), err
}

// Host_view_Results_Future is a wrapper for a Host_view_Results promised by a client call.
type Host_view_Results_Future struct{ *capnp.Future }

func (f Host_view_Results_Future) Struct() (Host_view_Results, error) {
	p, err := f.Future.Ptr()
	return Host_view_Results(p.Struct()), err
}
func (p Host_view_Results_Future) View() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type Host_pubSub_Params capnp.Struct

// Host_pubSub_Params_TypeID is the unique identifier for the type Host_pubSub_Params.
const Host_pubSub_Params_TypeID = 0xe5b5227505fcaa99

func NewHost_pubSub_Params(s *capnp.Segment) (Host_pubSub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_pubSub_Params(st), err
}

func NewRootHost_pubSub_Params(s *capnp.Segment) (Host_pubSub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_pubSub_Params(st), err
}

func ReadRootHost_pubSub_Params(msg *capnp.Message) (Host_pubSub_Params, error) {
	root, err := msg.Root()
	return Host_pubSub_Params(root.Struct()), err
}

func (s Host_pubSub_Params) String() string {
	str, _ := text.Marshal(0xe5b5227505fcaa99, capnp.Struct(s))
	return str
}

func (s Host_pubSub_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_pubSub_Params) DecodeFromPtr(p capnp.Ptr) Host_pubSub_Params {
	return Host_pubSub_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_pubSub_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_pubSub_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_pubSub_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_pubSub_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_pubSub_Params_List is a list of Host_pubSub_Params.
type Host_pubSub_Params_List = capnp.StructList[Host_pubSub_Params]

// NewHost_pubSub_Params creates a new list of Host_pubSub_Params.
func NewHost_pubSub_Params_List(s *capnp.Segment, sz int32) (Host_pubSub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_pubSub_Params](l), err
}

// Host_pubSub_Params_Future is a wrapper for a Host_pubSub_Params promised by a client call.
type Host_pubSub_Params_Future struct{ *capnp.Future }

func (f Host_pubSub_Params_Future) Struct() (Host_pubSub_Params, error) {
	p, err := f.Future.Ptr()
	return Host_pubSub_Params(p.Struct()), err
}

type Host_pubSub_Results capnp.Struct

// Host_pubSub_Results_TypeID is the unique identifier for the type Host_pubSub_Results.
const Host_pubSub_Results_TypeID = 0xdc88f975f5090eee

func NewHost_pubSub_Results(s *capnp.Segment) (Host_pubSub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(st), err
}

func NewRootHost_pubSub_Results(s *capnp.Segment) (Host_pubSub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_pubSub_Results(st), err
}

func ReadRootHost_pubSub_Results(msg *capnp.Message) (Host_pubSub_Results, error) {
	root, err := msg.Root()
	return Host_pubSub_Results(root.Struct()), err
}

func (s Host_pubSub_Results) String() string {
	str, _ := text.Marshal(0xdc88f975f5090eee, capnp.Struct(s))
	return str
}

func (s Host_pubSub_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_pubSub_Results) DecodeFromPtr(p capnp.Ptr) Host_pubSub_Results {
	return Host_pubSub_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_pubSub_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_pubSub_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_pubSub_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_pubSub_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_pubSub_Results) PubSub() pubsub.Router {
	p, _ := capnp.Struct(s).Ptr(0)
	return pubsub.Router(p.Interface().Client())
}

func (s Host_pubSub_Results) HasPubSub() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_pubSub_Results) SetPubSub(v pubsub.Router) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_pubSub_Results_List is a list of Host_pubSub_Results.
type Host_pubSub_Results_List = capnp.StructList[Host_pubSub_Results]

// NewHost_pubSub_Results creates a new list of Host_pubSub_Results.
func NewHost_pubSub_Results_List(s *capnp.Segment, sz int32) (Host_pubSub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_pubSub_Results](l), err
}

// Host_pubSub_Results_Future is a wrapper for a Host_pubSub_Results promised by a client call.
type Host_pubSub_Results_Future struct{ *capnp.Future }

func (f Host_pubSub_Results_Future) Struct() (Host_pubSub_Results, error) {
	p, err := f.Future.Ptr()
	return Host_pubSub_Results(p.Struct()), err
}
func (p Host_pubSub_Results_Future) PubSub() pubsub.Router {
	return pubsub.Router(p.Future.Field(0, nil).Client())
}

type Host_root_Params capnp.Struct

// Host_root_Params_TypeID is the unique identifier for the type Host_root_Params.
const Host_root_Params_TypeID = 0x828b2823e5eeb7be

func NewHost_root_Params(s *capnp.Segment) (Host_root_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_root_Params(st), err
}

func NewRootHost_root_Params(s *capnp.Segment) (Host_root_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_root_Params(st), err
}

func ReadRootHost_root_Params(msg *capnp.Message) (Host_root_Params, error) {
	root, err := msg.Root()
	return Host_root_Params(root.Struct()), err
}

func (s Host_root_Params) String() string {
	str, _ := text.Marshal(0x828b2823e5eeb7be, capnp.Struct(s))
	return str
}

func (s Host_root_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_root_Params) DecodeFromPtr(p capnp.Ptr) Host_root_Params {
	return Host_root_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_root_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_root_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_root_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_root_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_root_Params_List is a list of Host_root_Params.
type Host_root_Params_List = capnp.StructList[Host_root_Params]

// NewHost_root_Params creates a new list of Host_root_Params.
func NewHost_root_Params_List(s *capnp.Segment, sz int32) (Host_root_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_root_Params](l), err
}

// Host_root_Params_Future is a wrapper for a Host_root_Params promised by a client call.
type Host_root_Params_Future struct{ *capnp.Future }

func (f Host_root_Params_Future) Struct() (Host_root_Params, error) {
	p, err := f.Future.Ptr()
	return Host_root_Params(p.Struct()), err
}

type Host_root_Results capnp.Struct

// Host_root_Results_TypeID is the unique identifier for the type Host_root_Results.
const Host_root_Results_TypeID = 0xcabb5c85a457450b

func NewHost_root_Results(s *capnp.Segment) (Host_root_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(st), err
}

func NewRootHost_root_Results(s *capnp.Segment) (Host_root_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_root_Results(st), err
}

func ReadRootHost_root_Results(msg *capnp.Message) (Host_root_Results, error) {
	root, err := msg.Root()
	return Host_root_Results(root.Struct()), err
}

func (s Host_root_Results) String() string {
	str, _ := text.Marshal(0xcabb5c85a457450b, capnp.Struct(s))
	return str
}

func (s Host_root_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_root_Results) DecodeFromPtr(p capnp.Ptr) Host_root_Results {
	return Host_root_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_root_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_root_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_root_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_root_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_root_Results) Root() anchor.Anchor {
	p, _ := capnp.Struct(s).Ptr(0)
	return anchor.Anchor(p.Interface().Client())
}

func (s Host_root_Results) HasRoot() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_root_Results) SetRoot(v anchor.Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_root_Results_List is a list of Host_root_Results.
type Host_root_Results_List = capnp.StructList[Host_root_Results]

// NewHost_root_Results creates a new list of Host_root_Results.
func NewHost_root_Results_List(s *capnp.Segment, sz int32) (Host_root_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_root_Results](l), err
}

// Host_root_Results_Future is a wrapper for a Host_root_Results promised by a client call.
type Host_root_Results_Future struct{ *capnp.Future }

func (f Host_root_Results_Future) Struct() (Host_root_Results, error) {
	p, err := f.Future.Ptr()
	return Host_root_Results(p.Struct()), err
}
func (p Host_root_Results_Future) Root() anchor.Anchor {
	return anchor.Anchor(p.Future.Field(0, nil).Client())
}

type Host_debug_Params capnp.Struct

// Host_debug_Params_TypeID is the unique identifier for the type Host_debug_Params.
const Host_debug_Params_TypeID = 0x89ec8e1ef0f263f3

func NewHost_debug_Params(s *capnp.Segment) (Host_debug_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_debug_Params(st), err
}

func NewRootHost_debug_Params(s *capnp.Segment) (Host_debug_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_debug_Params(st), err
}

func ReadRootHost_debug_Params(msg *capnp.Message) (Host_debug_Params, error) {
	root, err := msg.Root()
	return Host_debug_Params(root.Struct()), err
}

func (s Host_debug_Params) String() string {
	str, _ := text.Marshal(0x89ec8e1ef0f263f3, capnp.Struct(s))
	return str
}

func (s Host_debug_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_debug_Params) DecodeFromPtr(p capnp.Ptr) Host_debug_Params {
	return Host_debug_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_debug_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_debug_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_debug_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_debug_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_debug_Params_List is a list of Host_debug_Params.
type Host_debug_Params_List = capnp.StructList[Host_debug_Params]

// NewHost_debug_Params creates a new list of Host_debug_Params.
func NewHost_debug_Params_List(s *capnp.Segment, sz int32) (Host_debug_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_debug_Params](l), err
}

// Host_debug_Params_Future is a wrapper for a Host_debug_Params promised by a client call.
type Host_debug_Params_Future struct{ *capnp.Future }

func (f Host_debug_Params_Future) Struct() (Host_debug_Params, error) {
	p, err := f.Future.Ptr()
	return Host_debug_Params(p.Struct()), err
}

type Host_debug_Results capnp.Struct

// Host_debug_Results_TypeID is the unique identifier for the type Host_debug_Results.
const Host_debug_Results_TypeID = 0xbe186003ae0f0429

func NewHost_debug_Results(s *capnp.Segment) (Host_debug_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_debug_Results(st), err
}

func NewRootHost_debug_Results(s *capnp.Segment) (Host_debug_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_debug_Results(st), err
}

func ReadRootHost_debug_Results(msg *capnp.Message) (Host_debug_Results, error) {
	root, err := msg.Root()
	return Host_debug_Results(root.Struct()), err
}

func (s Host_debug_Results) String() string {
	str, _ := text.Marshal(0xbe186003ae0f0429, capnp.Struct(s))
	return str
}

func (s Host_debug_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_debug_Results) DecodeFromPtr(p capnp.Ptr) Host_debug_Results {
	return Host_debug_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_debug_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_debug_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_debug_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_debug_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_debug_Results) Debugger() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Host_debug_Results) HasDebugger() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_debug_Results) SetDebugger(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_debug_Results_List is a list of Host_debug_Results.
type Host_debug_Results_List = capnp.StructList[Host_debug_Results]

// NewHost_debug_Results creates a new list of Host_debug_Results.
func NewHost_debug_Results_List(s *capnp.Segment, sz int32) (Host_debug_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_debug_Results](l), err
}

// Host_debug_Results_Future is a wrapper for a Host_debug_Results promised by a client call.
type Host_debug_Results_Future struct{ *capnp.Future }

func (f Host_debug_Results_Future) Struct() (Host_debug_Results, error) {
	p, err := f.Future.Ptr()
	return Host_debug_Results(p.Struct()), err
}
func (p Host_debug_Results_Future) Debugger() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type Host_executor_Params capnp.Struct

// Host_executor_Params_TypeID is the unique identifier for the type Host_executor_Params.
const Host_executor_Params_TypeID = 0xbe5314ed29d84c52

func NewHost_executor_Params(s *capnp.Segment) (Host_executor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_executor_Params(st), err
}

func NewRootHost_executor_Params(s *capnp.Segment) (Host_executor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Host_executor_Params(st), err
}

func ReadRootHost_executor_Params(msg *capnp.Message) (Host_executor_Params, error) {
	root, err := msg.Root()
	return Host_executor_Params(root.Struct()), err
}

func (s Host_executor_Params) String() string {
	str, _ := text.Marshal(0xbe5314ed29d84c52, capnp.Struct(s))
	return str
}

func (s Host_executor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_executor_Params) DecodeFromPtr(p capnp.Ptr) Host_executor_Params {
	return Host_executor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_executor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_executor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_executor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_executor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Host_executor_Params_List is a list of Host_executor_Params.
type Host_executor_Params_List = capnp.StructList[Host_executor_Params]

// NewHost_executor_Params creates a new list of Host_executor_Params.
func NewHost_executor_Params_List(s *capnp.Segment, sz int32) (Host_executor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Host_executor_Params](l), err
}

// Host_executor_Params_Future is a wrapper for a Host_executor_Params promised by a client call.
type Host_executor_Params_Future struct{ *capnp.Future }

func (f Host_executor_Params_Future) Struct() (Host_executor_Params, error) {
	p, err := f.Future.Ptr()
	return Host_executor_Params(p.Struct()), err
}

type Host_executor_Results capnp.Struct

// Host_executor_Results_TypeID is the unique identifier for the type Host_executor_Results.
const Host_executor_Results_TypeID = 0x9e8120f9bb059602

func NewHost_executor_Results(s *capnp.Segment) (Host_executor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(st), err
}

func NewRootHost_executor_Results(s *capnp.Segment) (Host_executor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_executor_Results(st), err
}

func ReadRootHost_executor_Results(msg *capnp.Message) (Host_executor_Results, error) {
	root, err := msg.Root()
	return Host_executor_Results(root.Struct()), err
}

func (s Host_executor_Results) String() string {
	str, _ := text.Marshal(0x9e8120f9bb059602, capnp.Struct(s))
	return str
}

func (s Host_executor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_executor_Results) DecodeFromPtr(p capnp.Ptr) Host_executor_Results {
	return Host_executor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_executor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_executor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_executor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_executor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_executor_Results) Executor() process.Executor {
	p, _ := capnp.Struct(s).Ptr(0)
	return process.Executor(p.Interface().Client())
}

func (s Host_executor_Results) HasExecutor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_executor_Results) SetExecutor(v process.Executor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_executor_Results_List is a list of Host_executor_Results.
type Host_executor_Results_List = capnp.StructList[Host_executor_Results]

// NewHost_executor_Results creates a new list of Host_executor_Results.
func NewHost_executor_Results_List(s *capnp.Segment, sz int32) (Host_executor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_executor_Results](l), err
}

// Host_executor_Results_Future is a wrapper for a Host_executor_Results promised by a client call.
type Host_executor_Results_Future struct{ *capnp.Future }

func (f Host_executor_Results_Future) Struct() (Host_executor_Results, error) {
	p, err := f.Future.Ptr()
	return Host_executor_Results(p.Struct()), err
}
func (p Host_executor_Results_Future) Executor() process.Executor {
	return process.Executor(p.Future.Field(0, nil).Client())
}

type Host_resolve_Params capnp.Struct

// Host_resolve_Params_TypeID is the unique identifier for the type Host_resolve_Params.
const Host_resolve_Params_TypeID = 0x9eaa92308c59a588

func NewHost_resolve_Params(s *capnp.Segment) (Host_resolve_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_resolve_Params(st), err
}

func NewRootHost_resolve_Params(s *capnp.Segment) (Host_resolve_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_resolve_Params(st), err
}

func ReadRootHost_resolve_Params(msg *capnp.Message) (Host_resolve_Params, error) {
	root, err := msg.Root()
	return Host_resolve_Params(root.Struct()), err
}

func (s Host_resolve_Params) String() string {
	str, _ := text.Marshal(0x9eaa92308c59a588, capnp.Struct(s))
	return str
}

func (s Host_resolve_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_resolve_Params) DecodeFromPtr(p capnp.Ptr) Host_resolve_Params {
	return Host_resolve_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_resolve_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_resolve_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_resolve_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_resolve_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_resolve_Params) SturdyRef() (SturdyRef, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRef(p.Struct()), err
}

func (s Host_resolve_Params) HasSturdyRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_resolve_Params) SetSturdyRef(v SturdyRef) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyRef sets the sturdyRef field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Host_resolve_Params) NewSturdyRef() (SturdyRef, error) {
	ss, err := NewSturdyRef(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Host_resolve_Params_List is a list of Host_resolve_Params.
type Host_resolve_Params_List = capnp.StructList[Host_resolve_Params]

// NewHost_resolve_Params creates a new list of Host_resolve_Params.
func NewHost_resolve_Params_List(s *capnp.Segment, sz int32) (Host_resolve_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_resolve_Params](l), err
}

// Host_resolve_Params_Future is a wrapper for a Host_resolve_Params promised by a client call.
type Host_resolve_Params_Future struct{ *capnp.Future }

func (f Host_resolve_Params_Future) Struct() (Host_resolve_Params, error) {
	p, err := f.Future.Ptr()
	return Host_resolve_Params(p.Struct()), err
}
func (p Host_resolve_Params_Future) SturdyRef() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(0, nil)}
}

type Host_resolve_Results capnp.Struct

// Host_resolve_Results_TypeID is the unique identifier for the type Host_resolve_Results.
const Host_resolve_Results_TypeID = 0x99b232a18288d3d8

func NewHost_resolve_Results(s *capnp.Segment) (Host_resolve_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_resolve_Results(st), err
}

func NewRootHost_resolve_Results(s *capnp.Segment) (Host_resolve_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Host_resolve_Results(st), err
}

func ReadRootHost_resolve_Results(msg *capnp.Message) (Host_resolve_Results, error) {
	root, err := msg.Root()
	return Host_resolve_Results(root.Struct()), err
}

func (s Host_resolve_Results) String() string {
	str, _ := text.Marshal(0x99b232a18288d3d8, capnp.Struct(s))
	return str
}

func (s Host_resolve_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Host_resolve_Results) DecodeFromPtr(p capnp.Ptr) Host_resolve_Results {
	return Host_resolve_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Host_resolve_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Host_resolve_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Host_resolve_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Host_resolve_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Host_resolve_Results) Capability() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Host_resolve_Results) HasCapability() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Host_resolve_Results) SetCapability(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Host_resolve_Results_List is a list of Host_resolve_Results.
type Host_resolve_Results_List = capnp.StructList[Host_resolve_Results]

// NewHost_resolve_Results creates a new list of Host_resolve_Results.
func NewHost_resolve_Results_List(s *capnp.Segment, sz int32) (Host_resolve_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Host_resolve_Results](l), err
}

// Host_resolve_Results_Future is a wrapper for a Host_resolve_Results promised by a client call.
type Host_resolve_Results_Future struct{ *capnp.Future }

func (f Host_resolve_Results_Future) Struct() (Host_resolve_Results, error) {
	p, err := f.Future.Ptr()
	return Host_resolve_Results(p.Struct()), err
}
func (p Host_resolve_Results_Future) Capability() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type SturdyRef capnp.Struct
type SturdyRef_Which uint16

const (
	SturdyRef_Which_routed    SturdyRef_Which = 0
	SturdyRef_Which_addressed SturdyRef_Which = 1
)

func (w SturdyRef_Which) String() string {
	const s = "routedaddressed"
	switch w {
	case SturdyRef_Which_routed:
		return s[0:6]
	case SturdyRef_Which_addressed:
		return s[6:15]

	}
	return "SturdyRef_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SturdyRef_TypeID is the unique identifier for the type SturdyRef.
const SturdyRef_TypeID = 0xb10458aa406f5899

func NewSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SturdyRef(st), err
}

func NewRootSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return SturdyRef(st), err
}

func ReadRootSturdyRef(msg *capnp.Message) (SturdyRef, error) {
	root, err := msg.Root()
	return SturdyRef(root.Struct()), err
}

func (s SturdyRef) String() string {
	str, _ := text.Marshal(0xb10458aa406f5899, capnp.Struct(s))
	return str
}

func (s SturdyRef) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRef) DecodeFromPtr(p capnp.Ptr) SturdyRef {
	return SturdyRef(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRef) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s SturdyRef) Which() SturdyRef_Which {
	return SturdyRef_Which(capnp.Struct(s).Uint16(0))
}
func (s SturdyRef) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRef) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRef) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRef) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SturdyRef) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRef) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SturdyRef) Protos() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s SturdyRef) HasProtos() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SturdyRef) SetProtos(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewProtos sets the protos field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s SturdyRef) NewProtos(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SturdyRef) SetRouted() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s SturdyRef) Addressed() (capnp.DataList, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != addressed")
	}
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.DataList(p.List()), err
}

func (s SturdyRef) HasAddressed() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(2)
}

func (s SturdyRef) SetAddressed(v capnp.DataList) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAddressed sets the addressed field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s SturdyRef) NewAddressed(n int32) (capnp.DataList, error) {
	capnp.Struct(s).SetUint16(0, 1)
	l, err := capnp.NewDataList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// SturdyRef_List is a list of SturdyRef.
type SturdyRef_List = capnp.StructList[SturdyRef]

// NewSturdyRef creates a new list of SturdyRef.
func NewSturdyRef_List(s *capnp.Segment, sz int32) (SturdyRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[SturdyRef](l), err
}

// SturdyRef_Future is a wrapper for a SturdyRef promised by a client call.
type SturdyRef_Future struct{ *capnp.Future }

func (f SturdyRef_Future) Struct() (SturdyRef, error) {
	p, err := f.Future.Ptr()
	return SturdyRef(p.Struct()), err
}

const schema_fcf6ac08e448a6ac = "x\xda\x8c\x94Mh\\U\x14\xc7\xcf\xff\xde7}\xf3" +
	"\x91Lrgf\x11\"~\x10\xb30]\x84\xa6\"\xe2" +
	"@\x98Q(\xb4\xb5\xc2\xbc\x041J\xd5Nf^\xeb" +
	"\xc0\xd47\xbc\x8fh \xa2)\x04#j\x84B\xc5\xb8" +
	"\x10\x84\xc6E(J\x14\x11-d\xd1\xa5\xe0\xa2\xb6\x8b" +
	"\x16\xc4U\xaa\x14\xb4\xf8A\x84H\xf4\xca}3\xef\xcd" +
	"M\xa8m\xb6\xef\xfe\xee\xff\xdc\xf3?\xff\xf3\x0e,\xf0" +
	"\xb21\xd6[\xca\x11\xb3\xae&\xf6\xc9\xf5\xafn\xddx" +
	"\xf0\xa1\xb7\xcf\x90\xc8\x83\xc80\x89\xf2\x89\xd4\xdfd\xc8" +
	"?k\x7f\xfcv\xdf\xd2/ou\x0f\x1e\xbe\x99d " +
	"Cn^=\xb6\xb0tv\xea\xbd\xf6I\x02\xea\xe8;" +
	"u\x84\xfc\xe5d\x89 \xcd+/\xd6\xb7\xd7\xe7\xce\x91" +
	"\xc8ry\xe1\x93\xc3\x1b\xc9\x0b\x7fm\x13!\xff{\xf2" +
	"\xc3\xfcVR\xf1\x9b\xc97\x91\xbf\x992\x89\xe4\xb5+" +
	"\x8bg>>\xf8\xf9\xb2.w95\xa8\xe4\xae\xa7\x94" +
	"\x1c{?qq\xeb\x81\xf9\x8ft\xe0\x9f\xd4\x90\x02\x12" +
	"i\x05,\xae<\xfb\xce\x81\xb3\xab;\x80\x91tN\x01" +
	"c!\xb0\xf1u0\xf9\xe4%\xe3\xbc\xd6\xe4\xd3i\xd5" +
	"\xe4\xf2\x94S^\x9d2\xd6\xc8\xca\x02\xdd\xa7\x1e\xe2&" +
	"#\xca?\x96\xbe\x94\x7f<\xad\xe8\xf1\xf4\xcf\x049b" +
	"\xf4}\xcaO\x0c\xac\xebu\x1e\xc9\xa4U\x9d\xf1\x8c\xaa" +
	"3q\xec\xda\xc8\xaf\x85\xc9u\xcd\xb3jfPy\x96" +
	"9\xf4\xcc\xf9\x85\xe3\x17\xbf\xd5\xaf\x1e\xc9\x84\x9e=\x15" +
	"^\xbd\x95Mm\x06[\x8b?\xe8\xc0\xe9L\xd8C\x10" +
	"\x02\xcb\xab\xdb\x89`\xe8\xcb\x1b\x9a\xf69U[\xd2\x9a" +
	"\xac5\x03\xcf\xb7\xddQV\xab\xb6^n\x15\x0f;\x9e" +
	"?\xea:\x8e?\\\xaaT\xdd\xeai/\x06L\x0d\xa8" +
	"\xdb\xd3\xc1\xa9\xe16@\x11\xa0\x9d\xcf4\xecW\x86'" +
	"l/h\xfa\x1eY\x067\x88\x0c\x10\x89\xde\xfdDV" +
	"\x92\xc3*0\xf4)\x089\x83\x13\x90#\xc4u\x10\xe9" +
	"p\xcf\xaf\x00\xd6\x00O\x10\xc5c@\x94 \xb1\xb6\x9f" +
	"\x98X1\xd1m\x0f\x91\x11b\xb9HL\xbck\x82\xc5" +
	"\x19E\xe4\xa2\x98W\xf7\x02\x13<\x8e)\xa2\xe1\x88\xc6" +
	"Ab\xe2y\x13F<\x0eD\x09\x12\xd6Qb\xe2\x88" +
	"\x89D\x9c\x19D\xf1\x13\xe3O\x10\x13cf\xd8R\x19" +
	"\xa5V0=\x19L\x97\xd1\xa7\x8c,\xe3\xfe\xd0\xae2" +
	"\xa4\xfd\xaa]\x0b|\xc7%\xa22^wm\xcfi\xce" +
	"\xd8eT\xd0\xed\x9e\xebch\x03m#\xb9\xef\xe9F" +
	">Gd\xf5pX\x03\x0c\xb2VmU\xa7\x1b\xcd\x06" +
	"q\x7f\xf66\x86\xea\x92\xd1\x0bBM\xb3\xb9S\xf3\xa8" +
	"\xa6\xa9=\x15B~\x1f\xcc\xaf|\xf3\xc2\xe8gD\x80" +
	"\xa0;\xbf6L\x05v\x08Oh\xc2\x9e\x1f\xb8\xf5\xd9" +
	"\x09\x9bp\x12\xfd\xdd%\"\xa0_\x13f\xbb\xc3\xb4;" +
	"\x8d\x1d`\xb2\xa3v\x92TT\xfa\xe3\x92\xd5A\"\xeb" +
	"8\x87\xf5\x12\x83\x00\x0aP\x1f\xed\"\x91u\x82\xc3\x9a" +
	"c\xe8eR\x16\xc0\x88\xc4\xac\xfa\xeasXo0\xdc" +
	"\xcb\xff\x95\xac\x00N$^S\x8f\x9e\xe3\xb0>`\xe0" +
	"\x8d:z\x88\xa1\x87Pj\xb9\x8e\xefx\xc8\x12*\x1c" +
	"\xe1\xd7,\xa1\xe4:\x81o\xd7i\x9f\xac\xd6\xeb\xae\xed" +
	"y6\xa1\x1e1\xbdm\xe6\xb6\xa6\xb5\x17)\xda\x14\xfa" +
	"\xbfi\x84\xd8);\x9c\xc6\x1e\x07\xac\xfc\xe2\x9aa|" +
	"\xf7~\xdfm=\x15\x04!\x87\xae/\xa56\x1e\xcdm" +
	"\xdci\xf4\xed\xbcw\x14w\x8e\xbe\xd8U\xec\xac\x05\x84" +
	",:3\xf7\xfc\xf4E\xe5\xc7=hv\xfe1\xf4_" +
	"\x00\x00\x00\xff\xff_\xbb\xcd\xc7"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x828b2823e5eeb7be,
		0x89ec8e1ef0f263f3,
		0x8f58928e854cd4f5,
		0x957cbefc645fd307,
		0x99b232a18288d3d8,
		0x9e8120f9bb059602,
		0x9eaa92308c59a588,
		0xa404c24b5375b9e4,
		0xb10458aa406f5899,
		0xbe186003ae0f0429,
		0xbe5314ed29d84c52,
		0xcabb5c85a457450b,
		0xdc88f975f5090eee,
		0xe5b5227505fcaa99)
}
