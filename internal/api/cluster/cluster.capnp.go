// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	channel "github.com/wetware/ww/internal/api/channel"
)

type View struct{ Client *capnp.Client }

// View_TypeID is the unique identifier for the type View.
const View_TypeID = 0x8a1df0335afc249a

func (c View) Iter(ctx context.Context, params func(View_iter_Params) error) (View_iter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_iter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_iter_Results_Future{Future: ans.Future()}, release
}
func (c View) Lookup(ctx context.Context, params func(View_lookup_Params) error) (View_lookup_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(View_lookup_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return View_lookup_Results_Future{Future: ans.Future()}, release
}

func (c View) AddRef() View {
	return View{
		Client: c.Client.AddRef(),
	}
}

func (c View) Release() {
	c.Client.Release()
}

// A View_Server is a View with a local implementation.
type View_Server interface {
	Iter(context.Context, View_iter) error

	Lookup(context.Context, View_lookup) error
}

// View_NewServer creates a new Server from an implementation of View_Server.
func View_NewServer(s View_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(View_Methods(nil, s), s, c, policy)
}

// View_ServerToClient creates a new Client from an implementation of View_Server.
// The caller is responsible for calling Release on the returned Client.
func View_ServerToClient(s View_Server, policy *server.Policy) View {
	return View{Client: capnp.NewClient(View_NewServer(s, policy))}
}

// View_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func View_Methods(methods []server.Method, s View_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      0,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "iter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Iter(ctx, View_iter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a1df0335afc249a,
			MethodID:      1,
			InterfaceName: "cluster.capnp:View",
			MethodName:    "lookup",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Lookup(ctx, View_lookup{call})
		},
	})

	return methods
}

// View_iter holds the state for a server call to View.iter.
// See server.Call for documentation.
type View_iter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_iter) Args() View_iter_Params {
	return View_iter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_iter) AllocResults() (View_iter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{Struct: r}, err
}

// View_lookup holds the state for a server call to View.lookup.
// See server.Call for documentation.
type View_lookup struct {
	*server.Call
}

// Args returns the call's arguments.
func (c View_lookup) Args() View_lookup_Params {
	return View_lookup_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c View_lookup) AllocResults() (View_lookup_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{Struct: r}, err
}

type View_Record struct{ capnp.Struct }

// View_Record_TypeID is the unique identifier for the type View_Record.
const View_Record_TypeID = 0xcdcf42beb2537d20

func NewView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func NewRootView_Record(s *capnp.Segment) (View_Record, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return View_Record{st}, err
}

func ReadRootView_Record(msg *capnp.Message) (View_Record, error) {
	root, err := msg.Root()
	return View_Record{root.Struct()}, err
}

func (s View_Record) String() string {
	str, _ := text.Marshal(0xcdcf42beb2537d20, s.Struct)
	return str
}

func (s View_Record) Peer() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_Record) HasPeer() bool {
	return s.Struct.HasPtr(0)
}

func (s View_Record) PeerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_Record) SetPeer(v string) error {
	return s.Struct.SetText(0, v)
}

func (s View_Record) Ttl() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s View_Record) SetTtl(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s View_Record) Seq() uint64 {
	return s.Struct.Uint64(8)
}

func (s View_Record) SetSeq(v uint64) {
	s.Struct.SetUint64(8, v)
}

// View_Record_List is a list of View_Record.
type View_Record_List = capnp.StructList[View_Record]

// NewView_Record creates a new list of View_Record.
func NewView_Record_List(s *capnp.Segment, sz int32) (View_Record_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[View_Record]{List: l}, err
}

// View_Record_Future is a wrapper for a View_Record promised by a client call.
type View_Record_Future struct{ *capnp.Future }

func (p View_Record_Future) Struct() (View_Record, error) {
	s, err := p.Future.Struct()
	return View_Record{s}, err
}

type View_iter_Params struct{ capnp.Struct }

// View_iter_Params_TypeID is the unique identifier for the type View_iter_Params.
const View_iter_Params_TypeID = 0xd929e054f82b286c

func NewView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func NewRootView_iter_Params(s *capnp.Segment) (View_iter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_iter_Params{st}, err
}

func ReadRootView_iter_Params(msg *capnp.Message) (View_iter_Params, error) {
	root, err := msg.Root()
	return View_iter_Params{root.Struct()}, err
}

func (s View_iter_Params) String() string {
	str, _ := text.Marshal(0xd929e054f82b286c, s.Struct)
	return str
}

func (s View_iter_Params) Handler() channel.Sender {
	p, _ := s.Struct.Ptr(0)
	return channel.Sender{Client: p.Interface().Client()}
}

func (s View_iter_Params) HasHandler() bool {
	return s.Struct.HasPtr(0)
}

func (s View_iter_Params) SetHandler(v channel.Sender) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// View_iter_Params_List is a list of View_iter_Params.
type View_iter_Params_List = capnp.StructList[View_iter_Params]

// NewView_iter_Params creates a new list of View_iter_Params.
func NewView_iter_Params_List(s *capnp.Segment, sz int32) (View_iter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_iter_Params]{List: l}, err
}

// View_iter_Params_Future is a wrapper for a View_iter_Params promised by a client call.
type View_iter_Params_Future struct{ *capnp.Future }

func (p View_iter_Params_Future) Struct() (View_iter_Params, error) {
	s, err := p.Future.Struct()
	return View_iter_Params{s}, err
}

func (p View_iter_Params_Future) Handler() channel.Sender {
	return channel.Sender{Client: p.Future.Field(0, nil).Client()}
}

type View_iter_Results struct{ capnp.Struct }

// View_iter_Results_TypeID is the unique identifier for the type View_iter_Results.
const View_iter_Results_TypeID = 0xe6df611247a8fc13

func NewView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func NewRootView_iter_Results(s *capnp.Segment) (View_iter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return View_iter_Results{st}, err
}

func ReadRootView_iter_Results(msg *capnp.Message) (View_iter_Results, error) {
	root, err := msg.Root()
	return View_iter_Results{root.Struct()}, err
}

func (s View_iter_Results) String() string {
	str, _ := text.Marshal(0xe6df611247a8fc13, s.Struct)
	return str
}

// View_iter_Results_List is a list of View_iter_Results.
type View_iter_Results_List = capnp.StructList[View_iter_Results]

// NewView_iter_Results creates a new list of View_iter_Results.
func NewView_iter_Results_List(s *capnp.Segment, sz int32) (View_iter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[View_iter_Results]{List: l}, err
}

// View_iter_Results_Future is a wrapper for a View_iter_Results promised by a client call.
type View_iter_Results_Future struct{ *capnp.Future }

func (p View_iter_Results_Future) Struct() (View_iter_Results, error) {
	s, err := p.Future.Struct()
	return View_iter_Results{s}, err
}

type View_lookup_Params struct{ capnp.Struct }

// View_lookup_Params_TypeID is the unique identifier for the type View_lookup_Params.
const View_lookup_Params_TypeID = 0xf495a555c9344000

func NewView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func NewRootView_lookup_Params(s *capnp.Segment) (View_lookup_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return View_lookup_Params{st}, err
}

func ReadRootView_lookup_Params(msg *capnp.Message) (View_lookup_Params, error) {
	root, err := msg.Root()
	return View_lookup_Params{root.Struct()}, err
}

func (s View_lookup_Params) String() string {
	str, _ := text.Marshal(0xf495a555c9344000, s.Struct)
	return str
}

func (s View_lookup_Params) PeerID() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s View_lookup_Params) HasPeerID() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Params) PeerIDBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s View_lookup_Params) SetPeerID(v string) error {
	return s.Struct.SetText(0, v)
}

// View_lookup_Params_List is a list of View_lookup_Params.
type View_lookup_Params_List = capnp.StructList[View_lookup_Params]

// NewView_lookup_Params creates a new list of View_lookup_Params.
func NewView_lookup_Params_List(s *capnp.Segment, sz int32) (View_lookup_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[View_lookup_Params]{List: l}, err
}

// View_lookup_Params_Future is a wrapper for a View_lookup_Params promised by a client call.
type View_lookup_Params_Future struct{ *capnp.Future }

func (p View_lookup_Params_Future) Struct() (View_lookup_Params, error) {
	s, err := p.Future.Struct()
	return View_lookup_Params{s}, err
}

type View_lookup_Results struct{ capnp.Struct }

// View_lookup_Results_TypeID is the unique identifier for the type View_lookup_Results.
const View_lookup_Results_TypeID = 0xe54acc44b61fd7ef

func NewView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func NewRootView_lookup_Results(s *capnp.Segment) (View_lookup_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return View_lookup_Results{st}, err
}

func ReadRootView_lookup_Results(msg *capnp.Message) (View_lookup_Results, error) {
	root, err := msg.Root()
	return View_lookup_Results{root.Struct()}, err
}

func (s View_lookup_Results) String() string {
	str, _ := text.Marshal(0xe54acc44b61fd7ef, s.Struct)
	return str
}

func (s View_lookup_Results) Record() (View_Record, error) {
	p, err := s.Struct.Ptr(0)
	return View_Record{Struct: p.Struct()}, err
}

func (s View_lookup_Results) HasRecord() bool {
	return s.Struct.HasPtr(0)
}

func (s View_lookup_Results) SetRecord(v View_Record) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRecord sets the record field to a newly
// allocated View_Record struct, preferring placement in s's segment.
func (s View_lookup_Results) NewRecord() (View_Record, error) {
	ss, err := NewView_Record(s.Struct.Segment())
	if err != nil {
		return View_Record{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s View_lookup_Results) Ok() bool {
	return s.Struct.Bit(0)
}

func (s View_lookup_Results) SetOk(v bool) {
	s.Struct.SetBit(0, v)
}

// View_lookup_Results_List is a list of View_lookup_Results.
type View_lookup_Results_List = capnp.StructList[View_lookup_Results]

// NewView_lookup_Results creates a new list of View_lookup_Results.
func NewView_lookup_Results_List(s *capnp.Segment, sz int32) (View_lookup_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[View_lookup_Results]{List: l}, err
}

// View_lookup_Results_Future is a wrapper for a View_lookup_Results promised by a client call.
type View_lookup_Results_Future struct{ *capnp.Future }

func (p View_lookup_Results_Future) Struct() (View_lookup_Results, error) {
	s, err := p.Future.Struct()
	return View_lookup_Results{s}, err
}

func (p View_lookup_Results_Future) Record() View_Record_Future {
	return View_Record_Future{Future: p.Future.Field(0, nil)}
}

type Joiner struct{ Client *capnp.Client }

// Joiner_TypeID is the unique identifier for the type Joiner.
const Joiner_TypeID = 0x827cea1632b4d5b2

func (c Joiner) Join(ctx context.Context, params func(Joiner_join_Params) error) (Joiner_join_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x827cea1632b4d5b2,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Joiner",
			MethodName:    "join",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Joiner_join_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Joiner_join_Results_Future{Future: ans.Future()}, release
}

func (c Joiner) AddRef() Joiner {
	return Joiner{
		Client: c.Client.AddRef(),
	}
}

func (c Joiner) Release() {
	c.Client.Release()
}

// A Joiner_Server is a Joiner with a local implementation.
type Joiner_Server interface {
	Join(context.Context, Joiner_join) error
}

// Joiner_NewServer creates a new Server from an implementation of Joiner_Server.
func Joiner_NewServer(s Joiner_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Joiner_Methods(nil, s), s, c, policy)
}

// Joiner_ServerToClient creates a new Client from an implementation of Joiner_Server.
// The caller is responsible for calling Release on the returned Client.
func Joiner_ServerToClient(s Joiner_Server, policy *server.Policy) Joiner {
	return Joiner{Client: capnp.NewClient(Joiner_NewServer(s, policy))}
}

// Joiner_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Joiner_Methods(methods []server.Method, s Joiner_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x827cea1632b4d5b2,
			MethodID:      0,
			InterfaceName: "cluster.capnp:Joiner",
			MethodName:    "join",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Join(ctx, Joiner_join{call})
		},
	})

	return methods
}

// Joiner_join holds the state for a server call to Joiner.join.
// See server.Call for documentation.
type Joiner_join struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Joiner_join) Args() Joiner_join_Params {
	return Joiner_join_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Joiner_join) AllocResults() (Joiner_join_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Joiner_join_Results{Struct: r}, err
}

type Joiner_join_Params struct{ capnp.Struct }

// Joiner_join_Params_TypeID is the unique identifier for the type Joiner_join_Params.
const Joiner_join_Params_TypeID = 0xe821e7b2cfcf4e20

func NewJoiner_join_Params(s *capnp.Segment) (Joiner_join_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Joiner_join_Params{st}, err
}

func NewRootJoiner_join_Params(s *capnp.Segment) (Joiner_join_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Joiner_join_Params{st}, err
}

func ReadRootJoiner_join_Params(msg *capnp.Message) (Joiner_join_Params, error) {
	root, err := msg.Root()
	return Joiner_join_Params{root.Struct()}, err
}

func (s Joiner_join_Params) String() string {
	str, _ := text.Marshal(0xe821e7b2cfcf4e20, s.Struct)
	return str
}

func (s Joiner_join_Params) Peers() (AddrInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return AddrInfo_List{List: p.List()}, err
}

func (s Joiner_join_Params) HasPeers() bool {
	return s.Struct.HasPtr(0)
}

func (s Joiner_join_Params) SetPeers(v AddrInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated AddrInfo_List, preferring placement in s's segment.
func (s Joiner_join_Params) NewPeers(n int32) (AddrInfo_List, error) {
	l, err := NewAddrInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return AddrInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Joiner_join_Params_List is a list of Joiner_join_Params.
type Joiner_join_Params_List = capnp.StructList[Joiner_join_Params]

// NewJoiner_join_Params creates a new list of Joiner_join_Params.
func NewJoiner_join_Params_List(s *capnp.Segment, sz int32) (Joiner_join_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Joiner_join_Params]{List: l}, err
}

// Joiner_join_Params_Future is a wrapper for a Joiner_join_Params promised by a client call.
type Joiner_join_Params_Future struct{ *capnp.Future }

func (p Joiner_join_Params_Future) Struct() (Joiner_join_Params, error) {
	s, err := p.Future.Struct()
	return Joiner_join_Params{s}, err
}

type Joiner_join_Results struct{ capnp.Struct }

// Joiner_join_Results_TypeID is the unique identifier for the type Joiner_join_Results.
const Joiner_join_Results_TypeID = 0xe75e468c2155a973

func NewJoiner_join_Results(s *capnp.Segment) (Joiner_join_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Joiner_join_Results{st}, err
}

func NewRootJoiner_join_Results(s *capnp.Segment) (Joiner_join_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Joiner_join_Results{st}, err
}

func ReadRootJoiner_join_Results(msg *capnp.Message) (Joiner_join_Results, error) {
	root, err := msg.Root()
	return Joiner_join_Results{root.Struct()}, err
}

func (s Joiner_join_Results) String() string {
	str, _ := text.Marshal(0xe75e468c2155a973, s.Struct)
	return str
}

// Joiner_join_Results_List is a list of Joiner_join_Results.
type Joiner_join_Results_List = capnp.StructList[Joiner_join_Results]

// NewJoiner_join_Results creates a new list of Joiner_join_Results.
func NewJoiner_join_Results_List(s *capnp.Segment, sz int32) (Joiner_join_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Joiner_join_Results]{List: l}, err
}

// Joiner_join_Results_Future is a wrapper for a Joiner_join_Results promised by a client call.
type Joiner_join_Results_Future struct{ *capnp.Future }

func (p Joiner_join_Results_Future) Struct() (Joiner_join_Results, error) {
	s, err := p.Future.Struct()
	return Joiner_join_Results{s}, err
}

type AddrInfo struct{ capnp.Struct }

// AddrInfo_TypeID is the unique identifier for the type AddrInfo.
const AddrInfo_TypeID = 0xa19185ea4a523225

func NewAddrInfo(s *capnp.Segment) (AddrInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AddrInfo{st}, err
}

func NewRootAddrInfo(s *capnp.Segment) (AddrInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AddrInfo{st}, err
}

func ReadRootAddrInfo(msg *capnp.Message) (AddrInfo, error) {
	root, err := msg.Root()
	return AddrInfo{root.Struct()}, err
}

func (s AddrInfo) String() string {
	str, _ := text.Marshal(0xa19185ea4a523225, s.Struct)
	return str
}

func (s AddrInfo) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AddrInfo) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s AddrInfo) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AddrInfo) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s AddrInfo) Addrs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s AddrInfo) HasAddrs() bool {
	return s.Struct.HasPtr(1)
}

func (s AddrInfo) SetAddrs(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAddrs sets the addrs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s AddrInfo) NewAddrs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// AddrInfo_List is a list of AddrInfo.
type AddrInfo_List = capnp.StructList[AddrInfo]

// NewAddrInfo creates a new list of AddrInfo.
func NewAddrInfo_List(s *capnp.Segment, sz int32) (AddrInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[AddrInfo]{List: l}, err
}

// AddrInfo_Future is a wrapper for a AddrInfo promised by a client call.
type AddrInfo_Future struct{ *capnp.Future }

func (p AddrInfo_Future) Struct() (AddrInfo, error) {
	s, err := p.Future.Struct()
	return AddrInfo{s}, err
}

const schema_fcf6ac08e448a6ac = "x\xdat\x94OH\x1cW\x1c\xc7\x7f\xdf\xf7f\xdc\xb5" +
	"\xb8\xae\xcfY-\x15D-+\xa8E\xd1Uh\xd9\xcb" +
	"le[\xff\xd0\x96}V\x0b-\xb4\xb08S\xbau" +
	"\xdd]gv\xf1\xd2R(\x94B\xe9\xc5C\x0f\xf5\xd6" +
	"CK[\x84\x82\x94\x1e\x1a\x08$7!\"\x04$x" +
	"J\x0eI\x14!\x7f\x0eIH\x82d\xc2\xdbuf6" +
	"\xc6\xdc\x1e\xfb\xbe\xfb\xfd~\x7f\x9f\xdfc\xc6/#\xa3" +
	"M\xc4\xden!&g\xf5\x16o{\xff\xdfT\xf7\xf1" +
	"7\xdf\x93h\xe7\xde\xd6\x1f\xb37\xa3[\x8fN\x88`" +
	"\x80\xffm\xb4\xf2\x08\x91\xa1\xf3\x19cT\x9d\xbc\xcd\xe4" +
	"\xc9g\x93\xf7{\x7fzI\xdc\xc57\x8d^\xfe:\x91" +
	"1\xc8\x7f4ju\xf1`ja\xfe\xf8\x87\x8d\xdfH" +
	"\xb4#\x14\xebLY~\xce\xff7\xec\xbay\x9e\xaf\x13" +
	"\xbc\xfeo?\xde\xbe8\xbd\xb7K\xd2\x00\x0bct(" +
	"\xc9.\xbfj\x1c\xd4\xc5\xfb\xfc\x1f\x82W\x1cz\xeb\xf1" +
	"\xe2\x8d\xe1\x03\x12\x06\xe8T\xb3\xaa=%\x18k\x9aI" +
	"\xf0\xee]\xeb\xfb/{e\xfe\x962\xf3\x05\x93\x1bZ" +
	"'\x08\xc6\xaf\x9a\x8a3N\xfe\x9c\xe9\xcc_\xbf\xddp" +
	"\xd0\xd4\xfdC\x8d\x814\xcf\xfdki\xe0\xe7\xf7\xbf8" +
	"$\xd1\xe5\xdf\x1c\xa8\x7fj^\xffG{{\xdb\x87\x03" +
	"G\x8d\x9b\x86\xe9%\xed5e\xba\xa3b\x9fe\xa6v" +
	"\x96~\xff\xe5AXj\xf2I\xe3\x1a\xbaI\x9fz\xcb" +
	"\xc5\x9a[\xb5\x9d1,\xe7+\xa5Jz\xbe\x1c/\x94" +
	"l'\x07H\x8d\xebD\x81?\xfc\x0aB\x8c\x10\x13z" +
	"$\xfeu\xb9P\xca \x07\x9c\xf5\xf8\xa4\xc0\xedu\xa9" +
	"\xa1\x89\x9f@\xda\\\xb0\x97\xcb\x8e%\xa3u[\x1f\x16" +
	"\xfc\x99\xc5\x84\xb2\x1d\x8c h\x1c\x02\x13o\xa4\x89\x89" +
	"X$^\xa8\xdaN\x06f\xb1\\^\xa9U\xce\xcd~" +
	"\xd72-g\xae\xf4eYM\x10\xe5\x1a\x91\x06\"1" +
	"\xdcC$\x93\x1cr\x9cA\x00\x09\xb5\x001\x9a\"\x92" +
	"C\x1c2\xcb\xc0\x0b\x16\xda\x88\xa1\x8d\xd0\x97\xb7,\xc7" +
	"E;!\xc7\x81\x181u\x0cr\x98?\xa3\xbd>V" +
	"\x9f\x08\x96\x8aj\x0b\xa2\xde\x1b!\x92\x19\x0e\xf9\x01\x83" +
	"\x9f4\xf7&\x91\xccr\xc8\x1c\x83`H\x80\x11\x89\x0f" +
	"\xd5\x8f\xb3\x1cr\x91!^\xb1m\xc7/\x10\xa9V\x8b" +
	"\xd0\x89A'D\\{\x0d\xad\xc4\xd0\xfa\x8a\x0e\x0aI" +
	"\xd2\xcc\xe5\x9d\xfc\xaa+\xb5\xa0El\x9aHF9d" +
	"\x82\xe1\xbb\xaf\xf2%\xabh;\x10\xde\xdd\xee\xe3w\x12" +
	"w.\x1c\x11\x01\xa2\xc9\x91796\xe8&\x17l\xb7" +
	"V\xac\xc2m\xa6\x98\x0e)\x06\x10{N!N1\x98" +
	"N}\xc5\xe8\x08\x17O@\x07\x81\x97W\x00b@S" +
	"d\xe4\xec\x10\x8d@\x97|\x81\xff \xd5{\x1cS\x8f" +
	"-\xa8t\xb6v\xb3\xa6A\x82\xa8\x99E\xea\x94E\x92" +
	"\xa1O\x81\x0e\x96\xdb\x11~\x0d\x08/\xac\xf9\x1c \xe7" +
	"9\xa7C\xca\xa6r\x9e\xcb\xfaK|\x1e\x00\x00\xff\xff" +
	"\xe7\x9c?\xc7"

func init() {
	schemas.Register(schema_fcf6ac08e448a6ac,
		0x827cea1632b4d5b2,
		0x8a1df0335afc249a,
		0xa19185ea4a523225,
		0xcdcf42beb2537d20,
		0xd929e054f82b286c,
		0xe54acc44b61fd7ef,
		0xe6df611247a8fc13,
		0xe75e468c2155a973,
		0xe821e7b2cfcf4e20,
		0xf495a555c9344000)
}
