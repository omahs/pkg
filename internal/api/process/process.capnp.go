// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xaf2e5ebaa58175d2

func (c Executor) Spawn(ctx context.Context, params func(Executor_spawn_Params) error) (Executor_spawn_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "spawn",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_spawn_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_spawn_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Spawn(context.Context, Executor_spawn) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "spawn",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Spawn(ctx, Executor_spawn{call})
		},
	})

	return methods
}

// Executor_spawn holds the state for a server call to Executor.spawn.
// See server.Call for documentation.
type Executor_spawn struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_spawn) Args() Executor_spawn_Params {
	return Executor_spawn_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_spawn) AllocResults() (Executor_spawn_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_spawn_Params capnp.Struct

// Executor_spawn_Params_TypeID is the unique identifier for the type Executor_spawn_Params.
const Executor_spawn_Params_TypeID = 0xf20b3dea95929312

func NewExecutor_spawn_Params(s *capnp.Segment) (Executor_spawn_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_spawn_Params(st), err
}

func NewRootExecutor_spawn_Params(s *capnp.Segment) (Executor_spawn_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_spawn_Params(st), err
}

func ReadRootExecutor_spawn_Params(msg *capnp.Message) (Executor_spawn_Params, error) {
	root, err := msg.Root()
	return Executor_spawn_Params(root.Struct()), err
}

func (s Executor_spawn_Params) String() string {
	str, _ := text.Marshal(0xf20b3dea95929312, capnp.Struct(s))
	return str
}

func (s Executor_spawn_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_spawn_Params) DecodeFromPtr(p capnp.Ptr) Executor_spawn_Params {
	return Executor_spawn_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_spawn_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_spawn_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_spawn_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_spawn_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_spawn_Params) ByteCode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_spawn_Params) HasByteCode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_spawn_Params) SetByteCode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_spawn_Params) EntryPoint() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextDefault("run"), err
}

func (s Executor_spawn_Params) HasEntryPoint() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_spawn_Params) EntryPointBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytesDefault("run"), err
}

func (s Executor_spawn_Params) SetEntryPoint(v string) error {
	return capnp.Struct(s).SetNewText(1, v)
}

// Executor_spawn_Params_List is a list of Executor_spawn_Params.
type Executor_spawn_Params_List = capnp.StructList[Executor_spawn_Params]

// NewExecutor_spawn_Params creates a new list of Executor_spawn_Params.
func NewExecutor_spawn_Params_List(s *capnp.Segment, sz int32) (Executor_spawn_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Executor_spawn_Params](l), err
}

// Executor_spawn_Params_Future is a wrapper for a Executor_spawn_Params promised by a client call.
type Executor_spawn_Params_Future struct{ *capnp.Future }

func (f Executor_spawn_Params_Future) Struct() (Executor_spawn_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_spawn_Params(p.Struct()), err
}

type Executor_spawn_Results capnp.Struct

// Executor_spawn_Results_TypeID is the unique identifier for the type Executor_spawn_Results.
const Executor_spawn_Results_TypeID = 0xbb4f16b0a7d2d09b

func NewExecutor_spawn_Results(s *capnp.Segment) (Executor_spawn_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(st), err
}

func NewRootExecutor_spawn_Results(s *capnp.Segment) (Executor_spawn_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(st), err
}

func ReadRootExecutor_spawn_Results(msg *capnp.Message) (Executor_spawn_Results, error) {
	root, err := msg.Root()
	return Executor_spawn_Results(root.Struct()), err
}

func (s Executor_spawn_Results) String() string {
	str, _ := text.Marshal(0xbb4f16b0a7d2d09b, capnp.Struct(s))
	return str
}

func (s Executor_spawn_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_spawn_Results) DecodeFromPtr(p capnp.Ptr) Executor_spawn_Results {
	return Executor_spawn_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_spawn_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_spawn_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_spawn_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_spawn_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_spawn_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_spawn_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_spawn_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_spawn_Results_List is a list of Executor_spawn_Results.
type Executor_spawn_Results_List = capnp.StructList[Executor_spawn_Results]

// NewExecutor_spawn_Results creates a new list of Executor_spawn_Results.
func NewExecutor_spawn_Results_List(s *capnp.Segment, sz int32) (Executor_spawn_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_spawn_Results](l), err
}

// Executor_spawn_Results_Future is a wrapper for a Executor_spawn_Results promised by a client call.
type Executor_spawn_Results_Future struct{ *capnp.Future }

func (f Executor_spawn_Results_Future) Struct() (Executor_spawn_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_spawn_Results(p.Struct()), err
}
func (p Executor_spawn_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Start(ctx context.Context, params func(Process_start_Params) error) (Process_start_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "start",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_start_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_start_Results_Future{Future: ans.Future()}, release
}
func (c Process) Stop(ctx context.Context, params func(Process_stop_Params) error) (Process_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_stop_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_stop_Results_Future{Future: ans.Future()}, release
}
func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Start(context.Context, Process_start) error

	Stop(context.Context, Process_stop) error

	Wait(context.Context, Process_wait) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "start",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Start(ctx, Process_start{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Process_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	return methods
}

// Process_start holds the state for a server call to Process.start.
// See server.Call for documentation.
type Process_start struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_start) Args() Process_start_Params {
	return Process_start_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_start) AllocResults() (Process_start_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(r), err
}

// Process_stop holds the state for a server call to Process.stop.
// See server.Call for documentation.
type Process_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_stop) Args() Process_stop_Params {
	return Process_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_stop) AllocResults() (Process_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(r), err
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_start_Params capnp.Struct

// Process_start_Params_TypeID is the unique identifier for the type Process_start_Params.
const Process_start_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_start_Params(s *capnp.Segment) (Process_start_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Params(st), err
}

func NewRootProcess_start_Params(s *capnp.Segment) (Process_start_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Params(st), err
}

func ReadRootProcess_start_Params(msg *capnp.Message) (Process_start_Params, error) {
	root, err := msg.Root()
	return Process_start_Params(root.Struct()), err
}

func (s Process_start_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_start_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_start_Params) DecodeFromPtr(p capnp.Ptr) Process_start_Params {
	return Process_start_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_start_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_start_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_start_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_start_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_start_Params_List is a list of Process_start_Params.
type Process_start_Params_List = capnp.StructList[Process_start_Params]

// NewProcess_start_Params creates a new list of Process_start_Params.
func NewProcess_start_Params_List(s *capnp.Segment, sz int32) (Process_start_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_start_Params](l), err
}

// Process_start_Params_Future is a wrapper for a Process_start_Params promised by a client call.
type Process_start_Params_Future struct{ *capnp.Future }

func (f Process_start_Params_Future) Struct() (Process_start_Params, error) {
	p, err := f.Future.Ptr()
	return Process_start_Params(p.Struct()), err
}

type Process_start_Results capnp.Struct

// Process_start_Results_TypeID is the unique identifier for the type Process_start_Results.
const Process_start_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_start_Results(s *capnp.Segment) (Process_start_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(st), err
}

func NewRootProcess_start_Results(s *capnp.Segment) (Process_start_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(st), err
}

func ReadRootProcess_start_Results(msg *capnp.Message) (Process_start_Results, error) {
	root, err := msg.Root()
	return Process_start_Results(root.Struct()), err
}

func (s Process_start_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_start_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_start_Results) DecodeFromPtr(p capnp.Ptr) Process_start_Results {
	return Process_start_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_start_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_start_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_start_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_start_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_start_Results_List is a list of Process_start_Results.
type Process_start_Results_List = capnp.StructList[Process_start_Results]

// NewProcess_start_Results creates a new list of Process_start_Results.
func NewProcess_start_Results_List(s *capnp.Segment, sz int32) (Process_start_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_start_Results](l), err
}

// Process_start_Results_Future is a wrapper for a Process_start_Results promised by a client call.
type Process_start_Results_Future struct{ *capnp.Future }

func (f Process_start_Results_Future) Struct() (Process_start_Results, error) {
	p, err := f.Future.Ptr()
	return Process_start_Results(p.Struct()), err
}

type Process_stop_Params capnp.Struct

// Process_stop_Params_TypeID is the unique identifier for the type Process_stop_Params.
const Process_stop_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_stop_Params(s *capnp.Segment) (Process_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Params(st), err
}

func NewRootProcess_stop_Params(s *capnp.Segment) (Process_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Params(st), err
}

func ReadRootProcess_stop_Params(msg *capnp.Message) (Process_stop_Params, error) {
	root, err := msg.Root()
	return Process_stop_Params(root.Struct()), err
}

func (s Process_stop_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_stop_Params) DecodeFromPtr(p capnp.Ptr) Process_stop_Params {
	return Process_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_stop_Params_List is a list of Process_stop_Params.
type Process_stop_Params_List = capnp.StructList[Process_stop_Params]

// NewProcess_stop_Params creates a new list of Process_stop_Params.
func NewProcess_stop_Params_List(s *capnp.Segment, sz int32) (Process_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stop_Params](l), err
}

// Process_stop_Params_Future is a wrapper for a Process_stop_Params promised by a client call.
type Process_stop_Params_Future struct{ *capnp.Future }

func (f Process_stop_Params_Future) Struct() (Process_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Process_stop_Params(p.Struct()), err
}

type Process_stop_Results capnp.Struct

// Process_stop_Results_TypeID is the unique identifier for the type Process_stop_Results.
const Process_stop_Results_TypeID = 0xc53168b273d497ee

func NewProcess_stop_Results(s *capnp.Segment) (Process_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(st), err
}

func NewRootProcess_stop_Results(s *capnp.Segment) (Process_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(st), err
}

func ReadRootProcess_stop_Results(msg *capnp.Message) (Process_stop_Results, error) {
	root, err := msg.Root()
	return Process_stop_Results(root.Struct()), err
}

func (s Process_stop_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_stop_Results) DecodeFromPtr(p capnp.Ptr) Process_stop_Results {
	return Process_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_stop_Results_List is a list of Process_stop_Results.
type Process_stop_Results_List = capnp.StructList[Process_stop_Results]

// NewProcess_stop_Results creates a new list of Process_stop_Results.
func NewProcess_stop_Results_List(s *capnp.Segment, sz int32) (Process_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stop_Results](l), err
}

// Process_stop_Results_Future is a wrapper for a Process_stop_Results promised by a client call.
type Process_stop_Results_Future struct{ *capnp.Future }

func (f Process_stop_Results_Future) Struct() (Process_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Process_stop_Results(p.Struct()), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xd22f75df06c187e8

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xd22f75df06c187e8, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0x9d6074459fa0602b

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0x9d6074459fa0602b, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Process_wait_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_wait_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Process_wait_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda|\x92?h\x14A\x14\xc6\xdf7\xbb\x97\x0d\x98" +
	"3L6FLs\x18#\x9a\x88\xc9]b\xa1\xa2\xe6" +
	"P\x8e@\x1aw\xec\x14\x94\xac\xe7\x82\x81\xbb\xdbs\xff" +
	"p\xb9B$\x85X\xd9(AP\x82iB,DC" +
	"\xd4\xc2X\xa5\x10[=\x85\x80\x16\x82\"\xa8E\x10;" +
	"\xab\x95\xd9\xbb\xdd\\\xa2\x97n\x86\xef\xcd\xf7~\xef\x9b" +
	"\x97>\x85\xac\x9aI\xae\xa9\xc4\xc4\xd1D[phr" +
	"\xfea\xce\x9b\x9c#\xde\x03\xa2\x044\xa2Q\xc1zA" +
	"\xd0\xcf\xb31BP\xf3g\x16V.\x0d=%\xbeS" +
	"\x09\xf2\x95\x03\x95\xcc7q\x9f\x08z\x95\xad\xe83L" +
	"#\xd2\xaf\xb3q}A\x9e\x82\x07ok\x8bK=g" +
	"_\x11\xdf\x1d\xbb\xddf\x83\xd2m6t[\xbf\xf7\xc1" +
	"]\xbe\x9ay]o\xa7J\xfd\x85\xec\xa6\x06\xdfo\xad" +
	"\xb6}\xf6\x87kM\xca\x1c\xeb\x92\xca\xe3\xf1t\xff\xfc" +
	"\xf3\xc1\xb5&\xe5&\xeb\x93\xcah\xdb\xfeG\xef\x7f\xed" +
	"\xfb\xf8\x0f[\x91-\xeb~\xc8v\x8d\xbd\xd1\x7f\x84l" +
	"\xe3\x17\x87\x97\xf6<Y\\o\xb2yWo\xd0u\xf7" +
	"\xce\xec\xcf\x93;~7\xa8e\xf5\xe8K\xd9\x01\xfa*" +
	"\xab\x10\x82\xaf\xcf>\xb5\x7f\x99\x98\xfa\xd3\xf4t@\xe9" +
	"\x05\xa5\x83\xb2c\xe7-\xd7\x1dR\xf2f\xb9T>n" +
	"4\xae\x15s\xca\xeb?g\xb9~A\xf1\\\xa1**" +
	"\x91\x0a\"\x9e\x1c!\x12\xed\x0aD7C\xcar\x1c\xdb" +
	"A\x071t\x10b'\xd4\x9dr\xd3cV\xde\xf7l" +
	"\xc7\x00\x84\xaa$\x88bLD)s>B\x8c'\xb4" +
	"\x94[6+\xa5,\x0c`+Pn\xba\xee2\x14\x96" +
	"H\xa4N\xbf\xb0\x19\xe9\xf4\x06\xd2\x8d\xc6k\xf0\x8dh" +
	"\x09\xe0\x84V\x83\xba\x9e]\x8e\x07\xdd6\x0d\xc3t\xcc" +
	"\"\xdc\xd6F\xa6S\x8fL+49!\xaaJ\x85w" +
	"\x19FG\x18F\xf4%\x88\xb6\x83\x0b\x19FN\x03\xe2" +
	"\x9fF\xb4m\xfc\xd8 1~X\x03\x8b\xd7\x0c\xd1\xe2" +
	"\xf3\xbdR\xdb\xa5\xa5B\x82,:\xe5HYtJ\xe8" +
	"\xffF\xbai\xf4\x16Sm\x89\xdd0\x1d\xcd,\xba\xa2" +
	"=N}`\x82H\x1cT \x8e0p\xa0\x1b\x00x" +
	"\xe6\x02\x91H+\x10'\x18\x82\xcbU\xcf:c_\xb1" +
	"\x88\x08IbH\x12\x02\xab\xe49U\xc3\x9e\"\xa5\xe4" +
	"5\x16\x878\xfa4\xc7/m\x9f\xab\xc4T\x8a\xee\xdf" +
	"\x00\x00\x00\xff\xff\xb0\x17*\xd4"

func init() {
	schemas.Register(schema_9a51e53177277763,
		0x9d6074459fa0602b,
		0xaf2e5ebaa58175d2,
		0xbb4f16b0a7d2d09b,
		0xc53168b273d497ee,
		0xd22f75df06c187e8,
		0xd72ab4a0243047ac,
		0xda23f0d3a8250633,
		0xeea7ae19b02f5d47,
		0xf20b3dea95929312,
		0xf9694ae208dbb3e3)
}
