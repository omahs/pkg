// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	iostream "github.com/wetware/ww/internal/api/iostream"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xaf2e5ebaa58175d2

func (c Executor) Spawn(ctx context.Context, params func(Executor_spawn_Params) error) (Executor_spawn_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "api/process.capnp:Executor",
			MethodName:    "spawn",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_spawn_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_spawn_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Spawn(context.Context, Executor_spawn) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "api/process.capnp:Executor",
			MethodName:    "spawn",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Spawn(ctx, Executor_spawn{call})
		},
	})

	return methods
}

// Executor_spawn holds the state for a server call to Executor.spawn.
// See server.Call for documentation.
type Executor_spawn struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_spawn) Args() Executor_spawn_Params {
	return Executor_spawn_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_spawn) AllocResults() (Executor_spawn_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_spawn_Params capnp.Struct

// Executor_spawn_Params_TypeID is the unique identifier for the type Executor_spawn_Params.
const Executor_spawn_Params_TypeID = 0xf20b3dea95929312

func NewExecutor_spawn_Params(s *capnp.Segment) (Executor_spawn_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_spawn_Params(st), err
}

func NewRootExecutor_spawn_Params(s *capnp.Segment) (Executor_spawn_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_spawn_Params(st), err
}

func ReadRootExecutor_spawn_Params(msg *capnp.Message) (Executor_spawn_Params, error) {
	root, err := msg.Root()
	return Executor_spawn_Params(root.Struct()), err
}

func (s Executor_spawn_Params) String() string {
	str, _ := text.Marshal(0xf20b3dea95929312, capnp.Struct(s))
	return str
}

func (s Executor_spawn_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_spawn_Params) DecodeFromPtr(p capnp.Ptr) Executor_spawn_Params {
	return Executor_spawn_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_spawn_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_spawn_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_spawn_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_spawn_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_spawn_Params) Binary() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_spawn_Params) HasBinary() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_spawn_Params) SetBinary(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_spawn_Params) Entryfunction() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Executor_spawn_Params) HasEntryfunction() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_spawn_Params) EntryfunctionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Executor_spawn_Params) SetEntryfunction(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Executor_spawn_Params_List is a list of Executor_spawn_Params.
type Executor_spawn_Params_List = capnp.StructList[Executor_spawn_Params]

// NewExecutor_spawn_Params creates a new list of Executor_spawn_Params.
func NewExecutor_spawn_Params_List(s *capnp.Segment, sz int32) (Executor_spawn_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Executor_spawn_Params](l), err
}

// Executor_spawn_Params_Future is a wrapper for a Executor_spawn_Params promised by a client call.
type Executor_spawn_Params_Future struct{ *capnp.Future }

func (f Executor_spawn_Params_Future) Struct() (Executor_spawn_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_spawn_Params(p.Struct()), err
}

type Executor_spawn_Results capnp.Struct

// Executor_spawn_Results_TypeID is the unique identifier for the type Executor_spawn_Results.
const Executor_spawn_Results_TypeID = 0xbb4f16b0a7d2d09b

func NewExecutor_spawn_Results(s *capnp.Segment) (Executor_spawn_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(st), err
}

func NewRootExecutor_spawn_Results(s *capnp.Segment) (Executor_spawn_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_spawn_Results(st), err
}

func ReadRootExecutor_spawn_Results(msg *capnp.Message) (Executor_spawn_Results, error) {
	root, err := msg.Root()
	return Executor_spawn_Results(root.Struct()), err
}

func (s Executor_spawn_Results) String() string {
	str, _ := text.Marshal(0xbb4f16b0a7d2d09b, capnp.Struct(s))
	return str
}

func (s Executor_spawn_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_spawn_Results) DecodeFromPtr(p capnp.Ptr) Executor_spawn_Results {
	return Executor_spawn_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_spawn_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_spawn_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_spawn_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_spawn_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_spawn_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_spawn_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_spawn_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_spawn_Results_List is a list of Executor_spawn_Results.
type Executor_spawn_Results_List = capnp.StructList[Executor_spawn_Results]

// NewExecutor_spawn_Results creates a new list of Executor_spawn_Results.
func NewExecutor_spawn_Results_List(s *capnp.Segment, sz int32) (Executor_spawn_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_spawn_Results](l), err
}

// Executor_spawn_Results_Future is a wrapper for a Executor_spawn_Results promised by a client call.
type Executor_spawn_Results_Future struct{ *capnp.Future }

func (f Executor_spawn_Results_Future) Struct() (Executor_spawn_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_spawn_Results(p.Struct()), err
}
func (p Executor_spawn_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Start(ctx context.Context, params func(Process_start_Params) error) (Process_start_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "start",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_start_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_start_Results_Future{Future: ans.Future()}, release
}
func (c Process) Stop(ctx context.Context, params func(Process_stop_Params) error) (Process_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_stop_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_stop_Results_Future{Future: ans.Future()}, release
}
func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release
}
func (c Process) Close(ctx context.Context, params func(Process_close_Params) error) (Process_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_close_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_close_Results_Future{Future: ans.Future()}, release
}
func (c Process) Input(ctx context.Context, params func(Process_input_Params) error) (Process_input_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      4,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "input",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_input_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_input_Results_Future{Future: ans.Future()}, release
}
func (c Process) Output(ctx context.Context, params func(Process_output_Params) error) (Process_output_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      5,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "output",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_output_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_output_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Start(context.Context, Process_start) error

	Stop(context.Context, Process_stop) error

	Wait(context.Context, Process_wait) error

	Close(context.Context, Process_close) error

	Input(context.Context, Process_input) error

	Output(context.Context, Process_output) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "start",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Start(ctx, Process_start{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Process_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      2,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      3,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Process_close{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      4,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "input",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Input(ctx, Process_input{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      5,
			InterfaceName: "api/process.capnp:Process",
			MethodName:    "output",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Output(ctx, Process_output{call})
		},
	})

	return methods
}

// Process_start holds the state for a server call to Process.start.
// See server.Call for documentation.
type Process_start struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_start) Args() Process_start_Params {
	return Process_start_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_start) AllocResults() (Process_start_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(r), err
}

// Process_stop holds the state for a server call to Process.stop.
// See server.Call for documentation.
type Process_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_stop) Args() Process_stop_Params {
	return Process_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_stop) AllocResults() (Process_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(r), err
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(r), err
}

// Process_close holds the state for a server call to Process.close.
// See server.Call for documentation.
type Process_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_close) Args() Process_close_Params {
	return Process_close_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_close) AllocResults() (Process_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_close_Results(r), err
}

// Process_input holds the state for a server call to Process.input.
// See server.Call for documentation.
type Process_input struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_input) Args() Process_input_Params {
	return Process_input_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_input) AllocResults() (Process_input_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_input_Results(r), err
}

// Process_output holds the state for a server call to Process.output.
// See server.Call for documentation.
type Process_output struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_output) Args() Process_output_Params {
	return Process_output_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_output) AllocResults() (Process_output_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_output_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_start_Params capnp.Struct

// Process_start_Params_TypeID is the unique identifier for the type Process_start_Params.
const Process_start_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_start_Params(s *capnp.Segment) (Process_start_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Params(st), err
}

func NewRootProcess_start_Params(s *capnp.Segment) (Process_start_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Params(st), err
}

func ReadRootProcess_start_Params(msg *capnp.Message) (Process_start_Params, error) {
	root, err := msg.Root()
	return Process_start_Params(root.Struct()), err
}

func (s Process_start_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_start_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_start_Params) DecodeFromPtr(p capnp.Ptr) Process_start_Params {
	return Process_start_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_start_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_start_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_start_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_start_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_start_Params_List is a list of Process_start_Params.
type Process_start_Params_List = capnp.StructList[Process_start_Params]

// NewProcess_start_Params creates a new list of Process_start_Params.
func NewProcess_start_Params_List(s *capnp.Segment, sz int32) (Process_start_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_start_Params](l), err
}

// Process_start_Params_Future is a wrapper for a Process_start_Params promised by a client call.
type Process_start_Params_Future struct{ *capnp.Future }

func (f Process_start_Params_Future) Struct() (Process_start_Params, error) {
	p, err := f.Future.Ptr()
	return Process_start_Params(p.Struct()), err
}

type Process_start_Results capnp.Struct

// Process_start_Results_TypeID is the unique identifier for the type Process_start_Results.
const Process_start_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_start_Results(s *capnp.Segment) (Process_start_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(st), err
}

func NewRootProcess_start_Results(s *capnp.Segment) (Process_start_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_start_Results(st), err
}

func ReadRootProcess_start_Results(msg *capnp.Message) (Process_start_Results, error) {
	root, err := msg.Root()
	return Process_start_Results(root.Struct()), err
}

func (s Process_start_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_start_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_start_Results) DecodeFromPtr(p capnp.Ptr) Process_start_Results {
	return Process_start_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_start_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_start_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_start_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_start_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_start_Results_List is a list of Process_start_Results.
type Process_start_Results_List = capnp.StructList[Process_start_Results]

// NewProcess_start_Results creates a new list of Process_start_Results.
func NewProcess_start_Results_List(s *capnp.Segment, sz int32) (Process_start_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_start_Results](l), err
}

// Process_start_Results_Future is a wrapper for a Process_start_Results promised by a client call.
type Process_start_Results_Future struct{ *capnp.Future }

func (f Process_start_Results_Future) Struct() (Process_start_Results, error) {
	p, err := f.Future.Ptr()
	return Process_start_Results(p.Struct()), err
}

type Process_stop_Params capnp.Struct

// Process_stop_Params_TypeID is the unique identifier for the type Process_stop_Params.
const Process_stop_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_stop_Params(s *capnp.Segment) (Process_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Params(st), err
}

func NewRootProcess_stop_Params(s *capnp.Segment) (Process_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Params(st), err
}

func ReadRootProcess_stop_Params(msg *capnp.Message) (Process_stop_Params, error) {
	root, err := msg.Root()
	return Process_stop_Params(root.Struct()), err
}

func (s Process_stop_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_stop_Params) DecodeFromPtr(p capnp.Ptr) Process_stop_Params {
	return Process_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_stop_Params_List is a list of Process_stop_Params.
type Process_stop_Params_List = capnp.StructList[Process_stop_Params]

// NewProcess_stop_Params creates a new list of Process_stop_Params.
func NewProcess_stop_Params_List(s *capnp.Segment, sz int32) (Process_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stop_Params](l), err
}

// Process_stop_Params_Future is a wrapper for a Process_stop_Params promised by a client call.
type Process_stop_Params_Future struct{ *capnp.Future }

func (f Process_stop_Params_Future) Struct() (Process_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Process_stop_Params(p.Struct()), err
}

type Process_stop_Results capnp.Struct

// Process_stop_Results_TypeID is the unique identifier for the type Process_stop_Results.
const Process_stop_Results_TypeID = 0xc53168b273d497ee

func NewProcess_stop_Results(s *capnp.Segment) (Process_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(st), err
}

func NewRootProcess_stop_Results(s *capnp.Segment) (Process_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_stop_Results(st), err
}

func ReadRootProcess_stop_Results(msg *capnp.Message) (Process_stop_Results, error) {
	root, err := msg.Root()
	return Process_stop_Results(root.Struct()), err
}

func (s Process_stop_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_stop_Results) DecodeFromPtr(p capnp.Ptr) Process_stop_Results {
	return Process_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_stop_Results_List is a list of Process_stop_Results.
type Process_stop_Results_List = capnp.StructList[Process_stop_Results]

// NewProcess_stop_Results creates a new list of Process_stop_Results.
func NewProcess_stop_Results_List(s *capnp.Segment, sz int32) (Process_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_stop_Results](l), err
}

// Process_stop_Results_Future is a wrapper for a Process_stop_Results promised by a client call.
type Process_stop_Results_Future struct{ *capnp.Future }

func (f Process_stop_Results_Future) Struct() (Process_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Process_stop_Results(p.Struct()), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xd22f75df06c187e8

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xd22f75df06c187e8, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0x9d6074459fa0602b

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0x9d6074459fa0602b, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Process_wait_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_wait_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Process_wait_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_close_Params capnp.Struct

// Process_close_Params_TypeID is the unique identifier for the type Process_close_Params.
const Process_close_Params_TypeID = 0x86e3410d1abd406b

func NewProcess_close_Params(s *capnp.Segment) (Process_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_close_Params(st), err
}

func NewRootProcess_close_Params(s *capnp.Segment) (Process_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_close_Params(st), err
}

func ReadRootProcess_close_Params(msg *capnp.Message) (Process_close_Params, error) {
	root, err := msg.Root()
	return Process_close_Params(root.Struct()), err
}

func (s Process_close_Params) String() string {
	str, _ := text.Marshal(0x86e3410d1abd406b, capnp.Struct(s))
	return str
}

func (s Process_close_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_close_Params) DecodeFromPtr(p capnp.Ptr) Process_close_Params {
	return Process_close_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_close_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_close_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_close_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_close_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_close_Params_List is a list of Process_close_Params.
type Process_close_Params_List = capnp.StructList[Process_close_Params]

// NewProcess_close_Params creates a new list of Process_close_Params.
func NewProcess_close_Params_List(s *capnp.Segment, sz int32) (Process_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_close_Params](l), err
}

// Process_close_Params_Future is a wrapper for a Process_close_Params promised by a client call.
type Process_close_Params_Future struct{ *capnp.Future }

func (f Process_close_Params_Future) Struct() (Process_close_Params, error) {
	p, err := f.Future.Ptr()
	return Process_close_Params(p.Struct()), err
}

type Process_close_Results capnp.Struct

// Process_close_Results_TypeID is the unique identifier for the type Process_close_Results.
const Process_close_Results_TypeID = 0xd93c9aa0627bc93c

func NewProcess_close_Results(s *capnp.Segment) (Process_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_close_Results(st), err
}

func NewRootProcess_close_Results(s *capnp.Segment) (Process_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_close_Results(st), err
}

func ReadRootProcess_close_Results(msg *capnp.Message) (Process_close_Results, error) {
	root, err := msg.Root()
	return Process_close_Results(root.Struct()), err
}

func (s Process_close_Results) String() string {
	str, _ := text.Marshal(0xd93c9aa0627bc93c, capnp.Struct(s))
	return str
}

func (s Process_close_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_close_Results) DecodeFromPtr(p capnp.Ptr) Process_close_Results {
	return Process_close_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_close_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_close_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_close_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_close_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_close_Results_List is a list of Process_close_Results.
type Process_close_Results_List = capnp.StructList[Process_close_Results]

// NewProcess_close_Results creates a new list of Process_close_Results.
func NewProcess_close_Results_List(s *capnp.Segment, sz int32) (Process_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_close_Results](l), err
}

// Process_close_Results_Future is a wrapper for a Process_close_Results promised by a client call.
type Process_close_Results_Future struct{ *capnp.Future }

func (f Process_close_Results_Future) Struct() (Process_close_Results, error) {
	p, err := f.Future.Ptr()
	return Process_close_Results(p.Struct()), err
}

type Process_input_Params capnp.Struct

// Process_input_Params_TypeID is the unique identifier for the type Process_input_Params.
const Process_input_Params_TypeID = 0xb72541d950858a60

func NewProcess_input_Params(s *capnp.Segment) (Process_input_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_input_Params(st), err
}

func NewRootProcess_input_Params(s *capnp.Segment) (Process_input_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_input_Params(st), err
}

func ReadRootProcess_input_Params(msg *capnp.Message) (Process_input_Params, error) {
	root, err := msg.Root()
	return Process_input_Params(root.Struct()), err
}

func (s Process_input_Params) String() string {
	str, _ := text.Marshal(0xb72541d950858a60, capnp.Struct(s))
	return str
}

func (s Process_input_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_input_Params) DecodeFromPtr(p capnp.Ptr) Process_input_Params {
	return Process_input_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_input_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_input_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_input_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_input_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_input_Params_List is a list of Process_input_Params.
type Process_input_Params_List = capnp.StructList[Process_input_Params]

// NewProcess_input_Params creates a new list of Process_input_Params.
func NewProcess_input_Params_List(s *capnp.Segment, sz int32) (Process_input_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_input_Params](l), err
}

// Process_input_Params_Future is a wrapper for a Process_input_Params promised by a client call.
type Process_input_Params_Future struct{ *capnp.Future }

func (f Process_input_Params_Future) Struct() (Process_input_Params, error) {
	p, err := f.Future.Ptr()
	return Process_input_Params(p.Struct()), err
}

type Process_input_Results capnp.Struct

// Process_input_Results_TypeID is the unique identifier for the type Process_input_Results.
const Process_input_Results_TypeID = 0xf589dc1668ea3d8f

func NewProcess_input_Results(s *capnp.Segment) (Process_input_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_input_Results(st), err
}

func NewRootProcess_input_Results(s *capnp.Segment) (Process_input_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Process_input_Results(st), err
}

func ReadRootProcess_input_Results(msg *capnp.Message) (Process_input_Results, error) {
	root, err := msg.Root()
	return Process_input_Results(root.Struct()), err
}

func (s Process_input_Results) String() string {
	str, _ := text.Marshal(0xf589dc1668ea3d8f, capnp.Struct(s))
	return str
}

func (s Process_input_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_input_Results) DecodeFromPtr(p capnp.Ptr) Process_input_Results {
	return Process_input_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_input_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_input_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_input_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_input_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_input_Results) Stdin() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(0)
	return iostream.Stream(p.Interface().Client())
}

func (s Process_input_Results) HasStdin() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_input_Results) SetStdin(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Process_input_Results_List is a list of Process_input_Results.
type Process_input_Results_List = capnp.StructList[Process_input_Results]

// NewProcess_input_Results creates a new list of Process_input_Results.
func NewProcess_input_Results_List(s *capnp.Segment, sz int32) (Process_input_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Process_input_Results](l), err
}

// Process_input_Results_Future is a wrapper for a Process_input_Results promised by a client call.
type Process_input_Results_Future struct{ *capnp.Future }

func (f Process_input_Results_Future) Struct() (Process_input_Results, error) {
	p, err := f.Future.Ptr()
	return Process_input_Results(p.Struct()), err
}
func (p Process_input_Results_Future) Stdin() iostream.Stream {
	return iostream.Stream(p.Future.Field(0, nil).Client())
}

type Process_output_Params capnp.Struct

// Process_output_Params_TypeID is the unique identifier for the type Process_output_Params.
const Process_output_Params_TypeID = 0xf5c2d7ad2dde5570

func NewProcess_output_Params(s *capnp.Segment) (Process_output_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Process_output_Params(st), err
}

func NewRootProcess_output_Params(s *capnp.Segment) (Process_output_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Process_output_Params(st), err
}

func ReadRootProcess_output_Params(msg *capnp.Message) (Process_output_Params, error) {
	root, err := msg.Root()
	return Process_output_Params(root.Struct()), err
}

func (s Process_output_Params) String() string {
	str, _ := text.Marshal(0xf5c2d7ad2dde5570, capnp.Struct(s))
	return str
}

func (s Process_output_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_output_Params) DecodeFromPtr(p capnp.Ptr) Process_output_Params {
	return Process_output_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_output_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_output_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_output_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_output_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_output_Params) Stdout() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(0)
	return iostream.Stream(p.Interface().Client())
}

func (s Process_output_Params) HasStdout() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Process_output_Params) SetStdout(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Process_output_Params) Stderr() iostream.Stream {
	p, _ := capnp.Struct(s).Ptr(1)
	return iostream.Stream(p.Interface().Client())
}

func (s Process_output_Params) HasStderr() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Process_output_Params) SetStderr(v iostream.Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Process_output_Params_List is a list of Process_output_Params.
type Process_output_Params_List = capnp.StructList[Process_output_Params]

// NewProcess_output_Params creates a new list of Process_output_Params.
func NewProcess_output_Params_List(s *capnp.Segment, sz int32) (Process_output_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Process_output_Params](l), err
}

// Process_output_Params_Future is a wrapper for a Process_output_Params promised by a client call.
type Process_output_Params_Future struct{ *capnp.Future }

func (f Process_output_Params_Future) Struct() (Process_output_Params, error) {
	p, err := f.Future.Ptr()
	return Process_output_Params(p.Struct()), err
}
func (p Process_output_Params_Future) Stdout() iostream.Stream {
	return iostream.Stream(p.Future.Field(0, nil).Client())
}

func (p Process_output_Params_Future) Stderr() iostream.Stream {
	return iostream.Stream(p.Future.Field(1, nil).Client())
}

type Process_output_Results capnp.Struct

// Process_output_Results_TypeID is the unique identifier for the type Process_output_Results.
const Process_output_Results_TypeID = 0xeafb60603769c851

func NewProcess_output_Results(s *capnp.Segment) (Process_output_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_output_Results(st), err
}

func NewRootProcess_output_Results(s *capnp.Segment) (Process_output_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_output_Results(st), err
}

func ReadRootProcess_output_Results(msg *capnp.Message) (Process_output_Results, error) {
	root, err := msg.Root()
	return Process_output_Results(root.Struct()), err
}

func (s Process_output_Results) String() string {
	str, _ := text.Marshal(0xeafb60603769c851, capnp.Struct(s))
	return str
}

func (s Process_output_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_output_Results) DecodeFromPtr(p capnp.Ptr) Process_output_Results {
	return Process_output_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_output_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_output_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_output_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_output_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_output_Results_List is a list of Process_output_Results.
type Process_output_Results_List = capnp.StructList[Process_output_Results]

// NewProcess_output_Results creates a new list of Process_output_Results.
func NewProcess_output_Results_List(s *capnp.Segment, sz int32) (Process_output_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_output_Results](l), err
}

// Process_output_Results_Future is a wrapper for a Process_output_Results promised by a client call.
type Process_output_Results_Future struct{ *capnp.Future }

func (f Process_output_Results_Future) Struct() (Process_output_Results, error) {
	p, err := f.Future.Ptr()
	return Process_output_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\x8cToH$u\x18~\xdf\xf9+\xe8\"?" +
	"W$\x0d\xda\x0f\xadT\xd6\xfa7\xa8\x16eGA\x04" +
	"\xbf\xb4#\xf4\xd1\xdaq\xddp\xc8f\xa6\xf9\xc3&%" +
	"%db A!\x91\x11\xd9\x87\xc5>di\x19Q" +
	"!Q\x10\xd4\xb7n\xef\x8f\xe8\x1dw\xa0\x1c\x1c~\x90" +
	"\xe3\xe0>\x1c\xf7a\x8e\xdf\x8c3;\xe7\xde\xae\xf7m" +
	"w\x9ew\x9e\xf7}\x9e\xf7y\xa7\xf7}F\xe2\xfab" +
	"o4\x02#\x7f\xc4\x0b\xee[\xd2nGl\xf8\xe8c" +
	" \x1d\x08\xc0\x89\x00\x03\xab|\x1a\x81s\x9f\xcf\xad\x7f" +
	"3j\xe7\xbe\xf6\x11\x1e)4O!\x8c/\xf2\x19@" +
	"\xb7\xec,\x94~\x7f\xbd\xfbG -\xac\x9b/>S" +
	"\xec\xbb)\xaf\x01`\xbc\xc4\x1f\xc4\xb7y\x11 \xbe\xc9" +
	"\x8f\xc5/\xd3_n\xee\x93\xc5\xec\xfep\xe7\xaf\x91>" +
	"\xbb~\x9f\xaf\xfe/ol\xb5\xbd\xfa\x07\x90'\xc3>" +
	"%~\x9c\xf6\xd9\xf6\xfa\x9c|q\xc9\xfai\xa6\xef\x9f" +
	"\xc8\xab\x17\xfcWo-\xfd%\xdcpz\xca\x11\xe47" +
	"\xbe\x9f\"\xdf\x8f\xf5&\xd7w\xba\xf6\"\xc8\xb7\xfc\x08" +
	"E\x06\xff{oj}mp?\x82,\xfb\xc8\x80\xd0" +
	"\xf9\xdd\xc5\xdbO\x1fT\xe9y\x87/\xc7\xe7\xa9\x8a\x81" +
	"9~\x09\xe3\xaa@\x05\xc9\xff\xaa/\xe5r\xf7\x8f#" +
	"<\xb20Ny\xc6&{\xb6\xda\x7f\xd88\x89 C" +
	"\x827U\xcb\xe7\x9f\xad\x1e\x0f5\xde9\x95\xcaP\xa8" +
	"S\x18\xa1RSB\x11\xd0\xfdt\xe8x\xa6\xed\xda\xf2" +
	"\xdd\xa8\xe7+~\xc1\xaa@\xbd0^\xbb\x9e\xda\xdc\xfb" +
	";(\xf0\x18~\xf1\x0bv=\x86\xa3\x9f\xaf6\x1c\x8e" +
	"\xab\xf7\"\xcd\xdb\xc54\xc2\x9f\xaeb\xa8=\x86\xa9\xe7" +
	"\xd9\x82eu\xe7\x15C3\xd2YS\xcf{\xfffu" +
	"\xab\x90\xccd\x15Sy\xdb\xaaWXTT;9\x91" +
	")X\xce\xacm\xc9\x1c\xcb\x01p\x08@b\xfd\x00r" +
	"\x03\x8br+\x83\x89\x82i\xea&6\x01\x83M\x80!" +
	"\x1bSa\x1b}\xb7\x90wlV7\xb3\x882\xc7\xf2" +
	"\x00\xa13\x18\xa4\x81\x90~`\x08/&,C)j" +
	"\x12f\x11\xeb\x0d\xa6j\x86cW)\xe0\xce\xf6\xd4\xcd" +
	"n\x8f/9\xe1K\x00\x88\x8a\x18\xa9\x88\xf8\xc0\xf0\x89" +
	"\x91Tb\x01\x88\x04\xeaNa\xd9\xba\x11\xdas\xae\x8f" +
	"\xd9\xc4\xc3\xd36=\x8aP1\xedp\xd8\xa0\xb0\xd6\x02" +
	"\xcf\xabC\x8b\x1a\xfe\x84gx\x90\x13\x0c.\x85lS" +
	"\xc3K\"b\x18`\x0c.\x8f|\xd9\x05\x0cY\x11\x91" +
	"\x09O\x0e\x83\xcf\x03Y\xa0\x98#\"\x1b~K0\xb8" +
	"1\xa2R\xceI\x11\xb9\xf0\xfe1\x888\x91)6*" +
	"\"\x1f\x86\x1a\x83\x9b\"\xaf\xa4\x81!)1\xe1\xe9\x97" +
	"\xb0\x99\x1a+a3\xb5M\xc2\x84\xa7V\xc2\x84\xb7t" +
	"\x093\xbac{?\xa2\x19\xe1\xaaM\xf2\xcb*\xab?" +
	"w\x93g\x17T;N~\xeehz\x820=\x97\x06" +
	"\x90\x93,\xca\xbd\x0c\x12\xc4V\xa4\x0fS&\x80\xfc\x02" +
	"\x8b\xf2\xcb\x0cf\xa6TM1\xe70\x06\x0c\xc6\x00\xdd" +
	"\x82f\x9bso:\x1a$\xf2\xb6\xaakU\xf7\xc3\xd5" +
	"\x0a}\xa0\xa7\xd69Z\xf6\xb4\xaa!q\x0f\x87w\xae" +
	"<u\xd2\xfc\xe1\xd9\x1c\xd7v\xeaqU\xd1\x87\xcf\xb2" +
	"(\xbf\xc8`\xc6\xb2\xa7u\xc7\xaenG\x81\x82i\xd6" +
	"\x99\x83\xad\x15\xff\xd3\xab~\x10\x00\x00\xff\xff\xea\xae\x08" +
	"$"

func init() {
	schemas.Register(schema_9a51e53177277763,
		0x86e3410d1abd406b,
		0x9d6074459fa0602b,
		0xaf2e5ebaa58175d2,
		0xb72541d950858a60,
		0xbb4f16b0a7d2d09b,
		0xc53168b273d497ee,
		0xd22f75df06c187e8,
		0xd72ab4a0243047ac,
		0xd93c9aa0627bc93c,
		0xda23f0d3a8250633,
		0xeafb60603769c851,
		0xeea7ae19b02f5d47,
		0xf20b3dea95929312,
		0xf589dc1668ea3d8f,
		0xf5c2d7ad2dde5570,
		0xf9694ae208dbb3e3)
}
