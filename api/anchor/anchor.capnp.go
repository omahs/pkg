// Code generated by capnpc-go. DO NOT EDIT.

package anchor

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	cluster "github.com/wetware/pkg/api/cluster"
	core "github.com/wetware/pkg/api/core"
	strconv "strconv"
)

type Value capnp.Struct
type Value_Which uint16

const (
	Value_Which_cluster Value_Which = 0
	Value_Which_host    Value_Which = 1
	Value_Which_anchor  Value_Which = 2
)

func (w Value_Which) String() string {
	const s = "clusterhostanchor"
	switch w {
	case Value_Which_cluster:
		return s[0:7]
	case Value_Which_host:
		return s[7:11]
	case Value_Which_anchor:
		return s[11:17]

	}
	return "Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Value_TypeID is the unique identifier for the type Value.
const Value_TypeID = 0xcfaebe761f647d07

func NewValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func NewRootValue(s *capnp.Segment) (Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Value(st), err
}

func ReadRootValue(msg *capnp.Message) (Value, error) {
	root, err := msg.Root()
	return Value(root.Struct()), err
}

func (s Value) String() string {
	str, _ := text.Marshal(0xcfaebe761f647d07, capnp.Struct(s))
	return str
}

func (s Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Value) DecodeFromPtr(p capnp.Ptr) Value {
	return Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Value) Which() Value_Which {
	return Value_Which(capnp.Struct(s).Uint16(0))
}
func (s Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Value) Cluster() cluster.View {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != cluster")
	}
	p, _ := capnp.Struct(s).Ptr(0)
	return cluster.View(p.Interface().Client())
}

func (s Value) HasCluster() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetCluster(v cluster.View) error {
	capnp.Struct(s).SetUint16(0, 0)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Value) Host() (core.Session, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != host")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return core.Session(p.Struct()), err
}

func (s Value) HasHost() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetHost(v core.Session) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHost sets the host field to a newly
// allocated core.Session struct, preferring placement in s's segment.
func (s Value) NewHost() (core.Session, error) {
	capnp.Struct(s).SetUint16(0, 1)
	ss, err := core.NewSession(capnp.Struct(s).Segment())
	if err != nil {
		return core.Session{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Value) Anchor() Anchor {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != anchor")
	}
	p, _ := capnp.Struct(s).Ptr(0)
	return Anchor(p.Interface().Client())
}

func (s Value) HasAnchor() bool {
	if capnp.Struct(s).Uint16(0) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Value) SetAnchor(v Anchor) error {
	capnp.Struct(s).SetUint16(0, 2)
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Value_List is a list of Value.
type Value_List = capnp.StructList[Value]

// NewValue creates a new list of Value.
func NewValue_List(s *capnp.Segment, sz int32) (Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Value](l), err
}

// Value_Future is a wrapper for a Value promised by a client call.
type Value_Future struct{ *capnp.Future }

func (f Value_Future) Struct() (Value, error) {
	p, err := f.Future.Ptr()
	return Value(p.Struct()), err
}
func (p Value_Future) Cluster() cluster.View {
	return cluster.View(p.Future.Field(0, nil).Client())
}

func (p Value_Future) Host() core.Session_Future {
	return core.Session_Future{Future: p.Future.Field(0, nil)}
}
func (p Value_Future) Anchor() Anchor {
	return Anchor(p.Future.Field(0, nil).Client())
}

type Anchor capnp.Client

// Anchor_TypeID is the unique identifier for the type Anchor.
const Anchor_TypeID = 0xe41237e4098ed922

func (c Anchor) Ls(ctx context.Context, params func(Anchor_ls_Params) error) (Anchor_ls_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "ls",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_ls_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_ls_Results_Future{Future: ans.Future()}, release

}

func (c Anchor) Walk(ctx context.Context, params func(Anchor_walk_Params) error) (Anchor_walk_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_walk_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_walk_Results_Future{Future: ans.Future()}, release

}

func (c Anchor) Cell(ctx context.Context, params func(Anchor_cell_Params) error) (Anchor_cell_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      2,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "cell",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_cell_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_cell_Results_Future{Future: ans.Future()}, release

}

func (c Anchor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Anchor) String() string {
	return "Anchor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Anchor) AddRef() Anchor {
	return Anchor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Anchor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Anchor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Anchor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Anchor) DecodeFromPtr(p capnp.Ptr) Anchor {
	return Anchor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Anchor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Anchor) IsSame(other Anchor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Anchor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Anchor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Anchor_Server is a Anchor with a local implementation.
type Anchor_Server interface {
	Ls(context.Context, Anchor_ls) error

	Walk(context.Context, Anchor_walk) error

	Cell(context.Context, Anchor_cell) error
}

// Anchor_NewServer creates a new Server from an implementation of Anchor_Server.
func Anchor_NewServer(s Anchor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Methods(nil, s), s, c)
}

// Anchor_ServerToClient creates a new Client from an implementation of Anchor_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_ServerToClient(s Anchor_Server) Anchor {
	return Anchor(capnp.NewClient(Anchor_NewServer(s)))
}

// Anchor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Methods(methods []server.Method, s Anchor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "ls",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Ls(ctx, Anchor_ls{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      1,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Anchor_walk{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe41237e4098ed922,
			MethodID:      2,
			InterfaceName: "anchor.capnp:Anchor",
			MethodName:    "cell",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cell(ctx, Anchor_cell{call})
		},
	})

	return methods
}

// Anchor_ls holds the state for a server call to Anchor.ls.
// See server.Call for documentation.
type Anchor_ls struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_ls) Args() Anchor_ls_Params {
	return Anchor_ls_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_ls) AllocResults() (Anchor_ls_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results(r), err
}

// Anchor_walk holds the state for a server call to Anchor.walk.
// See server.Call for documentation.
type Anchor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_walk) Args() Anchor_walk_Params {
	return Anchor_walk_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_walk) AllocResults() (Anchor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results(r), err
}

// Anchor_cell holds the state for a server call to Anchor.cell.
// See server.Call for documentation.
type Anchor_cell struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_cell) Args() Anchor_cell_Params {
	return Anchor_cell_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_cell) AllocResults() (Anchor_cell_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_cell_Results(r), err
}

// Anchor_List is a list of Anchor.
type Anchor_List = capnp.CapList[Anchor]

// NewAnchor creates a new list of Anchor.
func NewAnchor_List(s *capnp.Segment, sz int32) (Anchor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Anchor](l), err
}

type Anchor_Child capnp.Struct

// Anchor_Child_TypeID is the unique identifier for the type Anchor_Child.
const Anchor_Child_TypeID = 0xc718781cb2553199

func NewAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child(st), err
}

func NewRootAnchor_Child(s *capnp.Segment) (Anchor_Child, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_Child(st), err
}

func ReadRootAnchor_Child(msg *capnp.Message) (Anchor_Child, error) {
	root, err := msg.Root()
	return Anchor_Child(root.Struct()), err
}

func (s Anchor_Child) String() string {
	str, _ := text.Marshal(0xc718781cb2553199, capnp.Struct(s))
	return str
}

func (s Anchor_Child) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Child) DecodeFromPtr(p capnp.Ptr) Anchor_Child {
	return Anchor_Child(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Child) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Child) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Child) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Child) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Child) Anchor() Anchor {
	p, _ := capnp.Struct(s).Ptr(0)
	return Anchor(p.Interface().Client())
}

func (s Anchor_Child) HasAnchor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Child) SetAnchor(v Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Anchor_Child) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Anchor_Child) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Anchor_Child) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Anchor_Child) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Anchor_Child_List is a list of Anchor_Child.
type Anchor_Child_List = capnp.StructList[Anchor_Child]

// NewAnchor_Child creates a new list of Anchor_Child.
func NewAnchor_Child_List(s *capnp.Segment, sz int32) (Anchor_Child_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Anchor_Child](l), err
}

// Anchor_Child_Future is a wrapper for a Anchor_Child promised by a client call.
type Anchor_Child_Future struct{ *capnp.Future }

func (f Anchor_Child_Future) Struct() (Anchor_Child, error) {
	p, err := f.Future.Ptr()
	return Anchor_Child(p.Struct()), err
}
func (p Anchor_Child_Future) Anchor() Anchor {
	return Anchor(p.Future.Field(0, nil).Client())
}

type Anchor_Loader capnp.Client

// Anchor_Loader_TypeID is the unique identifier for the type Anchor_Loader.
const Anchor_Loader_TypeID = 0x8a336ac7e2d028c1

func (c Anchor_Loader) Load(ctx context.Context, params func(Anchor_Loader_load_Params) error) (Anchor_Loader_load_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a336ac7e2d028c1,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Loader",
			MethodName:    "load",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Loader_load_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_Loader_load_Results_Future{Future: ans.Future()}, release

}

func (c Anchor_Loader) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Anchor_Loader) String() string {
	return "Anchor_Loader(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Anchor_Loader) AddRef() Anchor_Loader {
	return Anchor_Loader(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Anchor_Loader) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Anchor_Loader) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Anchor_Loader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Anchor_Loader) DecodeFromPtr(p capnp.Ptr) Anchor_Loader {
	return Anchor_Loader(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Anchor_Loader) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Anchor_Loader) IsSame(other Anchor_Loader) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Anchor_Loader) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Anchor_Loader) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Anchor_Loader_Server is a Anchor_Loader with a local implementation.
type Anchor_Loader_Server interface {
	Load(context.Context, Anchor_Loader_load) error
}

// Anchor_Loader_NewServer creates a new Server from an implementation of Anchor_Loader_Server.
func Anchor_Loader_NewServer(s Anchor_Loader_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Loader_Methods(nil, s), s, c)
}

// Anchor_Loader_ServerToClient creates a new Client from an implementation of Anchor_Loader_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_Loader_ServerToClient(s Anchor_Loader_Server) Anchor_Loader {
	return Anchor_Loader(capnp.NewClient(Anchor_Loader_NewServer(s)))
}

// Anchor_Loader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Loader_Methods(methods []server.Method, s Anchor_Loader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a336ac7e2d028c1,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Loader",
			MethodName:    "load",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Load(ctx, Anchor_Loader_load{call})
		},
	})

	return methods
}

// Anchor_Loader_load holds the state for a server call to Anchor_Loader.load.
// See server.Call for documentation.
type Anchor_Loader_load struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Loader_load) Args() Anchor_Loader_load_Params {
	return Anchor_Loader_load_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_Loader_load) AllocResults() (Anchor_Loader_load_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Loader_load_Results(r), err
}

// Anchor_Loader_List is a list of Anchor_Loader.
type Anchor_Loader_List = capnp.CapList[Anchor_Loader]

// NewAnchor_Loader creates a new list of Anchor_Loader.
func NewAnchor_Loader_List(s *capnp.Segment, sz int32) (Anchor_Loader_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Anchor_Loader](l), err
}

type Anchor_Loader_load_Params capnp.Struct

// Anchor_Loader_load_Params_TypeID is the unique identifier for the type Anchor_Loader_load_Params.
const Anchor_Loader_load_Params_TypeID = 0xf8402a904fba165b

func NewAnchor_Loader_load_Params(s *capnp.Segment) (Anchor_Loader_load_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Loader_load_Params(st), err
}

func NewRootAnchor_Loader_load_Params(s *capnp.Segment) (Anchor_Loader_load_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_Loader_load_Params(st), err
}

func ReadRootAnchor_Loader_load_Params(msg *capnp.Message) (Anchor_Loader_load_Params, error) {
	root, err := msg.Root()
	return Anchor_Loader_load_Params(root.Struct()), err
}

func (s Anchor_Loader_load_Params) String() string {
	str, _ := text.Marshal(0xf8402a904fba165b, capnp.Struct(s))
	return str
}

func (s Anchor_Loader_load_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Loader_load_Params) DecodeFromPtr(p capnp.Ptr) Anchor_Loader_load_Params {
	return Anchor_Loader_load_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Loader_load_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Loader_load_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Loader_load_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Loader_load_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Anchor_Loader_load_Params_List is a list of Anchor_Loader_load_Params.
type Anchor_Loader_load_Params_List = capnp.StructList[Anchor_Loader_load_Params]

// NewAnchor_Loader_load_Params creates a new list of Anchor_Loader_load_Params.
func NewAnchor_Loader_load_Params_List(s *capnp.Segment, sz int32) (Anchor_Loader_load_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_Loader_load_Params](l), err
}

// Anchor_Loader_load_Params_Future is a wrapper for a Anchor_Loader_load_Params promised by a client call.
type Anchor_Loader_load_Params_Future struct{ *capnp.Future }

func (f Anchor_Loader_load_Params_Future) Struct() (Anchor_Loader_load_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_Loader_load_Params(p.Struct()), err
}

type Anchor_Loader_load_Results capnp.Struct

// Anchor_Loader_load_Results_TypeID is the unique identifier for the type Anchor_Loader_load_Results.
const Anchor_Loader_load_Results_TypeID = 0xb7ddaffff14d4ea5

func NewAnchor_Loader_load_Results(s *capnp.Segment) (Anchor_Loader_load_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Loader_load_Results(st), err
}

func NewRootAnchor_Loader_load_Results(s *capnp.Segment) (Anchor_Loader_load_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_Loader_load_Results(st), err
}

func ReadRootAnchor_Loader_load_Results(msg *capnp.Message) (Anchor_Loader_load_Results, error) {
	root, err := msg.Root()
	return Anchor_Loader_load_Results(root.Struct()), err
}

func (s Anchor_Loader_load_Results) String() string {
	str, _ := text.Marshal(0xb7ddaffff14d4ea5, capnp.Struct(s))
	return str
}

func (s Anchor_Loader_load_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Loader_load_Results) DecodeFromPtr(p capnp.Ptr) Anchor_Loader_load_Results {
	return Anchor_Loader_load_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Loader_load_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Loader_load_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Loader_load_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Loader_load_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Loader_load_Results) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Anchor_Loader_load_Results) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Loader_load_Results) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Anchor_Loader_load_Results_List is a list of Anchor_Loader_load_Results.
type Anchor_Loader_load_Results_List = capnp.StructList[Anchor_Loader_load_Results]

// NewAnchor_Loader_load_Results creates a new list of Anchor_Loader_load_Results.
func NewAnchor_Loader_load_Results_List(s *capnp.Segment, sz int32) (Anchor_Loader_load_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_Loader_load_Results](l), err
}

// Anchor_Loader_load_Results_Future is a wrapper for a Anchor_Loader_load_Results promised by a client call.
type Anchor_Loader_load_Results_Future struct{ *capnp.Future }

func (f Anchor_Loader_load_Results_Future) Struct() (Anchor_Loader_load_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_Loader_load_Results(p.Struct()), err
}
func (p Anchor_Loader_load_Results_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Anchor_Storer capnp.Client

// Anchor_Storer_TypeID is the unique identifier for the type Anchor_Storer.
const Anchor_Storer_TypeID = 0xab8d091f98599d27

func (c Anchor_Storer) Store(ctx context.Context, params func(Anchor_Storer_store_Params) error) (Anchor_Storer_store_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab8d091f98599d27,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Storer",
			MethodName:    "store",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Anchor_Storer_store_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Anchor_Storer_store_Results_Future{Future: ans.Future()}, release

}

func (c Anchor_Storer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Anchor_Storer) String() string {
	return "Anchor_Storer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Anchor_Storer) AddRef() Anchor_Storer {
	return Anchor_Storer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Anchor_Storer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Anchor_Storer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Anchor_Storer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Anchor_Storer) DecodeFromPtr(p capnp.Ptr) Anchor_Storer {
	return Anchor_Storer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Anchor_Storer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Anchor_Storer) IsSame(other Anchor_Storer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Anchor_Storer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Anchor_Storer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Anchor_Storer_Server is a Anchor_Storer with a local implementation.
type Anchor_Storer_Server interface {
	Store(context.Context, Anchor_Storer_store) error
}

// Anchor_Storer_NewServer creates a new Server from an implementation of Anchor_Storer_Server.
func Anchor_Storer_NewServer(s Anchor_Storer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Anchor_Storer_Methods(nil, s), s, c)
}

// Anchor_Storer_ServerToClient creates a new Client from an implementation of Anchor_Storer_Server.
// The caller is responsible for calling Release on the returned Client.
func Anchor_Storer_ServerToClient(s Anchor_Storer_Server) Anchor_Storer {
	return Anchor_Storer(capnp.NewClient(Anchor_Storer_NewServer(s)))
}

// Anchor_Storer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Anchor_Storer_Methods(methods []server.Method, s Anchor_Storer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab8d091f98599d27,
			MethodID:      0,
			InterfaceName: "anchor.capnp:Anchor.Storer",
			MethodName:    "store",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Store(ctx, Anchor_Storer_store{call})
		},
	})

	return methods
}

// Anchor_Storer_store holds the state for a server call to Anchor_Storer.store.
// See server.Call for documentation.
type Anchor_Storer_store struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Anchor_Storer_store) Args() Anchor_Storer_store_Params {
	return Anchor_Storer_store_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Anchor_Storer_store) AllocResults() (Anchor_Storer_store_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Storer_store_Results(r), err
}

// Anchor_Storer_List is a list of Anchor_Storer.
type Anchor_Storer_List = capnp.CapList[Anchor_Storer]

// NewAnchor_Storer creates a new list of Anchor_Storer.
func NewAnchor_Storer_List(s *capnp.Segment, sz int32) (Anchor_Storer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Anchor_Storer](l), err
}

type Anchor_Storer_store_Params capnp.Struct

// Anchor_Storer_store_Params_TypeID is the unique identifier for the type Anchor_Storer_store_Params.
const Anchor_Storer_store_Params_TypeID = 0xdad77fd0c414d459

func NewAnchor_Storer_store_Params(s *capnp.Segment) (Anchor_Storer_store_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Anchor_Storer_store_Params(st), err
}

func NewRootAnchor_Storer_store_Params(s *capnp.Segment) (Anchor_Storer_store_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Anchor_Storer_store_Params(st), err
}

func ReadRootAnchor_Storer_store_Params(msg *capnp.Message) (Anchor_Storer_store_Params, error) {
	root, err := msg.Root()
	return Anchor_Storer_store_Params(root.Struct()), err
}

func (s Anchor_Storer_store_Params) String() string {
	str, _ := text.Marshal(0xdad77fd0c414d459, capnp.Struct(s))
	return str
}

func (s Anchor_Storer_store_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Storer_store_Params) DecodeFromPtr(p capnp.Ptr) Anchor_Storer_store_Params {
	return Anchor_Storer_store_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Storer_store_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Storer_store_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Storer_store_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Storer_store_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Storer_store_Params) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Anchor_Storer_store_Params) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_Storer_store_Params) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Anchor_Storer_store_Params) Overwrite() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Anchor_Storer_store_Params) SetOverwrite(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Anchor_Storer_store_Params_List is a list of Anchor_Storer_store_Params.
type Anchor_Storer_store_Params_List = capnp.StructList[Anchor_Storer_store_Params]

// NewAnchor_Storer_store_Params creates a new list of Anchor_Storer_store_Params.
func NewAnchor_Storer_store_Params_List(s *capnp.Segment, sz int32) (Anchor_Storer_store_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_Storer_store_Params](l), err
}

// Anchor_Storer_store_Params_Future is a wrapper for a Anchor_Storer_store_Params promised by a client call.
type Anchor_Storer_store_Params_Future struct{ *capnp.Future }

func (f Anchor_Storer_store_Params_Future) Struct() (Anchor_Storer_store_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_Storer_store_Params(p.Struct()), err
}
func (p Anchor_Storer_store_Params_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Anchor_Storer_store_Results capnp.Struct

// Anchor_Storer_store_Results_TypeID is the unique identifier for the type Anchor_Storer_store_Results.
const Anchor_Storer_store_Results_TypeID = 0xe6d4ed829b3ab757

func NewAnchor_Storer_store_Results(s *capnp.Segment) (Anchor_Storer_store_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Storer_store_Results(st), err
}

func NewRootAnchor_Storer_store_Results(s *capnp.Segment) (Anchor_Storer_store_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Anchor_Storer_store_Results(st), err
}

func ReadRootAnchor_Storer_store_Results(msg *capnp.Message) (Anchor_Storer_store_Results, error) {
	root, err := msg.Root()
	return Anchor_Storer_store_Results(root.Struct()), err
}

func (s Anchor_Storer_store_Results) String() string {
	str, _ := text.Marshal(0xe6d4ed829b3ab757, capnp.Struct(s))
	return str
}

func (s Anchor_Storer_store_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_Storer_store_Results) DecodeFromPtr(p capnp.Ptr) Anchor_Storer_store_Results {
	return Anchor_Storer_store_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_Storer_store_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_Storer_store_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_Storer_store_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_Storer_store_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_Storer_store_Results) Succeeded() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Anchor_Storer_store_Results) SetSucceeded(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Anchor_Storer_store_Results_List is a list of Anchor_Storer_store_Results.
type Anchor_Storer_store_Results_List = capnp.StructList[Anchor_Storer_store_Results]

// NewAnchor_Storer_store_Results creates a new list of Anchor_Storer_store_Results.
func NewAnchor_Storer_store_Results_List(s *capnp.Segment, sz int32) (Anchor_Storer_store_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_Storer_store_Results](l), err
}

// Anchor_Storer_store_Results_Future is a wrapper for a Anchor_Storer_store_Results promised by a client call.
type Anchor_Storer_store_Results_Future struct{ *capnp.Future }

func (f Anchor_Storer_store_Results_Future) Struct() (Anchor_Storer_store_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_Storer_store_Results(p.Struct()), err
}

type Anchor_ls_Params capnp.Struct

// Anchor_ls_Params_TypeID is the unique identifier for the type Anchor_ls_Params.
const Anchor_ls_Params_TypeID = 0xc105d085735711e1

func NewAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params(st), err
}

func NewRootAnchor_ls_Params(s *capnp.Segment) (Anchor_ls_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_ls_Params(st), err
}

func ReadRootAnchor_ls_Params(msg *capnp.Message) (Anchor_ls_Params, error) {
	root, err := msg.Root()
	return Anchor_ls_Params(root.Struct()), err
}

func (s Anchor_ls_Params) String() string {
	str, _ := text.Marshal(0xc105d085735711e1, capnp.Struct(s))
	return str
}

func (s Anchor_ls_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_ls_Params) DecodeFromPtr(p capnp.Ptr) Anchor_ls_Params {
	return Anchor_ls_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_ls_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_ls_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_ls_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_ls_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Anchor_ls_Params_List is a list of Anchor_ls_Params.
type Anchor_ls_Params_List = capnp.StructList[Anchor_ls_Params]

// NewAnchor_ls_Params creates a new list of Anchor_ls_Params.
func NewAnchor_ls_Params_List(s *capnp.Segment, sz int32) (Anchor_ls_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_ls_Params](l), err
}

// Anchor_ls_Params_Future is a wrapper for a Anchor_ls_Params promised by a client call.
type Anchor_ls_Params_Future struct{ *capnp.Future }

func (f Anchor_ls_Params_Future) Struct() (Anchor_ls_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_ls_Params(p.Struct()), err
}

type Anchor_ls_Results capnp.Struct

// Anchor_ls_Results_TypeID is the unique identifier for the type Anchor_ls_Results.
const Anchor_ls_Results_TypeID = 0xe325af947f127758

func NewAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results(st), err
}

func NewRootAnchor_ls_Results(s *capnp.Segment) (Anchor_ls_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_ls_Results(st), err
}

func ReadRootAnchor_ls_Results(msg *capnp.Message) (Anchor_ls_Results, error) {
	root, err := msg.Root()
	return Anchor_ls_Results(root.Struct()), err
}

func (s Anchor_ls_Results) String() string {
	str, _ := text.Marshal(0xe325af947f127758, capnp.Struct(s))
	return str
}

func (s Anchor_ls_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_ls_Results) DecodeFromPtr(p capnp.Ptr) Anchor_ls_Results {
	return Anchor_ls_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_ls_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_ls_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_ls_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_ls_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_ls_Results) Children() (Anchor_Child_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Anchor_Child_List(p.List()), err
}

func (s Anchor_ls_Results) HasChildren() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_ls_Results) SetChildren(v Anchor_Child_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Anchor_Child_List, preferring placement in s's segment.
func (s Anchor_ls_Results) NewChildren(n int32) (Anchor_Child_List, error) {
	l, err := NewAnchor_Child_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Anchor_Child_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Anchor_ls_Results_List is a list of Anchor_ls_Results.
type Anchor_ls_Results_List = capnp.StructList[Anchor_ls_Results]

// NewAnchor_ls_Results creates a new list of Anchor_ls_Results.
func NewAnchor_ls_Results_List(s *capnp.Segment, sz int32) (Anchor_ls_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_ls_Results](l), err
}

// Anchor_ls_Results_Future is a wrapper for a Anchor_ls_Results promised by a client call.
type Anchor_ls_Results_Future struct{ *capnp.Future }

func (f Anchor_ls_Results_Future) Struct() (Anchor_ls_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_ls_Results(p.Struct()), err
}

type Anchor_walk_Params capnp.Struct

// Anchor_walk_Params_TypeID is the unique identifier for the type Anchor_walk_Params.
const Anchor_walk_Params_TypeID = 0xb90ffa2761585171

func NewAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params(st), err
}

func NewRootAnchor_walk_Params(s *capnp.Segment) (Anchor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Params(st), err
}

func ReadRootAnchor_walk_Params(msg *capnp.Message) (Anchor_walk_Params, error) {
	root, err := msg.Root()
	return Anchor_walk_Params(root.Struct()), err
}

func (s Anchor_walk_Params) String() string {
	str, _ := text.Marshal(0xb90ffa2761585171, capnp.Struct(s))
	return str
}

func (s Anchor_walk_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_walk_Params) DecodeFromPtr(p capnp.Ptr) Anchor_walk_Params {
	return Anchor_walk_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_walk_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_walk_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_walk_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_walk_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_walk_Params) Path() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Anchor_walk_Params) HasPath() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_walk_Params) PathBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Anchor_walk_Params) SetPath(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Anchor_walk_Params_List is a list of Anchor_walk_Params.
type Anchor_walk_Params_List = capnp.StructList[Anchor_walk_Params]

// NewAnchor_walk_Params creates a new list of Anchor_walk_Params.
func NewAnchor_walk_Params_List(s *capnp.Segment, sz int32) (Anchor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Params](l), err
}

// Anchor_walk_Params_Future is a wrapper for a Anchor_walk_Params promised by a client call.
type Anchor_walk_Params_Future struct{ *capnp.Future }

func (f Anchor_walk_Params_Future) Struct() (Anchor_walk_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_walk_Params(p.Struct()), err
}

type Anchor_walk_Results capnp.Struct

// Anchor_walk_Results_TypeID is the unique identifier for the type Anchor_walk_Results.
const Anchor_walk_Results_TypeID = 0xaec21d58779cc86c

func NewAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results(st), err
}

func NewRootAnchor_walk_Results(s *capnp.Segment) (Anchor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Anchor_walk_Results(st), err
}

func ReadRootAnchor_walk_Results(msg *capnp.Message) (Anchor_walk_Results, error) {
	root, err := msg.Root()
	return Anchor_walk_Results(root.Struct()), err
}

func (s Anchor_walk_Results) String() string {
	str, _ := text.Marshal(0xaec21d58779cc86c, capnp.Struct(s))
	return str
}

func (s Anchor_walk_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_walk_Results) DecodeFromPtr(p capnp.Ptr) Anchor_walk_Results {
	return Anchor_walk_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_walk_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_walk_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_walk_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_walk_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_walk_Results) Anchor() Anchor {
	p, _ := capnp.Struct(s).Ptr(0)
	return Anchor(p.Interface().Client())
}

func (s Anchor_walk_Results) HasAnchor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_walk_Results) SetAnchor(v Anchor) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Anchor_walk_Results_List is a list of Anchor_walk_Results.
type Anchor_walk_Results_List = capnp.StructList[Anchor_walk_Results]

// NewAnchor_walk_Results creates a new list of Anchor_walk_Results.
func NewAnchor_walk_Results_List(s *capnp.Segment, sz int32) (Anchor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Anchor_walk_Results](l), err
}

// Anchor_walk_Results_Future is a wrapper for a Anchor_walk_Results promised by a client call.
type Anchor_walk_Results_Future struct{ *capnp.Future }

func (f Anchor_walk_Results_Future) Struct() (Anchor_walk_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_walk_Results(p.Struct()), err
}
func (p Anchor_walk_Results_Future) Anchor() Anchor {
	return Anchor(p.Future.Field(0, nil).Client())
}

type Anchor_cell_Params capnp.Struct

// Anchor_cell_Params_TypeID is the unique identifier for the type Anchor_cell_Params.
const Anchor_cell_Params_TypeID = 0xd25c03d885e9b059

func NewAnchor_cell_Params(s *capnp.Segment) (Anchor_cell_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_cell_Params(st), err
}

func NewRootAnchor_cell_Params(s *capnp.Segment) (Anchor_cell_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Anchor_cell_Params(st), err
}

func ReadRootAnchor_cell_Params(msg *capnp.Message) (Anchor_cell_Params, error) {
	root, err := msg.Root()
	return Anchor_cell_Params(root.Struct()), err
}

func (s Anchor_cell_Params) String() string {
	str, _ := text.Marshal(0xd25c03d885e9b059, capnp.Struct(s))
	return str
}

func (s Anchor_cell_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_cell_Params) DecodeFromPtr(p capnp.Ptr) Anchor_cell_Params {
	return Anchor_cell_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_cell_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_cell_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_cell_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_cell_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Anchor_cell_Params_List is a list of Anchor_cell_Params.
type Anchor_cell_Params_List = capnp.StructList[Anchor_cell_Params]

// NewAnchor_cell_Params creates a new list of Anchor_cell_Params.
func NewAnchor_cell_Params_List(s *capnp.Segment, sz int32) (Anchor_cell_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Anchor_cell_Params](l), err
}

// Anchor_cell_Params_Future is a wrapper for a Anchor_cell_Params promised by a client call.
type Anchor_cell_Params_Future struct{ *capnp.Future }

func (f Anchor_cell_Params_Future) Struct() (Anchor_cell_Params, error) {
	p, err := f.Future.Ptr()
	return Anchor_cell_Params(p.Struct()), err
}

type Anchor_cell_Results capnp.Struct

// Anchor_cell_Results_TypeID is the unique identifier for the type Anchor_cell_Results.
const Anchor_cell_Results_TypeID = 0xa17b8c469ab105e9

func NewAnchor_cell_Results(s *capnp.Segment) (Anchor_cell_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_cell_Results(st), err
}

func NewRootAnchor_cell_Results(s *capnp.Segment) (Anchor_cell_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Anchor_cell_Results(st), err
}

func ReadRootAnchor_cell_Results(msg *capnp.Message) (Anchor_cell_Results, error) {
	root, err := msg.Root()
	return Anchor_cell_Results(root.Struct()), err
}

func (s Anchor_cell_Results) String() string {
	str, _ := text.Marshal(0xa17b8c469ab105e9, capnp.Struct(s))
	return str
}

func (s Anchor_cell_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Anchor_cell_Results) DecodeFromPtr(p capnp.Ptr) Anchor_cell_Results {
	return Anchor_cell_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Anchor_cell_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Anchor_cell_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Anchor_cell_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Anchor_cell_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Anchor_cell_Results) Loader() Anchor_Loader {
	p, _ := capnp.Struct(s).Ptr(0)
	return Anchor_Loader(p.Interface().Client())
}

func (s Anchor_cell_Results) HasLoader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Anchor_cell_Results) SetLoader(v Anchor_Loader) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Anchor_cell_Results) Storer() Anchor_Storer {
	p, _ := capnp.Struct(s).Ptr(1)
	return Anchor_Storer(p.Interface().Client())
}

func (s Anchor_cell_Results) HasStorer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Anchor_cell_Results) SetStorer(v Anchor_Storer) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Anchor_cell_Results_List is a list of Anchor_cell_Results.
type Anchor_cell_Results_List = capnp.StructList[Anchor_cell_Results]

// NewAnchor_cell_Results creates a new list of Anchor_cell_Results.
func NewAnchor_cell_Results_List(s *capnp.Segment, sz int32) (Anchor_cell_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Anchor_cell_Results](l), err
}

// Anchor_cell_Results_Future is a wrapper for a Anchor_cell_Results promised by a client call.
type Anchor_cell_Results_Future struct{ *capnp.Future }

func (f Anchor_cell_Results_Future) Struct() (Anchor_cell_Results, error) {
	p, err := f.Future.Ptr()
	return Anchor_cell_Results(p.Struct()), err
}
func (p Anchor_cell_Results_Future) Loader() Anchor_Loader {
	return Anchor_Loader(p.Future.Field(0, nil).Client())
}

func (p Anchor_cell_Results_Future) Storer() Anchor_Storer {
	return Anchor_Storer(p.Future.Field(1, nil).Client())
}

const schema_efb5a91f96d44de3 = "x\xda\x8cU]h\x1cU\x14>\xe7\xdeYg&\xec" +
	"vs3[i\xade\x89\xa44\x0d&4\x89P\xbb" +
	" \xbb\xa9\xc6\xda\xd2\xe8\xdehm\xd6\x9f\x87aw`" +
	"\xa3\xd3\xddtv7\xab\x88\x04\x84\xfa *\x0a\"6" +
	"\xda\x07\x85\x82EhT\xa8\xa5\x82BE\x8c/b(" +
	"\x015PP[\x85>\x88\xc6'-\xea\x95{';" +
	"3\xc9&\xd1\xb7\xd9{\xcf~\xe7|\xdfw\xce\xb9{" +
	"\xef\xa29m0\xd1\xdc\x02\x84\xbf\x1b\xbbI\\\xea]" +
	"\xf8q\xfe\x89\xe1\x17\x80\xa5\xa8\xb8\xed\xbb\x97\xcdk\xfb" +
	"\xba\xae\x01\xa0\xd5\xad/Y\xfd\xba\x0e`\xed\xd1\x0fZ" +
	"\\~\x89\xeb\xb1\x0ff\xef}\xf1\x99\xb7\x81\xa5\x10 " +
	"Ft\x80\xe1\xfdz\x07\x02Z#z\x13P\xec>]" +
	"x#m\xbe\xf4^\x1b\xdai}\xc9:\xab\xd0\xce\xe8" +
	"\x07\xad\xaf\x14\x9a\xfb\xe5[\xcd\x89\x9d\x9f\x9d[AC" +
	"\x89v\xdeG\xfbD\xcf\x02\x8a3\xf7\x8f-\x8b\xb9+" +
	"\x17\x80\xed\x08\x02\xae\xe8\x07d\xc0O*\xe0\x04\x9f\xb0" +
	"w\xdfH^\x8c\"\xc4\x0c\"\x03LC\x06\xfc\xc0\x8e" +
	"\xd5N.\xc4.\xf9\x01\x9abc\xfc\x0e\x9a85x" +
	"\xf4\xc3[\x9f\xda6//\xc2B\x15#+a\\\xb6" +
	"\xb6\x1b\xf2k\xab!I\xe9\xcf\x96\xd2\xd3\x9f\x9e\xfb\x1a" +
	"x\x02Q\\\x1d[|=}\xf6\xfc\xaf0\x8a:\x05" +
	"\xb0N\x18\xb3\xd6\xd3*\xbaa\xcc\x01\x8a\xc2\xfb\xd7O" +
	"~K\x1f\xbb\x1c\xa6\x1cN\x98\x04A\x13\x85\xc5\xd4\xe7" +
	"\x0b3\xdf,\x01\xdf\x81A\xb9\xcb\x86\xe2\xf3\xa7\xca4" +
	"\xd1\xec\x9aymn\xd7\xd5\x08\x1f\xab`\xde\x00\xb4\x1e" +
	"7%\x9d\xa0P\x96\xa0a!\x80\xd6\xab\xe6;\xd6)" +
	"s\x1f\x80u\xd1\x9c\xb7\x06;\xa4\xbc\xc7.d\xde|" +
	"\xee\x97\xc5\x9fW\xd2\xa9J\xb6w\x1c\x96\xd9vuH" +
	"\xb4Go\xfe\xf8\x81W\xfar\x7f\xf8\xf2\xaa\xfbC\x1d" +
	"\x19\x04\x01\xfd\xc2\xae\x14\xcbUo\xa0H\xec\xa9\xcaT" +
	"f\xc4\xffu\xa4j\x97\xa8\xe3\xe5\x11\xb9Fc\x00\x01" +
	"\x02\xb6\x9cb\xac\x0f\x08\x8b\xe9I\xb7j\x97r\x98G" +
	"\x0c\x90h\x14\xa9\xe8\xb8n\xcf\xb8Sk\xb8\xf5\x1a\x00" +
	"7\xa8\x06\xa0!\x00\xdb\x93\x01\xe0=\x14\xf9^\x82\x0c" +
	"1%+g\xfd\xf2\xb0\x97\"\xbf\x83`V\";\x1e" +
	"\xb2\xb0s\x01\x91\x01fk\xf5\xaa\xa7.\x82&\xf4/" +
	"\xd6\xe7\xf2`\xbd\xea\xad\xe2\xd2r\x07[\xba16\xa4" +
	"\xb8\xa4\x15\xf0&d\x9a\xb6\xfbd\x84\x8c\x16\x90Id" +
	"\x147\xe4)\x82Y\xff\xaf\xc8\xa2c\xb1\xaa<m\xad" +
	"\xd4\x8e7 \xc9\x06\xd0Q\xe4\xa1\x109=m\xbb\x0d" +
	"\x07\xbb\x80`\x17lVb\xde\xf6\xec\xe3\xaba\xfaB" +
	"\x98\xe4\x94]/c\x1c\x08\xc67\xd2\xcc\xad\xf5\xe4\xd3" +
	"\x0ad\xfd\xfb\xbb\xcb\x93.\x96\xa4\xa4\xffeh_\xc4" +
	"\xd0\x8d\x84IV\xec\xe3N[A\xa8\x12>l\xbb\xb4" +
	"\xe1\xc8Lq\xaa\xc5\x85P\xa9F\x0f\x00\xf0\x1cE~" +
	"\x84`\x02\xff\x11~\xaeC2\xd7=\x14y\x9e`\x82" +
	"\xfc-RH\x00\xd8\x98,\xeb>\x8a\xfc!\x823E" +
	"\xb7Q\xab\xab\xd6\x99\xed\xf9\xeb\x91\xe1\xdfv\xb6z*" +
	"Y\xae\xd6\xea\xd8)\x0a\xdf\x7f\xf4\xfcr\xf7\xd1/\xe4" +
	"q'\xfc\x0f/\x8d\xb6f_\x11\xbf\x15\xb0\xb6\x15\x1d" +
	"o@\xb5Y`RD\xc1\xa1P\xc1@\xc0q\x00~" +
	";E~g\x9b\xff\xd5i\xc7kz\x93u@\x07\x11" +
	"\x08\xe2&n\x8eg\xfd\xd6\x8a\xb6\xc4a\x00\x1e\xa7\xc8" +
	"{\x09\x8aby\xd2-yN\x05\x00p\x0b`\x9e\"" +
	"v\x86\xab\x13P\x1e\xaeqf\xa4R\xd4\xcbU\x8f\xc7" +
	"\x11#K\x96\x0dE\x1e\x9aD&\xf2N\x98\x99\xb4l" +
	"\x9bR\xd6\xef\xf8\xac/\x06\x8f\xab\x99l\xadol-" +
	"F\xc6o\x01\xc2Fu\x0cw?\xb6\x9e\x11\xb6_\xee" +
	"\x9e~\x1dI\xb0\x83\xb1\xf5`\xb1ny\xb7U\xa7n" +
	"-\x87I9\x0d9LJ_V\x8f\xb5\xb6\xa1-\xeb" +
	"\x8e\xf7\xf8\x8aT\xdb\x08\x8aZ\xa3Xt\x9c\x92\x03X" +
	"j\x93\x9dn4\xd9Y\xdf\xed\x7f\x03\x00\x00\xff\xff\xbb" +
	"\x7f\x0d\x9b"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_efb5a91f96d44de3,
		Nodes: []uint64{
			0x8a336ac7e2d028c1,
			0xa17b8c469ab105e9,
			0xab8d091f98599d27,
			0xaec21d58779cc86c,
			0xb7ddaffff14d4ea5,
			0xb90ffa2761585171,
			0xc105d085735711e1,
			0xc718781cb2553199,
			0xcfaebe761f647d07,
			0xd25c03d885e9b059,
			0xdad77fd0c414d459,
			0xe325af947f127758,
			0xe41237e4098ed922,
			0xe6d4ed829b3ab757,
			0xf8402a904fba165b,
		},
		Compressed: true,
	})
}
