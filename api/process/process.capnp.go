// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	tools "github.com/wetware/ww/experiments/api/tools"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xaf2e5ebaa58175d2

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release

}

func (c Executor) ExecFromCache(ctx context.Context, params func(Executor_execFromCache_Params) error) (Executor_execFromCache_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      1,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "execFromCache",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_execFromCache_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_execFromCache_Results_Future{Future: ans.Future()}, release

}

func (c Executor) Registry(ctx context.Context, params func(Executor_registry_Params) error) (Executor_registry_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      2,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "registry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_registry_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_registry_Results_Future{Future: ans.Future()}, release

}

func (c Executor) Tools(ctx context.Context, params func(Executor_tools_Params) error) (Executor_tools_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      3,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "tools",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_tools_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_tools_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error

	ExecFromCache(context.Context, Executor_execFromCache) error

	Registry(context.Context, Executor_registry) error

	Tools(context.Context, Executor_tools) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      1,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "execFromCache",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExecFromCache(ctx, Executor_execFromCache{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      2,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "registry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Registry(ctx, Executor_registry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      3,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "tools",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Tools(ctx, Executor_tools{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_execFromCache holds the state for a server call to Executor.execFromCache.
// See server.Call for documentation.
type Executor_execFromCache struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_execFromCache) Args() Executor_execFromCache_Params {
	return Executor_execFromCache_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_execFromCache) AllocResults() (Executor_execFromCache_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execFromCache_Results(r), err
}

// Executor_registry holds the state for a server call to Executor.registry.
// See server.Call for documentation.
type Executor_registry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_registry) Args() Executor_registry_Params {
	return Executor_registry_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_registry) AllocResults() (Executor_registry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_registry_Results(r), err
}

// Executor_tools holds the state for a server call to Executor.tools.
// See server.Call for documentation.
type Executor_tools struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_tools) Args() Executor_tools_Params {
	return Executor_tools_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_tools) AllocResults() (Executor_tools_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_tools_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xf20b3dea95929312

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xf20b3dea95929312, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_exec_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_exec_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_exec_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_exec_Params) Caps() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.PointerList(p.List()), err
}

func (s Executor_exec_Params) HasCaps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_exec_Params) SetCaps(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Executor_exec_Params) NewCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0xbb4f16b0a7d2d09b

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0xbb4f16b0a7d2d09b, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_exec_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Executor_execFromCache_Params capnp.Struct

// Executor_execFromCache_Params_TypeID is the unique identifier for the type Executor_execFromCache_Params.
const Executor_execFromCache_Params_TypeID = 0xb9b9c4df47b44962

func NewExecutor_execFromCache_Params(s *capnp.Segment) (Executor_execFromCache_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_execFromCache_Params(st), err
}

func NewRootExecutor_execFromCache_Params(s *capnp.Segment) (Executor_execFromCache_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Executor_execFromCache_Params(st), err
}

func ReadRootExecutor_execFromCache_Params(msg *capnp.Message) (Executor_execFromCache_Params, error) {
	root, err := msg.Root()
	return Executor_execFromCache_Params(root.Struct()), err
}

func (s Executor_execFromCache_Params) String() string {
	str, _ := text.Marshal(0xb9b9c4df47b44962, capnp.Struct(s))
	return str
}

func (s Executor_execFromCache_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execFromCache_Params) DecodeFromPtr(p capnp.Ptr) Executor_execFromCache_Params {
	return Executor_execFromCache_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execFromCache_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execFromCache_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execFromCache_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execFromCache_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execFromCache_Params) Md5sum() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_execFromCache_Params) HasMd5sum() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execFromCache_Params) SetMd5sum(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_execFromCache_Params) Ppid() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Executor_execFromCache_Params) SetPpid(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

func (s Executor_execFromCache_Params) Caps() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.PointerList(p.List()), err
}

func (s Executor_execFromCache_Params) HasCaps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_execFromCache_Params) SetCaps(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Executor_execFromCache_Params) NewCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Executor_execFromCache_Params_List is a list of Executor_execFromCache_Params.
type Executor_execFromCache_Params_List = capnp.StructList[Executor_execFromCache_Params]

// NewExecutor_execFromCache_Params creates a new list of Executor_execFromCache_Params.
func NewExecutor_execFromCache_Params_List(s *capnp.Segment, sz int32) (Executor_execFromCache_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Executor_execFromCache_Params](l), err
}

// Executor_execFromCache_Params_Future is a wrapper for a Executor_execFromCache_Params promised by a client call.
type Executor_execFromCache_Params_Future struct{ *capnp.Future }

func (f Executor_execFromCache_Params_Future) Struct() (Executor_execFromCache_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_execFromCache_Params(p.Struct()), err
}

type Executor_execFromCache_Results capnp.Struct

// Executor_execFromCache_Results_TypeID is the unique identifier for the type Executor_execFromCache_Results.
const Executor_execFromCache_Results_TypeID = 0xa21a945a0ef3799e

func NewExecutor_execFromCache_Results(s *capnp.Segment) (Executor_execFromCache_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execFromCache_Results(st), err
}

func NewRootExecutor_execFromCache_Results(s *capnp.Segment) (Executor_execFromCache_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execFromCache_Results(st), err
}

func ReadRootExecutor_execFromCache_Results(msg *capnp.Message) (Executor_execFromCache_Results, error) {
	root, err := msg.Root()
	return Executor_execFromCache_Results(root.Struct()), err
}

func (s Executor_execFromCache_Results) String() string {
	str, _ := text.Marshal(0xa21a945a0ef3799e, capnp.Struct(s))
	return str
}

func (s Executor_execFromCache_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execFromCache_Results) DecodeFromPtr(p capnp.Ptr) Executor_execFromCache_Results {
	return Executor_execFromCache_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execFromCache_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execFromCache_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execFromCache_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execFromCache_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execFromCache_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_execFromCache_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execFromCache_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_execFromCache_Results_List is a list of Executor_execFromCache_Results.
type Executor_execFromCache_Results_List = capnp.StructList[Executor_execFromCache_Results]

// NewExecutor_execFromCache_Results creates a new list of Executor_execFromCache_Results.
func NewExecutor_execFromCache_Results_List(s *capnp.Segment, sz int32) (Executor_execFromCache_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_execFromCache_Results](l), err
}

// Executor_execFromCache_Results_Future is a wrapper for a Executor_execFromCache_Results promised by a client call.
type Executor_execFromCache_Results_Future struct{ *capnp.Future }

func (f Executor_execFromCache_Results_Future) Struct() (Executor_execFromCache_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_execFromCache_Results(p.Struct()), err
}
func (p Executor_execFromCache_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Executor_registry_Params capnp.Struct

// Executor_registry_Params_TypeID is the unique identifier for the type Executor_registry_Params.
const Executor_registry_Params_TypeID = 0xe863235b8d7aeca3

func NewExecutor_registry_Params(s *capnp.Segment) (Executor_registry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_registry_Params(st), err
}

func NewRootExecutor_registry_Params(s *capnp.Segment) (Executor_registry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_registry_Params(st), err
}

func ReadRootExecutor_registry_Params(msg *capnp.Message) (Executor_registry_Params, error) {
	root, err := msg.Root()
	return Executor_registry_Params(root.Struct()), err
}

func (s Executor_registry_Params) String() string {
	str, _ := text.Marshal(0xe863235b8d7aeca3, capnp.Struct(s))
	return str
}

func (s Executor_registry_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_registry_Params) DecodeFromPtr(p capnp.Ptr) Executor_registry_Params {
	return Executor_registry_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_registry_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_registry_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_registry_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_registry_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_registry_Params_List is a list of Executor_registry_Params.
type Executor_registry_Params_List = capnp.StructList[Executor_registry_Params]

// NewExecutor_registry_Params creates a new list of Executor_registry_Params.
func NewExecutor_registry_Params_List(s *capnp.Segment, sz int32) (Executor_registry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_registry_Params](l), err
}

// Executor_registry_Params_Future is a wrapper for a Executor_registry_Params promised by a client call.
type Executor_registry_Params_Future struct{ *capnp.Future }

func (f Executor_registry_Params_Future) Struct() (Executor_registry_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_registry_Params(p.Struct()), err
}

type Executor_registry_Results capnp.Struct

// Executor_registry_Results_TypeID is the unique identifier for the type Executor_registry_Results.
const Executor_registry_Results_TypeID = 0xa20ce2af932c2730

func NewExecutor_registry_Results(s *capnp.Segment) (Executor_registry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_registry_Results(st), err
}

func NewRootExecutor_registry_Results(s *capnp.Segment) (Executor_registry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_registry_Results(st), err
}

func ReadRootExecutor_registry_Results(msg *capnp.Message) (Executor_registry_Results, error) {
	root, err := msg.Root()
	return Executor_registry_Results(root.Struct()), err
}

func (s Executor_registry_Results) String() string {
	str, _ := text.Marshal(0xa20ce2af932c2730, capnp.Struct(s))
	return str
}

func (s Executor_registry_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_registry_Results) DecodeFromPtr(p capnp.Ptr) Executor_registry_Results {
	return Executor_registry_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_registry_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_registry_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_registry_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_registry_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_registry_Results) Registry() BytecodeRegistry {
	p, _ := capnp.Struct(s).Ptr(0)
	return BytecodeRegistry(p.Interface().Client())
}

func (s Executor_registry_Results) HasRegistry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_registry_Results) SetRegistry(v BytecodeRegistry) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_registry_Results_List is a list of Executor_registry_Results.
type Executor_registry_Results_List = capnp.StructList[Executor_registry_Results]

// NewExecutor_registry_Results creates a new list of Executor_registry_Results.
func NewExecutor_registry_Results_List(s *capnp.Segment, sz int32) (Executor_registry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_registry_Results](l), err
}

// Executor_registry_Results_Future is a wrapper for a Executor_registry_Results promised by a client call.
type Executor_registry_Results_Future struct{ *capnp.Future }

func (f Executor_registry_Results_Future) Struct() (Executor_registry_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_registry_Results(p.Struct()), err
}
func (p Executor_registry_Results_Future) Registry() BytecodeRegistry {
	return BytecodeRegistry(p.Future.Field(0, nil).Client())
}

type Executor_tools_Params capnp.Struct

// Executor_tools_Params_TypeID is the unique identifier for the type Executor_tools_Params.
const Executor_tools_Params_TypeID = 0xfb52998547c680f0

func NewExecutor_tools_Params(s *capnp.Segment) (Executor_tools_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_tools_Params(st), err
}

func NewRootExecutor_tools_Params(s *capnp.Segment) (Executor_tools_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_tools_Params(st), err
}

func ReadRootExecutor_tools_Params(msg *capnp.Message) (Executor_tools_Params, error) {
	root, err := msg.Root()
	return Executor_tools_Params(root.Struct()), err
}

func (s Executor_tools_Params) String() string {
	str, _ := text.Marshal(0xfb52998547c680f0, capnp.Struct(s))
	return str
}

func (s Executor_tools_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_tools_Params) DecodeFromPtr(p capnp.Ptr) Executor_tools_Params {
	return Executor_tools_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_tools_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_tools_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_tools_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_tools_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_tools_Params_List is a list of Executor_tools_Params.
type Executor_tools_Params_List = capnp.StructList[Executor_tools_Params]

// NewExecutor_tools_Params creates a new list of Executor_tools_Params.
func NewExecutor_tools_Params_List(s *capnp.Segment, sz int32) (Executor_tools_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_tools_Params](l), err
}

// Executor_tools_Params_Future is a wrapper for a Executor_tools_Params promised by a client call.
type Executor_tools_Params_Future struct{ *capnp.Future }

func (f Executor_tools_Params_Future) Struct() (Executor_tools_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_tools_Params(p.Struct()), err
}

type Executor_tools_Results capnp.Struct

// Executor_tools_Results_TypeID is the unique identifier for the type Executor_tools_Results.
const Executor_tools_Results_TypeID = 0xd29163211833b55f

func NewExecutor_tools_Results(s *capnp.Segment) (Executor_tools_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_tools_Results(st), err
}

func NewRootExecutor_tools_Results(s *capnp.Segment) (Executor_tools_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_tools_Results(st), err
}

func ReadRootExecutor_tools_Results(msg *capnp.Message) (Executor_tools_Results, error) {
	root, err := msg.Root()
	return Executor_tools_Results(root.Struct()), err
}

func (s Executor_tools_Results) String() string {
	str, _ := text.Marshal(0xd29163211833b55f, capnp.Struct(s))
	return str
}

func (s Executor_tools_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_tools_Results) DecodeFromPtr(p capnp.Ptr) Executor_tools_Results {
	return Executor_tools_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_tools_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_tools_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_tools_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_tools_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_tools_Results) Tools() tools.Tools {
	p, _ := capnp.Struct(s).Ptr(0)
	return tools.Tools(p.Interface().Client())
}

func (s Executor_tools_Results) HasTools() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_tools_Results) SetTools(v tools.Tools) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_tools_Results_List is a list of Executor_tools_Results.
type Executor_tools_Results_List = capnp.StructList[Executor_tools_Results]

// NewExecutor_tools_Results creates a new list of Executor_tools_Results.
func NewExecutor_tools_Results_List(s *capnp.Segment, sz int32) (Executor_tools_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_tools_Results](l), err
}

// Executor_tools_Results_Future is a wrapper for a Executor_tools_Results promised by a client call.
type Executor_tools_Results_Future struct{ *capnp.Future }

func (f Executor_tools_Results_Future) Struct() (Executor_tools_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_tools_Results(p.Struct()), err
}
func (p Executor_tools_Results_Future) Tools() tools.Tools {
	return tools.Tools(p.Future.Field(0, nil).Client())
}

type Args capnp.Client

// Args_TypeID is the unique identifier for the type Args.
const Args_TypeID = 0xbb2aa833b9f708e6

func (c Args) Args(ctx context.Context, params func(Args_args_Params) error) (Args_args_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbb2aa833b9f708e6,
			MethodID:      0,
			InterfaceName: "process.capnp:Args",
			MethodName:    "args",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Args_args_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Args_args_Results_Future{Future: ans.Future()}, release

}

func (c Args) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Args) String() string {
	return "Args(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Args) AddRef() Args {
	return Args(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Args) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Args) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Args) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Args) DecodeFromPtr(p capnp.Ptr) Args {
	return Args(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Args) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Args) IsSame(other Args) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Args) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Args) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Args_Server is a Args with a local implementation.
type Args_Server interface {
	Args(context.Context, Args_args) error
}

// Args_NewServer creates a new Server from an implementation of Args_Server.
func Args_NewServer(s Args_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Args_Methods(nil, s), s, c)
}

// Args_ServerToClient creates a new Client from an implementation of Args_Server.
// The caller is responsible for calling Release on the returned Client.
func Args_ServerToClient(s Args_Server) Args {
	return Args(capnp.NewClient(Args_NewServer(s)))
}

// Args_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Args_Methods(methods []server.Method, s Args_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbb2aa833b9f708e6,
			MethodID:      0,
			InterfaceName: "process.capnp:Args",
			MethodName:    "args",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Args(ctx, Args_args{call})
		},
	})

	return methods
}

// Args_args holds the state for a server call to Args.args.
// See server.Call for documentation.
type Args_args struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Args_args) Args() Args_args_Params {
	return Args_args_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Args_args) AllocResults() (Args_args_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Args_args_Results(r), err
}

// Args_List is a list of Args.
type Args_List = capnp.CapList[Args]

// NewArgs creates a new list of Args.
func NewArgs_List(s *capnp.Segment, sz int32) (Args_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Args](l), err
}

type Args_args_Params capnp.Struct

// Args_args_Params_TypeID is the unique identifier for the type Args_args_Params.
const Args_args_Params_TypeID = 0x9a680fa9a9be2d62

func NewArgs_args_Params(s *capnp.Segment) (Args_args_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Args_args_Params(st), err
}

func NewRootArgs_args_Params(s *capnp.Segment) (Args_args_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Args_args_Params(st), err
}

func ReadRootArgs_args_Params(msg *capnp.Message) (Args_args_Params, error) {
	root, err := msg.Root()
	return Args_args_Params(root.Struct()), err
}

func (s Args_args_Params) String() string {
	str, _ := text.Marshal(0x9a680fa9a9be2d62, capnp.Struct(s))
	return str
}

func (s Args_args_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Args_args_Params) DecodeFromPtr(p capnp.Ptr) Args_args_Params {
	return Args_args_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Args_args_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Args_args_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Args_args_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Args_args_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Args_args_Params_List is a list of Args_args_Params.
type Args_args_Params_List = capnp.StructList[Args_args_Params]

// NewArgs_args_Params creates a new list of Args_args_Params.
func NewArgs_args_Params_List(s *capnp.Segment, sz int32) (Args_args_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Args_args_Params](l), err
}

// Args_args_Params_Future is a wrapper for a Args_args_Params promised by a client call.
type Args_args_Params_Future struct{ *capnp.Future }

func (f Args_args_Params_Future) Struct() (Args_args_Params, error) {
	p, err := f.Future.Ptr()
	return Args_args_Params(p.Struct()), err
}

type Args_args_Results capnp.Struct

// Args_args_Results_TypeID is the unique identifier for the type Args_args_Results.
const Args_args_Results_TypeID = 0x8da195122b990a12

func NewArgs_args_Results(s *capnp.Segment) (Args_args_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Args_args_Results(st), err
}

func NewRootArgs_args_Results(s *capnp.Segment) (Args_args_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Args_args_Results(st), err
}

func ReadRootArgs_args_Results(msg *capnp.Message) (Args_args_Results, error) {
	root, err := msg.Root()
	return Args_args_Results(root.Struct()), err
}

func (s Args_args_Results) String() string {
	str, _ := text.Marshal(0x8da195122b990a12, capnp.Struct(s))
	return str
}

func (s Args_args_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Args_args_Results) DecodeFromPtr(p capnp.Ptr) Args_args_Results {
	return Args_args_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Args_args_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Args_args_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Args_args_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Args_args_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Args_args_Results) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Args_args_Results) HasArgs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Args_args_Results) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Args_args_Results) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Args_args_Results_List is a list of Args_args_Results.
type Args_args_Results_List = capnp.StructList[Args_args_Results]

// NewArgs_args_Results creates a new list of Args_args_Results.
func NewArgs_args_Results_List(s *capnp.Segment, sz int32) (Args_args_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Args_args_Results](l), err
}

// Args_args_Results_Future is a wrapper for a Args_args_Results promised by a client call.
type Args_args_Results_Future struct{ *capnp.Future }

func (f Args_args_Results_Future) Struct() (Args_args_Results, error) {
	p, err := f.Future.Ptr()
	return Args_args_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type BootContext capnp.Client

// BootContext_TypeID is the unique identifier for the type BootContext.
const BootContext_TypeID = 0xef622b23fee0980e

func (c BootContext) Open(ctx context.Context, params func(BootContext_open_Params) error) (BootContext_open_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      0,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "open",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BootContext_open_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BootContext_open_Results_Future{Future: ans.Future()}, release

}

func (c BootContext) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BootContext) String() string {
	return "BootContext(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BootContext) AddRef() BootContext {
	return BootContext(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BootContext) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BootContext) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BootContext) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BootContext) DecodeFromPtr(p capnp.Ptr) BootContext {
	return BootContext(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BootContext) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BootContext) IsSame(other BootContext) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BootContext) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BootContext) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BootContext_Server is a BootContext with a local implementation.
type BootContext_Server interface {
	Open(context.Context, BootContext_open) error
}

// BootContext_NewServer creates a new Server from an implementation of BootContext_Server.
func BootContext_NewServer(s BootContext_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BootContext_Methods(nil, s), s, c)
}

// BootContext_ServerToClient creates a new Client from an implementation of BootContext_Server.
// The caller is responsible for calling Release on the returned Client.
func BootContext_ServerToClient(s BootContext_Server) BootContext {
	return BootContext(capnp.NewClient(BootContext_NewServer(s)))
}

// BootContext_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BootContext_Methods(methods []server.Method, s BootContext_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xef622b23fee0980e,
			MethodID:      0,
			InterfaceName: "process.capnp:BootContext",
			MethodName:    "open",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Open(ctx, BootContext_open{call})
		},
	})

	return methods
}

// BootContext_open holds the state for a server call to BootContext.open.
// See server.Call for documentation.
type BootContext_open struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BootContext_open) Args() BootContext_open_Params {
	return BootContext_open_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BootContext_open) AllocResults() (BootContext_open_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_open_Results(r), err
}

// BootContext_List is a list of BootContext.
type BootContext_List = capnp.CapList[BootContext]

// NewBootContext creates a new list of BootContext.
func NewBootContext_List(s *capnp.Segment, sz int32) (BootContext_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BootContext](l), err
}

type BootContext_open_Params capnp.Struct

// BootContext_open_Params_TypeID is the unique identifier for the type BootContext_open_Params.
const BootContext_open_Params_TypeID = 0xa7600db255bca0c7

func NewBootContext_open_Params(s *capnp.Segment) (BootContext_open_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_open_Params(st), err
}

func NewRootBootContext_open_Params(s *capnp.Segment) (BootContext_open_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BootContext_open_Params(st), err
}

func ReadRootBootContext_open_Params(msg *capnp.Message) (BootContext_open_Params, error) {
	root, err := msg.Root()
	return BootContext_open_Params(root.Struct()), err
}

func (s BootContext_open_Params) String() string {
	str, _ := text.Marshal(0xa7600db255bca0c7, capnp.Struct(s))
	return str
}

func (s BootContext_open_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_open_Params) DecodeFromPtr(p capnp.Ptr) BootContext_open_Params {
	return BootContext_open_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_open_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_open_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_open_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_open_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// BootContext_open_Params_List is a list of BootContext_open_Params.
type BootContext_open_Params_List = capnp.StructList[BootContext_open_Params]

// NewBootContext_open_Params creates a new list of BootContext_open_Params.
func NewBootContext_open_Params_List(s *capnp.Segment, sz int32) (BootContext_open_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[BootContext_open_Params](l), err
}

// BootContext_open_Params_Future is a wrapper for a BootContext_open_Params promised by a client call.
type BootContext_open_Params_Future struct{ *capnp.Future }

func (f BootContext_open_Params_Future) Struct() (BootContext_open_Params, error) {
	p, err := f.Future.Ptr()
	return BootContext_open_Params(p.Struct()), err
}

type BootContext_open_Results capnp.Struct

// BootContext_open_Results_TypeID is the unique identifier for the type BootContext_open_Results.
const BootContext_open_Results_TypeID = 0xe84ba4855da630b6

func NewBootContext_open_Results(s *capnp.Segment) (BootContext_open_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_open_Results(st), err
}

func NewRootBootContext_open_Results(s *capnp.Segment) (BootContext_open_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BootContext_open_Results(st), err
}

func ReadRootBootContext_open_Results(msg *capnp.Message) (BootContext_open_Results, error) {
	root, err := msg.Root()
	return BootContext_open_Results(root.Struct()), err
}

func (s BootContext_open_Results) String() string {
	str, _ := text.Marshal(0xe84ba4855da630b6, capnp.Struct(s))
	return str
}

func (s BootContext_open_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BootContext_open_Results) DecodeFromPtr(p capnp.Ptr) BootContext_open_Results {
	return BootContext_open_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BootContext_open_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BootContext_open_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BootContext_open_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BootContext_open_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BootContext_open_Results) Content() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s BootContext_open_Results) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BootContext_open_Results) SetContent(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s BootContext_open_Results) NewContent(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// BootContext_open_Results_List is a list of BootContext_open_Results.
type BootContext_open_Results_List = capnp.StructList[BootContext_open_Results]

// NewBootContext_open_Results creates a new list of BootContext_open_Results.
func NewBootContext_open_Results_List(s *capnp.Segment, sz int32) (BootContext_open_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BootContext_open_Results](l), err
}

// BootContext_open_Results_Future is a wrapper for a BootContext_open_Results promised by a client call.
type BootContext_open_Results_Future struct{ *capnp.Future }

func (f BootContext_open_Results_Future) Struct() (BootContext_open_Results, error) {
	p, err := f.Future.Ptr()
	return BootContext_open_Results(p.Struct()), err
}

type BytecodeRegistry capnp.Client

// BytecodeRegistry_TypeID is the unique identifier for the type BytecodeRegistry.
const BytecodeRegistry_TypeID = 0x990f02d816472ef8

func (c BytecodeRegistry) Put(ctx context.Context, params func(BytecodeRegistry_put_Params) error) (BytecodeRegistry_put_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x990f02d816472ef8,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeRegistry",
			MethodName:    "put",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeRegistry_put_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeRegistry_put_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeRegistry) Get(ctx context.Context, params func(BytecodeRegistry_get_Params) error) (BytecodeRegistry_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x990f02d816472ef8,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeRegistry",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeRegistry_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeRegistry_get_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeRegistry) Has(ctx context.Context, params func(BytecodeRegistry_has_Params) error) (BytecodeRegistry_has_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x990f02d816472ef8,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeRegistry",
			MethodName:    "has",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(BytecodeRegistry_has_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return BytecodeRegistry_has_Results_Future{Future: ans.Future()}, release

}

func (c BytecodeRegistry) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c BytecodeRegistry) String() string {
	return "BytecodeRegistry(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c BytecodeRegistry) AddRef() BytecodeRegistry {
	return BytecodeRegistry(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c BytecodeRegistry) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c BytecodeRegistry) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c BytecodeRegistry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (BytecodeRegistry) DecodeFromPtr(p capnp.Ptr) BytecodeRegistry {
	return BytecodeRegistry(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c BytecodeRegistry) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c BytecodeRegistry) IsSame(other BytecodeRegistry) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c BytecodeRegistry) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c BytecodeRegistry) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A BytecodeRegistry_Server is a BytecodeRegistry with a local implementation.
type BytecodeRegistry_Server interface {
	Put(context.Context, BytecodeRegistry_put) error

	Get(context.Context, BytecodeRegistry_get) error

	Has(context.Context, BytecodeRegistry_has) error
}

// BytecodeRegistry_NewServer creates a new Server from an implementation of BytecodeRegistry_Server.
func BytecodeRegistry_NewServer(s BytecodeRegistry_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(BytecodeRegistry_Methods(nil, s), s, c)
}

// BytecodeRegistry_ServerToClient creates a new Client from an implementation of BytecodeRegistry_Server.
// The caller is responsible for calling Release on the returned Client.
func BytecodeRegistry_ServerToClient(s BytecodeRegistry_Server) BytecodeRegistry {
	return BytecodeRegistry(capnp.NewClient(BytecodeRegistry_NewServer(s)))
}

// BytecodeRegistry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func BytecodeRegistry_Methods(methods []server.Method, s BytecodeRegistry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x990f02d816472ef8,
			MethodID:      0,
			InterfaceName: "process.capnp:BytecodeRegistry",
			MethodName:    "put",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Put(ctx, BytecodeRegistry_put{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x990f02d816472ef8,
			MethodID:      1,
			InterfaceName: "process.capnp:BytecodeRegistry",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, BytecodeRegistry_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x990f02d816472ef8,
			MethodID:      2,
			InterfaceName: "process.capnp:BytecodeRegistry",
			MethodName:    "has",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Has(ctx, BytecodeRegistry_has{call})
		},
	})

	return methods
}

// BytecodeRegistry_put holds the state for a server call to BytecodeRegistry.put.
// See server.Call for documentation.
type BytecodeRegistry_put struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeRegistry_put) Args() BytecodeRegistry_put_Params {
	return BytecodeRegistry_put_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeRegistry_put) AllocResults() (BytecodeRegistry_put_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_put_Results(r), err
}

// BytecodeRegistry_get holds the state for a server call to BytecodeRegistry.get.
// See server.Call for documentation.
type BytecodeRegistry_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeRegistry_get) Args() BytecodeRegistry_get_Params {
	return BytecodeRegistry_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeRegistry_get) AllocResults() (BytecodeRegistry_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_get_Results(r), err
}

// BytecodeRegistry_has holds the state for a server call to BytecodeRegistry.has.
// See server.Call for documentation.
type BytecodeRegistry_has struct {
	*server.Call
}

// Args returns the call's arguments.
func (c BytecodeRegistry_has) Args() BytecodeRegistry_has_Params {
	return BytecodeRegistry_has_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c BytecodeRegistry_has) AllocResults() (BytecodeRegistry_has_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeRegistry_has_Results(r), err
}

// BytecodeRegistry_List is a list of BytecodeRegistry.
type BytecodeRegistry_List = capnp.CapList[BytecodeRegistry]

// NewBytecodeRegistry creates a new list of BytecodeRegistry.
func NewBytecodeRegistry_List(s *capnp.Segment, sz int32) (BytecodeRegistry_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[BytecodeRegistry](l), err
}

type BytecodeRegistry_put_Params capnp.Struct

// BytecodeRegistry_put_Params_TypeID is the unique identifier for the type BytecodeRegistry_put_Params.
const BytecodeRegistry_put_Params_TypeID = 0xcb1ece3fc10a2abe

func NewBytecodeRegistry_put_Params(s *capnp.Segment) (BytecodeRegistry_put_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_put_Params(st), err
}

func NewRootBytecodeRegistry_put_Params(s *capnp.Segment) (BytecodeRegistry_put_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_put_Params(st), err
}

func ReadRootBytecodeRegistry_put_Params(msg *capnp.Message) (BytecodeRegistry_put_Params, error) {
	root, err := msg.Root()
	return BytecodeRegistry_put_Params(root.Struct()), err
}

func (s BytecodeRegistry_put_Params) String() string {
	str, _ := text.Marshal(0xcb1ece3fc10a2abe, capnp.Struct(s))
	return str
}

func (s BytecodeRegistry_put_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeRegistry_put_Params) DecodeFromPtr(p capnp.Ptr) BytecodeRegistry_put_Params {
	return BytecodeRegistry_put_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeRegistry_put_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeRegistry_put_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeRegistry_put_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeRegistry_put_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeRegistry_put_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeRegistry_put_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeRegistry_put_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeRegistry_put_Params_List is a list of BytecodeRegistry_put_Params.
type BytecodeRegistry_put_Params_List = capnp.StructList[BytecodeRegistry_put_Params]

// NewBytecodeRegistry_put_Params creates a new list of BytecodeRegistry_put_Params.
func NewBytecodeRegistry_put_Params_List(s *capnp.Segment, sz int32) (BytecodeRegistry_put_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeRegistry_put_Params](l), err
}

// BytecodeRegistry_put_Params_Future is a wrapper for a BytecodeRegistry_put_Params promised by a client call.
type BytecodeRegistry_put_Params_Future struct{ *capnp.Future }

func (f BytecodeRegistry_put_Params_Future) Struct() (BytecodeRegistry_put_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeRegistry_put_Params(p.Struct()), err
}

type BytecodeRegistry_put_Results capnp.Struct

// BytecodeRegistry_put_Results_TypeID is the unique identifier for the type BytecodeRegistry_put_Results.
const BytecodeRegistry_put_Results_TypeID = 0x87256efbef4d0d6b

func NewBytecodeRegistry_put_Results(s *capnp.Segment) (BytecodeRegistry_put_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_put_Results(st), err
}

func NewRootBytecodeRegistry_put_Results(s *capnp.Segment) (BytecodeRegistry_put_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_put_Results(st), err
}

func ReadRootBytecodeRegistry_put_Results(msg *capnp.Message) (BytecodeRegistry_put_Results, error) {
	root, err := msg.Root()
	return BytecodeRegistry_put_Results(root.Struct()), err
}

func (s BytecodeRegistry_put_Results) String() string {
	str, _ := text.Marshal(0x87256efbef4d0d6b, capnp.Struct(s))
	return str
}

func (s BytecodeRegistry_put_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeRegistry_put_Results) DecodeFromPtr(p capnp.Ptr) BytecodeRegistry_put_Results {
	return BytecodeRegistry_put_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeRegistry_put_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeRegistry_put_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeRegistry_put_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeRegistry_put_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeRegistry_put_Results) Md5sum() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeRegistry_put_Results) HasMd5sum() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeRegistry_put_Results) SetMd5sum(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeRegistry_put_Results_List is a list of BytecodeRegistry_put_Results.
type BytecodeRegistry_put_Results_List = capnp.StructList[BytecodeRegistry_put_Results]

// NewBytecodeRegistry_put_Results creates a new list of BytecodeRegistry_put_Results.
func NewBytecodeRegistry_put_Results_List(s *capnp.Segment, sz int32) (BytecodeRegistry_put_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeRegistry_put_Results](l), err
}

// BytecodeRegistry_put_Results_Future is a wrapper for a BytecodeRegistry_put_Results promised by a client call.
type BytecodeRegistry_put_Results_Future struct{ *capnp.Future }

func (f BytecodeRegistry_put_Results_Future) Struct() (BytecodeRegistry_put_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeRegistry_put_Results(p.Struct()), err
}

type BytecodeRegistry_get_Params capnp.Struct

// BytecodeRegistry_get_Params_TypeID is the unique identifier for the type BytecodeRegistry_get_Params.
const BytecodeRegistry_get_Params_TypeID = 0x8e8bba35397049d4

func NewBytecodeRegistry_get_Params(s *capnp.Segment) (BytecodeRegistry_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_get_Params(st), err
}

func NewRootBytecodeRegistry_get_Params(s *capnp.Segment) (BytecodeRegistry_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_get_Params(st), err
}

func ReadRootBytecodeRegistry_get_Params(msg *capnp.Message) (BytecodeRegistry_get_Params, error) {
	root, err := msg.Root()
	return BytecodeRegistry_get_Params(root.Struct()), err
}

func (s BytecodeRegistry_get_Params) String() string {
	str, _ := text.Marshal(0x8e8bba35397049d4, capnp.Struct(s))
	return str
}

func (s BytecodeRegistry_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeRegistry_get_Params) DecodeFromPtr(p capnp.Ptr) BytecodeRegistry_get_Params {
	return BytecodeRegistry_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeRegistry_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeRegistry_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeRegistry_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeRegistry_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeRegistry_get_Params) Md5sum() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeRegistry_get_Params) HasMd5sum() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeRegistry_get_Params) SetMd5sum(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeRegistry_get_Params_List is a list of BytecodeRegistry_get_Params.
type BytecodeRegistry_get_Params_List = capnp.StructList[BytecodeRegistry_get_Params]

// NewBytecodeRegistry_get_Params creates a new list of BytecodeRegistry_get_Params.
func NewBytecodeRegistry_get_Params_List(s *capnp.Segment, sz int32) (BytecodeRegistry_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeRegistry_get_Params](l), err
}

// BytecodeRegistry_get_Params_Future is a wrapper for a BytecodeRegistry_get_Params promised by a client call.
type BytecodeRegistry_get_Params_Future struct{ *capnp.Future }

func (f BytecodeRegistry_get_Params_Future) Struct() (BytecodeRegistry_get_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeRegistry_get_Params(p.Struct()), err
}

type BytecodeRegistry_get_Results capnp.Struct

// BytecodeRegistry_get_Results_TypeID is the unique identifier for the type BytecodeRegistry_get_Results.
const BytecodeRegistry_get_Results_TypeID = 0x9a8b622632172e24

func NewBytecodeRegistry_get_Results(s *capnp.Segment) (BytecodeRegistry_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_get_Results(st), err
}

func NewRootBytecodeRegistry_get_Results(s *capnp.Segment) (BytecodeRegistry_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_get_Results(st), err
}

func ReadRootBytecodeRegistry_get_Results(msg *capnp.Message) (BytecodeRegistry_get_Results, error) {
	root, err := msg.Root()
	return BytecodeRegistry_get_Results(root.Struct()), err
}

func (s BytecodeRegistry_get_Results) String() string {
	str, _ := text.Marshal(0x9a8b622632172e24, capnp.Struct(s))
	return str
}

func (s BytecodeRegistry_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeRegistry_get_Results) DecodeFromPtr(p capnp.Ptr) BytecodeRegistry_get_Results {
	return BytecodeRegistry_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeRegistry_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeRegistry_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeRegistry_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeRegistry_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeRegistry_get_Results) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeRegistry_get_Results) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeRegistry_get_Results) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeRegistry_get_Results_List is a list of BytecodeRegistry_get_Results.
type BytecodeRegistry_get_Results_List = capnp.StructList[BytecodeRegistry_get_Results]

// NewBytecodeRegistry_get_Results creates a new list of BytecodeRegistry_get_Results.
func NewBytecodeRegistry_get_Results_List(s *capnp.Segment, sz int32) (BytecodeRegistry_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeRegistry_get_Results](l), err
}

// BytecodeRegistry_get_Results_Future is a wrapper for a BytecodeRegistry_get_Results promised by a client call.
type BytecodeRegistry_get_Results_Future struct{ *capnp.Future }

func (f BytecodeRegistry_get_Results_Future) Struct() (BytecodeRegistry_get_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeRegistry_get_Results(p.Struct()), err
}

type BytecodeRegistry_has_Params capnp.Struct

// BytecodeRegistry_has_Params_TypeID is the unique identifier for the type BytecodeRegistry_has_Params.
const BytecodeRegistry_has_Params_TypeID = 0xd668a0b16a37bab6

func NewBytecodeRegistry_has_Params(s *capnp.Segment) (BytecodeRegistry_has_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_has_Params(st), err
}

func NewRootBytecodeRegistry_has_Params(s *capnp.Segment) (BytecodeRegistry_has_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return BytecodeRegistry_has_Params(st), err
}

func ReadRootBytecodeRegistry_has_Params(msg *capnp.Message) (BytecodeRegistry_has_Params, error) {
	root, err := msg.Root()
	return BytecodeRegistry_has_Params(root.Struct()), err
}

func (s BytecodeRegistry_has_Params) String() string {
	str, _ := text.Marshal(0xd668a0b16a37bab6, capnp.Struct(s))
	return str
}

func (s BytecodeRegistry_has_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeRegistry_has_Params) DecodeFromPtr(p capnp.Ptr) BytecodeRegistry_has_Params {
	return BytecodeRegistry_has_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeRegistry_has_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeRegistry_has_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeRegistry_has_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeRegistry_has_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeRegistry_has_Params) Md5sum() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s BytecodeRegistry_has_Params) HasMd5sum() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s BytecodeRegistry_has_Params) SetMd5sum(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// BytecodeRegistry_has_Params_List is a list of BytecodeRegistry_has_Params.
type BytecodeRegistry_has_Params_List = capnp.StructList[BytecodeRegistry_has_Params]

// NewBytecodeRegistry_has_Params creates a new list of BytecodeRegistry_has_Params.
func NewBytecodeRegistry_has_Params_List(s *capnp.Segment, sz int32) (BytecodeRegistry_has_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[BytecodeRegistry_has_Params](l), err
}

// BytecodeRegistry_has_Params_Future is a wrapper for a BytecodeRegistry_has_Params promised by a client call.
type BytecodeRegistry_has_Params_Future struct{ *capnp.Future }

func (f BytecodeRegistry_has_Params_Future) Struct() (BytecodeRegistry_has_Params, error) {
	p, err := f.Future.Ptr()
	return BytecodeRegistry_has_Params(p.Struct()), err
}

type BytecodeRegistry_has_Results capnp.Struct

// BytecodeRegistry_has_Results_TypeID is the unique identifier for the type BytecodeRegistry_has_Results.
const BytecodeRegistry_has_Results_TypeID = 0xfb6429d901491013

func NewBytecodeRegistry_has_Results(s *capnp.Segment) (BytecodeRegistry_has_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeRegistry_has_Results(st), err
}

func NewRootBytecodeRegistry_has_Results(s *capnp.Segment) (BytecodeRegistry_has_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return BytecodeRegistry_has_Results(st), err
}

func ReadRootBytecodeRegistry_has_Results(msg *capnp.Message) (BytecodeRegistry_has_Results, error) {
	root, err := msg.Root()
	return BytecodeRegistry_has_Results(root.Struct()), err
}

func (s BytecodeRegistry_has_Results) String() string {
	str, _ := text.Marshal(0xfb6429d901491013, capnp.Struct(s))
	return str
}

func (s BytecodeRegistry_has_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (BytecodeRegistry_has_Results) DecodeFromPtr(p capnp.Ptr) BytecodeRegistry_has_Results {
	return BytecodeRegistry_has_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s BytecodeRegistry_has_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s BytecodeRegistry_has_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s BytecodeRegistry_has_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s BytecodeRegistry_has_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s BytecodeRegistry_has_Results) Has() bool {
	return capnp.Struct(s).Bit(0)
}

func (s BytecodeRegistry_has_Results) SetHas(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// BytecodeRegistry_has_Results_List is a list of BytecodeRegistry_has_Results.
type BytecodeRegistry_has_Results_List = capnp.StructList[BytecodeRegistry_has_Results]

// NewBytecodeRegistry_has_Results creates a new list of BytecodeRegistry_has_Results.
func NewBytecodeRegistry_has_Results_List(s *capnp.Segment, sz int32) (BytecodeRegistry_has_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[BytecodeRegistry_has_Results](l), err
}

// BytecodeRegistry_has_Results_Future is a wrapper for a BytecodeRegistry_has_Results promised by a client call.
type BytecodeRegistry_has_Results_Future struct{ *capnp.Future }

func (f BytecodeRegistry_has_Results_Future) Struct() (BytecodeRegistry_has_Results, error) {
	p, err := f.Future.Ptr()
	return BytecodeRegistry_has_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\xacVmlS\xe5\x17?\xe7\xde\x8e{\xdb\xae" +
	"+\xcf.\x8c\x97\x0f\xff\x85\xd1\xfd\x09E\xea\xba\x85\x18" +
	"\x96\x90\x96\xe1\xac\x9b\x10{\x17\xf90\x0cj\xd7\xdd\xac" +
	"\x83m\xad\xbd\xb7a31\xc8\x07\xc2\x072\x13D\xa2" +
	"\x9b\xc1\xe0+\x90\x80\xbc\x08$\x1b\x86\x84\xf8\xc2\x07\x13" +
	"5\x93\xa8h\x0c\x8a\xc1\x10\xa3\x80\x1a\xa2@\xb4\xe6<" +
	"\xed\xbd\xbd}\x19\x0c\xe3\x97e\xbd\xcf\xb9\xbfs\xce\xef" +
	"\xfc~\xe7\xb9M>G\xd8\x11\xf4|Z\x03\x82z\xa8" +
	"jVv\xb3g\xdd\xb5\xdbC\x8d;\x80\xd5#@\x15" +
	"J\x00-\xeb\xa4\x0d\x08\xa8tK!\xc0l\xadkl" +
	"Y\xed\x9e\xd7F\x81)V\xc0\x88$P\xc0\xb3<\xe0" +
	"|Gj\xe5\x8a\xc9\x9d\xcf\xdb\x11\x0eK]\x140\xc1" +
	"\x03\xfe\x0cD\xea\xbe\x12\xbcc\xc0j\xc4l|\xcb\x92" +
	"-\xc1\xcb\xea8\x00*\x17\xa4[\xcaeI\x02P\xbe" +
	"\x97\xce)\xdd\xb2\x04\x90\xedY~\xe6\xe0Aob<" +
	"\x97\xceA\x87\xab\xe5[\xe0\xc8\xfa\x02\xf3\x9a\xff\xdf\xb3" +
	"s\xdc\x9e\xa6Q\xe6\x85\x06eJ\xd3\xb4\xe4\xbe\xddG" +
	".U\xbf\x0el\x9e\x15\xb0^n\xa3\x80\x8d<\xe0\xd5" +
	"\x91\xdfk6\xbc\xb8\xb0(`\x9b\xbc\x89\x02Fy\xc0" +
	"\xb9}\xef\xad?\xeeyj?\xb0\x85\xf9\xdc-\x87\xe5" +
	"f\x04Gv*\xb3\xed\xad\xc9'\x02G\xcaZ\xd8#" +
	"O*{\xa9\xf0\x961YBe\xb5\x93\xf7\xd0q\"" +
	"r\xf1\x83\x89\x09P\xe7!e\x12\xe8|\xa9\xb3\x872" +
	"\xadp\x1e\x01\xcc\xfe(\xff1\xd1r\xc0\x7f\xba\x0c\xef" +
	"[\xe7\xb8r\xd9\xc9)qF\x14\xa7\x8b\xe0^\xf9l" +
	"j\xff\xd1\xbaGO\xdb\xeb\xfe\xd5\xd9@h7\x9dT" +
	"\xf7\xd5\x97\xce\xeb\xc7\x13\xc1\x0f\x81\xd5\x99u/p-" +
	"\xa4\xba\xcf\xf8]gC\x9f\xfc\xefc;i\xe8\xe2\xb3" +
	"\xf1\xb8\xe8\xd5'O\xb6\xcc_\x14\xdf5e\xc7\x0e\xba" +
	"\xfc\x14\xb0\x92\x07\x9c\x9a|`\xd3\xb1}\x89/\xec\x08" +
	"\xdd9\x04\x8d\x07\x1c\x8a4\xf9\xf6\x9d\xf0\x7f\x09j\x1d" +
	"\x9a\xd9\xb7SvTFy@\xcb\xac\xc6\x03\x9f__" +
	"\xfcuY\xaf\xc7\\\xc7\x95\x09\xeaP9\xe9\xda\xa1T" +
	"\xb9\xa9\xd7SMoo\xdc\xfe\xe6#Wr#\xc8\xa5" +
	"\xfb\xc5\xd5Jh78\xda\x1b??3\xfa\xf8\xe2\xf8" +
	"\x95\\\xc1<[\xa3\xbb\x95z\x8dl\xbc\xff\xe8\x82w" +
	"\xf6_\xb5\xb1\xe0q\xd7\xd2I\xcd\xcb\xdf\xfd\xbdxY" +
	"\xcf\xb5\xb2\x0an\xb8\xa6\x14\xa4\xbc\xca_\xae\x88\xd2\xc8" +
	"+\xa8\xdd\xfd\xc2\x9e\x9fV\xb9\x7f+\x1a\x9e\xc7\xcd\x1b" +
	"\x9a\xeb\xa6\xe1\xfd\xf0\xee7\xf2\xa5\xce\xfe\x9b\xb6Dg" +
	"s\x89\xae?\xf7Qd\xfbX\xd7m[q\x07\xdd\x0d" +
	"t\xa2\xcc\xee\xc0\x0bK{o\x83Zo\xb1\xb4\xcb\xcd" +
	"\xd5\xbb\xd7\x1d\x82c\xd9T:\x19\xd7t=\xe0\x88\xc7" +
	"RC\xa9\xd6\xb6\x11C\x8b'{\xb5.\xad\xaf_7" +
	"\xd2#\x81T\xc6\xf0uizf@4t\xd5!:" +
	"\x00\x1c\x08\xc0<\xad\x00\xaa,\xa2:G\xc0\xd0`\xef" +
	"\x0a=3\x88\x1e\x10\xd0\x03hA\x8a9\xc8\xd5\xe9>" +
	"=\x10K\xf7\xe99\x1cC\x07;\x8e?\x8f\xe3\x13\xd0" +
	"KAX\x03\x18\x15\x11\xabA\xa0\x7f\xefZ_\x9ff" +
	"\xf8\xa2\xb1tl\x10\xef\xb5<\xa1\x141\x94\x83\x8c\"" +
	"\xaa\xd5b\x15\x80\xa5b4\x97\x15S\x1b@`\xed\x12" +
	"\x16\xb6\x0f\x9a\xfb\x81\xad\xa4\xb3\xe5\x12\x0a\x96v\xd1d" +
	"\x9f-\xa2\xb3\xb9\x92\x94\xca\x18a\x94\xfa4\xfa\x9b\x88" +
	"\xe9a\x8cbYA\x05\xbeB\xbc1}F\x1cT\x9a" +
	"Q'\x80Z-\xa2:_\xc0lO\xfe%\x00(c" +
	"\"\x8f\xdb>\xac\xc53F2\x1dH\xe7\x81+\x0e\xcc" +
	"\x0ej\x06\x12(+\xec[@dw\x80\xd7\x86\xb5\xf8" +
	"C\xe9\xe4\xe0\x9aX<\xa1Q\x0e/%\xb1\xe7h+" +
	"Lok\x1e\x05Y\xc1\xd0%\xf8y\x9d\xb5%\x93\xc6" +
	"\x9a\xe4\x90\xa1\x0d\x1b\x81dJ\x1b\xf2E\xeb\x8b\xe9C" +
	"\xb3\x8eP\xae\x10\x1a\xf4l>h\xd3{h\xae<\xf6" +
	"\xb4\x1f\x04\xa6\xd1\xa0\xcd\xa5\x8a\xe6\x1ag\xddi\x10\x98" +
	"J\x836\x97\x02\x9aw\x00k\xef\x04\x81\xad\x92P\xb4" +
	"<\x89\xe6\xaac\xc1f\x10X\xa3\xe4\xa5\xfe\xc3\x985" +
	"i\x80zND\xb8\x88\xce0\xd6\x1b\xc9\xe4@\x89B" +
	"\xee\xccd4\x96\x96b\x83\xbaZm\x11\xd9N6\x08" +
	"\x8b\xa8\xae\x15\x10q\x0em\x00\xd6A\x8e{PD5" +
	"* \x13p\x0e\x0a\x00l\x1d=|XD\xb5\xb7\xcc" +
	"/\xdeT\xaa\xbf\x17e\x10P\x06\xf4\xc6c)\xcb\xa2" +
	"\xb5\x0e\x11\xb0\xc8\xa4h*X\xec\xd3\x89]\x07g\xd7" +
	"\xbcZ\xd1\xbc\xd2\x19#v\xab$n\xf8\xe2\x0e\xc5\x0a" +
	"\x1dr\x19J\xff\x85D\xa2\xf9\x9f\x9b\xfb\x07\x06,\xc7" +
	"\xcch\x05VX13uWiK|\xae\x15e\xdf" +
	"\\\xe8)7}d\xd9\xe0\xc5C\xb7\x9cu\x0d\xefO" +
	"c\xaa\xb2b\x131\xfd_\xee\xc3\x12\x8e\xb6\xc4\xfa\xef" +
	"\xbeU\xb4\xe1~cM\xbe\xef\xbcDJ\xc5\x10M\xd7" +
	"\xf3\xdf\xa4\x07\x99\xeb\xc1\xbc\xc7\xd0\xbc\xc2Y\xd0\xcf\x9d" +
	"\x81h]\xa6h~[\xb0\x05t\xe6\x91\xbcTO\x18" +
	"\xbd4\xba\x8a\x92)\xb3\x7fW(\xb7\xbd*\xa9\xc6'" +
	"\xe0\xd68\x05\x0f\x19\xd3\xabY\x9cn-\x96\xee\xe5J" +
	"\xea\xca\xcf\xa0\xec\xb6\xb1\xaaD\xa3\xe0\x10\xf3\x03\x10\xcd" +
	"\xcf\x10\xcb!\xd4\xc9\x0c\x1cB\xd9\xc4b\xebw\x16l" +
	"nZ\xdfr\xf9c6\xeb\xab\xf4p\xad\x88j\xa2\xb2" +
	"\x8e\xef\xc5\xff\x95$TJDe;\xe4w\xd7\x8c\xe4" +
	"]I\x94\x0d\x05}\xd3\xc5\x8a\x08\x02\"\xe0?\x01\x00" +
	"\x00\xff\xffGx^J"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x87256efbef4d0d6b,
			0x8da195122b990a12,
			0x8e8bba35397049d4,
			0x990f02d816472ef8,
			0x9a680fa9a9be2d62,
			0x9a8b622632172e24,
			0xa20ce2af932c2730,
			0xa21a945a0ef3799e,
			0xa7600db255bca0c7,
			0xaf2e5ebaa58175d2,
			0xb9b9c4df47b44962,
			0xbb2aa833b9f708e6,
			0xbb4f16b0a7d2d09b,
			0xc53168b273d497ee,
			0xcb1ece3fc10a2abe,
			0xd29163211833b55f,
			0xd668a0b16a37bab6,
			0xd72ab4a0243047ac,
			0xda23f0d3a8250633,
			0xe84ba4855da630b6,
			0xe863235b8d7aeca3,
			0xeea7ae19b02f5d47,
			0xef622b23fee0980e,
			0xf20b3dea95929312,
			0xf9694ae208dbb3e3,
			0xfb52998547c680f0,
			0xfb6429d901491013,
		},
		Compressed: true,
	})
}
