// Code generated by capnpc-go. DO NOT EDIT.

package process

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	tools "github.com/wetware/ww/experiments/api/tools"
)

type Executor capnp.Client

// Executor_TypeID is the unique identifier for the type Executor.
const Executor_TypeID = 0xaf2e5ebaa58175d2

func (c Executor) Exec(ctx context.Context, params func(Executor_exec_Params) error) (Executor_exec_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "exec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_exec_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_exec_Results_Future{Future: ans.Future()}, release

}

func (c Executor) ExecFromCache(ctx context.Context, params func(Executor_execFromCache_Params) error) (Executor_execFromCache_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      1,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "execFromCache",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_execFromCache_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_execFromCache_Results_Future{Future: ans.Future()}, release

}

func (c Executor) Tools(ctx context.Context, params func(Executor_tools_Params) error) (Executor_tools_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      2,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "tools",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Executor_tools_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Executor_tools_Results_Future{Future: ans.Future()}, release

}

func (c Executor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Executor) String() string {
	return "Executor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Executor) AddRef() Executor {
	return Executor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Executor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Executor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Executor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Executor) DecodeFromPtr(p capnp.Ptr) Executor {
	return Executor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Executor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Executor) IsSame(other Executor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Executor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Executor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Executor_Server is a Executor with a local implementation.
type Executor_Server interface {
	Exec(context.Context, Executor_exec) error

	ExecFromCache(context.Context, Executor_execFromCache) error

	Tools(context.Context, Executor_tools) error
}

// Executor_NewServer creates a new Server from an implementation of Executor_Server.
func Executor_NewServer(s Executor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Executor_Methods(nil, s), s, c)
}

// Executor_ServerToClient creates a new Client from an implementation of Executor_Server.
// The caller is responsible for calling Release on the returned Client.
func Executor_ServerToClient(s Executor_Server) Executor {
	return Executor(capnp.NewClient(Executor_NewServer(s)))
}

// Executor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Executor_Methods(methods []server.Method, s Executor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      0,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "exec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Exec(ctx, Executor_exec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      1,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "execFromCache",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ExecFromCache(ctx, Executor_execFromCache{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaf2e5ebaa58175d2,
			MethodID:      2,
			InterfaceName: "process.capnp:Executor",
			MethodName:    "tools",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Tools(ctx, Executor_tools{call})
		},
	})

	return methods
}

// Executor_exec holds the state for a server call to Executor.exec.
// See server.Call for documentation.
type Executor_exec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_exec) Args() Executor_exec_Params {
	return Executor_exec_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_exec) AllocResults() (Executor_exec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(r), err
}

// Executor_execFromCache holds the state for a server call to Executor.execFromCache.
// See server.Call for documentation.
type Executor_execFromCache struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_execFromCache) Args() Executor_execFromCache_Params {
	return Executor_execFromCache_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_execFromCache) AllocResults() (Executor_execFromCache_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execFromCache_Results(r), err
}

// Executor_tools holds the state for a server call to Executor.tools.
// See server.Call for documentation.
type Executor_tools struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Executor_tools) Args() Executor_tools_Params {
	return Executor_tools_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Executor_tools) AllocResults() (Executor_tools_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_tools_Results(r), err
}

// Executor_List is a list of Executor.
type Executor_List = capnp.CapList[Executor]

// NewExecutor creates a new list of Executor.
func NewExecutor_List(s *capnp.Segment, sz int32) (Executor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Executor](l), err
}

type Executor_exec_Params capnp.Struct

// Executor_exec_Params_TypeID is the unique identifier for the type Executor_exec_Params.
const Executor_exec_Params_TypeID = 0xf20b3dea95929312

func NewExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_exec_Params(st), err
}

func NewRootExecutor_exec_Params(s *capnp.Segment) (Executor_exec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_exec_Params(st), err
}

func ReadRootExecutor_exec_Params(msg *capnp.Message) (Executor_exec_Params, error) {
	root, err := msg.Root()
	return Executor_exec_Params(root.Struct()), err
}

func (s Executor_exec_Params) String() string {
	str, _ := text.Marshal(0xf20b3dea95929312, capnp.Struct(s))
	return str
}

func (s Executor_exec_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Params) DecodeFromPtr(p capnp.Ptr) Executor_exec_Params {
	return Executor_exec_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Params) Bytecode() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_exec_Params) HasBytecode() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Params) SetBytecode(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_exec_Params) Caps() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.PointerList(p.List()), err
}

func (s Executor_exec_Params) HasCaps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_exec_Params) SetCaps(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Executor_exec_Params) NewCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Executor_exec_Params_List is a list of Executor_exec_Params.
type Executor_exec_Params_List = capnp.StructList[Executor_exec_Params]

// NewExecutor_exec_Params creates a new list of Executor_exec_Params.
func NewExecutor_exec_Params_List(s *capnp.Segment, sz int32) (Executor_exec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Executor_exec_Params](l), err
}

// Executor_exec_Params_Future is a wrapper for a Executor_exec_Params promised by a client call.
type Executor_exec_Params_Future struct{ *capnp.Future }

func (f Executor_exec_Params_Future) Struct() (Executor_exec_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Params(p.Struct()), err
}

type Executor_exec_Results capnp.Struct

// Executor_exec_Results_TypeID is the unique identifier for the type Executor_exec_Results.
const Executor_exec_Results_TypeID = 0xbb4f16b0a7d2d09b

func NewExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func NewRootExecutor_exec_Results(s *capnp.Segment) (Executor_exec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_exec_Results(st), err
}

func ReadRootExecutor_exec_Results(msg *capnp.Message) (Executor_exec_Results, error) {
	root, err := msg.Root()
	return Executor_exec_Results(root.Struct()), err
}

func (s Executor_exec_Results) String() string {
	str, _ := text.Marshal(0xbb4f16b0a7d2d09b, capnp.Struct(s))
	return str
}

func (s Executor_exec_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_exec_Results) DecodeFromPtr(p capnp.Ptr) Executor_exec_Results {
	return Executor_exec_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_exec_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_exec_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_exec_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_exec_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_exec_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_exec_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_exec_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_exec_Results_List is a list of Executor_exec_Results.
type Executor_exec_Results_List = capnp.StructList[Executor_exec_Results]

// NewExecutor_exec_Results creates a new list of Executor_exec_Results.
func NewExecutor_exec_Results_List(s *capnp.Segment, sz int32) (Executor_exec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_exec_Results](l), err
}

// Executor_exec_Results_Future is a wrapper for a Executor_exec_Results promised by a client call.
type Executor_exec_Results_Future struct{ *capnp.Future }

func (f Executor_exec_Results_Future) Struct() (Executor_exec_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_exec_Results(p.Struct()), err
}
func (p Executor_exec_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Executor_execFromCache_Params capnp.Struct

// Executor_execFromCache_Params_TypeID is the unique identifier for the type Executor_execFromCache_Params.
const Executor_execFromCache_Params_TypeID = 0xb9b9c4df47b44962

func NewExecutor_execFromCache_Params(s *capnp.Segment) (Executor_execFromCache_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_execFromCache_Params(st), err
}

func NewRootExecutor_execFromCache_Params(s *capnp.Segment) (Executor_execFromCache_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Executor_execFromCache_Params(st), err
}

func ReadRootExecutor_execFromCache_Params(msg *capnp.Message) (Executor_execFromCache_Params, error) {
	root, err := msg.Root()
	return Executor_execFromCache_Params(root.Struct()), err
}

func (s Executor_execFromCache_Params) String() string {
	str, _ := text.Marshal(0xb9b9c4df47b44962, capnp.Struct(s))
	return str
}

func (s Executor_execFromCache_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execFromCache_Params) DecodeFromPtr(p capnp.Ptr) Executor_execFromCache_Params {
	return Executor_execFromCache_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execFromCache_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execFromCache_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execFromCache_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execFromCache_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execFromCache_Params) Md5sum() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s Executor_execFromCache_Params) HasMd5sum() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execFromCache_Params) SetMd5sum(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s Executor_execFromCache_Params) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(1)
	return p.Interface().Client()
}

func (s Executor_execFromCache_Params) HasCap() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Executor_execFromCache_Params) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Executor_execFromCache_Params_List is a list of Executor_execFromCache_Params.
type Executor_execFromCache_Params_List = capnp.StructList[Executor_execFromCache_Params]

// NewExecutor_execFromCache_Params creates a new list of Executor_execFromCache_Params.
func NewExecutor_execFromCache_Params_List(s *capnp.Segment, sz int32) (Executor_execFromCache_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Executor_execFromCache_Params](l), err
}

// Executor_execFromCache_Params_Future is a wrapper for a Executor_execFromCache_Params promised by a client call.
type Executor_execFromCache_Params_Future struct{ *capnp.Future }

func (f Executor_execFromCache_Params_Future) Struct() (Executor_execFromCache_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_execFromCache_Params(p.Struct()), err
}
func (p Executor_execFromCache_Params_Future) Cap() capnp.Client {
	return p.Future.Field(1, nil).Client()
}

type Executor_execFromCache_Results capnp.Struct

// Executor_execFromCache_Results_TypeID is the unique identifier for the type Executor_execFromCache_Results.
const Executor_execFromCache_Results_TypeID = 0xa21a945a0ef3799e

func NewExecutor_execFromCache_Results(s *capnp.Segment) (Executor_execFromCache_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execFromCache_Results(st), err
}

func NewRootExecutor_execFromCache_Results(s *capnp.Segment) (Executor_execFromCache_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_execFromCache_Results(st), err
}

func ReadRootExecutor_execFromCache_Results(msg *capnp.Message) (Executor_execFromCache_Results, error) {
	root, err := msg.Root()
	return Executor_execFromCache_Results(root.Struct()), err
}

func (s Executor_execFromCache_Results) String() string {
	str, _ := text.Marshal(0xa21a945a0ef3799e, capnp.Struct(s))
	return str
}

func (s Executor_execFromCache_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_execFromCache_Results) DecodeFromPtr(p capnp.Ptr) Executor_execFromCache_Results {
	return Executor_execFromCache_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_execFromCache_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_execFromCache_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_execFromCache_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_execFromCache_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_execFromCache_Results) Process() Process {
	p, _ := capnp.Struct(s).Ptr(0)
	return Process(p.Interface().Client())
}

func (s Executor_execFromCache_Results) HasProcess() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_execFromCache_Results) SetProcess(v Process) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_execFromCache_Results_List is a list of Executor_execFromCache_Results.
type Executor_execFromCache_Results_List = capnp.StructList[Executor_execFromCache_Results]

// NewExecutor_execFromCache_Results creates a new list of Executor_execFromCache_Results.
func NewExecutor_execFromCache_Results_List(s *capnp.Segment, sz int32) (Executor_execFromCache_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_execFromCache_Results](l), err
}

// Executor_execFromCache_Results_Future is a wrapper for a Executor_execFromCache_Results promised by a client call.
type Executor_execFromCache_Results_Future struct{ *capnp.Future }

func (f Executor_execFromCache_Results_Future) Struct() (Executor_execFromCache_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_execFromCache_Results(p.Struct()), err
}
func (p Executor_execFromCache_Results_Future) Process() Process {
	return Process(p.Future.Field(0, nil).Client())
}

type Executor_tools_Params capnp.Struct

// Executor_tools_Params_TypeID is the unique identifier for the type Executor_tools_Params.
const Executor_tools_Params_TypeID = 0xe863235b8d7aeca3

func NewExecutor_tools_Params(s *capnp.Segment) (Executor_tools_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_tools_Params(st), err
}

func NewRootExecutor_tools_Params(s *capnp.Segment) (Executor_tools_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Executor_tools_Params(st), err
}

func ReadRootExecutor_tools_Params(msg *capnp.Message) (Executor_tools_Params, error) {
	root, err := msg.Root()
	return Executor_tools_Params(root.Struct()), err
}

func (s Executor_tools_Params) String() string {
	str, _ := text.Marshal(0xe863235b8d7aeca3, capnp.Struct(s))
	return str
}

func (s Executor_tools_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_tools_Params) DecodeFromPtr(p capnp.Ptr) Executor_tools_Params {
	return Executor_tools_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_tools_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_tools_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_tools_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_tools_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Executor_tools_Params_List is a list of Executor_tools_Params.
type Executor_tools_Params_List = capnp.StructList[Executor_tools_Params]

// NewExecutor_tools_Params creates a new list of Executor_tools_Params.
func NewExecutor_tools_Params_List(s *capnp.Segment, sz int32) (Executor_tools_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Executor_tools_Params](l), err
}

// Executor_tools_Params_Future is a wrapper for a Executor_tools_Params promised by a client call.
type Executor_tools_Params_Future struct{ *capnp.Future }

func (f Executor_tools_Params_Future) Struct() (Executor_tools_Params, error) {
	p, err := f.Future.Ptr()
	return Executor_tools_Params(p.Struct()), err
}

type Executor_tools_Results capnp.Struct

// Executor_tools_Results_TypeID is the unique identifier for the type Executor_tools_Results.
const Executor_tools_Results_TypeID = 0xa20ce2af932c2730

func NewExecutor_tools_Results(s *capnp.Segment) (Executor_tools_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_tools_Results(st), err
}

func NewRootExecutor_tools_Results(s *capnp.Segment) (Executor_tools_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Executor_tools_Results(st), err
}

func ReadRootExecutor_tools_Results(msg *capnp.Message) (Executor_tools_Results, error) {
	root, err := msg.Root()
	return Executor_tools_Results(root.Struct()), err
}

func (s Executor_tools_Results) String() string {
	str, _ := text.Marshal(0xa20ce2af932c2730, capnp.Struct(s))
	return str
}

func (s Executor_tools_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Executor_tools_Results) DecodeFromPtr(p capnp.Ptr) Executor_tools_Results {
	return Executor_tools_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Executor_tools_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Executor_tools_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Executor_tools_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Executor_tools_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Executor_tools_Results) Tools() tools.Tools {
	p, _ := capnp.Struct(s).Ptr(0)
	return tools.Tools(p.Interface().Client())
}

func (s Executor_tools_Results) HasTools() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Executor_tools_Results) SetTools(v tools.Tools) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Executor_tools_Results_List is a list of Executor_tools_Results.
type Executor_tools_Results_List = capnp.StructList[Executor_tools_Results]

// NewExecutor_tools_Results creates a new list of Executor_tools_Results.
func NewExecutor_tools_Results_List(s *capnp.Segment, sz int32) (Executor_tools_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Executor_tools_Results](l), err
}

// Executor_tools_Results_Future is a wrapper for a Executor_tools_Results promised by a client call.
type Executor_tools_Results_Future struct{ *capnp.Future }

func (f Executor_tools_Results_Future) Struct() (Executor_tools_Results, error) {
	p, err := f.Future.Ptr()
	return Executor_tools_Results(p.Struct()), err
}
func (p Executor_tools_Results_Future) Tools() tools.Tools {
	return tools.Tools(p.Future.Field(0, nil).Client())
}

type Args capnp.Client

// Args_TypeID is the unique identifier for the type Args.
const Args_TypeID = 0xbb2aa833b9f708e6

func (c Args) Args(ctx context.Context, params func(Args_args_Params) error) (Args_args_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbb2aa833b9f708e6,
			MethodID:      0,
			InterfaceName: "process.capnp:Args",
			MethodName:    "args",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Args_args_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Args_args_Results_Future{Future: ans.Future()}, release

}

func (c Args) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Args) String() string {
	return "Args(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Args) AddRef() Args {
	return Args(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Args) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Args) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Args) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Args) DecodeFromPtr(p capnp.Ptr) Args {
	return Args(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Args) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Args) IsSame(other Args) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Args) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Args) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Args_Server is a Args with a local implementation.
type Args_Server interface {
	Args(context.Context, Args_args) error
}

// Args_NewServer creates a new Server from an implementation of Args_Server.
func Args_NewServer(s Args_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Args_Methods(nil, s), s, c)
}

// Args_ServerToClient creates a new Client from an implementation of Args_Server.
// The caller is responsible for calling Release on the returned Client.
func Args_ServerToClient(s Args_Server) Args {
	return Args(capnp.NewClient(Args_NewServer(s)))
}

// Args_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Args_Methods(methods []server.Method, s Args_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbb2aa833b9f708e6,
			MethodID:      0,
			InterfaceName: "process.capnp:Args",
			MethodName:    "args",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Args(ctx, Args_args{call})
		},
	})

	return methods
}

// Args_args holds the state for a server call to Args.args.
// See server.Call for documentation.
type Args_args struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Args_args) Args() Args_args_Params {
	return Args_args_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Args_args) AllocResults() (Args_args_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Args_args_Results(r), err
}

// Args_List is a list of Args.
type Args_List = capnp.CapList[Args]

// NewArgs creates a new list of Args.
func NewArgs_List(s *capnp.Segment, sz int32) (Args_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Args](l), err
}

type Args_args_Params capnp.Struct

// Args_args_Params_TypeID is the unique identifier for the type Args_args_Params.
const Args_args_Params_TypeID = 0x9a680fa9a9be2d62

func NewArgs_args_Params(s *capnp.Segment) (Args_args_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Args_args_Params(st), err
}

func NewRootArgs_args_Params(s *capnp.Segment) (Args_args_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Args_args_Params(st), err
}

func ReadRootArgs_args_Params(msg *capnp.Message) (Args_args_Params, error) {
	root, err := msg.Root()
	return Args_args_Params(root.Struct()), err
}

func (s Args_args_Params) String() string {
	str, _ := text.Marshal(0x9a680fa9a9be2d62, capnp.Struct(s))
	return str
}

func (s Args_args_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Args_args_Params) DecodeFromPtr(p capnp.Ptr) Args_args_Params {
	return Args_args_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Args_args_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Args_args_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Args_args_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Args_args_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Args_args_Params_List is a list of Args_args_Params.
type Args_args_Params_List = capnp.StructList[Args_args_Params]

// NewArgs_args_Params creates a new list of Args_args_Params.
func NewArgs_args_Params_List(s *capnp.Segment, sz int32) (Args_args_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Args_args_Params](l), err
}

// Args_args_Params_Future is a wrapper for a Args_args_Params promised by a client call.
type Args_args_Params_Future struct{ *capnp.Future }

func (f Args_args_Params_Future) Struct() (Args_args_Params, error) {
	p, err := f.Future.Ptr()
	return Args_args_Params(p.Struct()), err
}

type Args_args_Results capnp.Struct

// Args_args_Results_TypeID is the unique identifier for the type Args_args_Results.
const Args_args_Results_TypeID = 0x8da195122b990a12

func NewArgs_args_Results(s *capnp.Segment) (Args_args_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Args_args_Results(st), err
}

func NewRootArgs_args_Results(s *capnp.Segment) (Args_args_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Args_args_Results(st), err
}

func ReadRootArgs_args_Results(msg *capnp.Message) (Args_args_Results, error) {
	root, err := msg.Root()
	return Args_args_Results(root.Struct()), err
}

func (s Args_args_Results) String() string {
	str, _ := text.Marshal(0x8da195122b990a12, capnp.Struct(s))
	return str
}

func (s Args_args_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Args_args_Results) DecodeFromPtr(p capnp.Ptr) Args_args_Results {
	return Args_args_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Args_args_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Args_args_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Args_args_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Args_args_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Args_args_Results) Args() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Args_args_Results) HasArgs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Args_args_Results) SetArgs(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Args_args_Results) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Args_args_Results_List is a list of Args_args_Results.
type Args_args_Results_List = capnp.StructList[Args_args_Results]

// NewArgs_args_Results creates a new list of Args_args_Results.
func NewArgs_args_Results_List(s *capnp.Segment, sz int32) (Args_args_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Args_args_Results](l), err
}

// Args_args_Results_Future is a wrapper for a Args_args_Results promised by a client call.
type Args_args_Results_Future struct{ *capnp.Future }

func (f Args_args_Results_Future) Struct() (Args_args_Results, error) {
	p, err := f.Future.Ptr()
	return Args_args_Results(p.Struct()), err
}

type Process capnp.Client

// Process_TypeID is the unique identifier for the type Process.
const Process_TypeID = 0xda23f0d3a8250633

func (c Process) Wait(ctx context.Context, params func(Process_wait_Params) error) (Process_wait_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_wait_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_wait_Results_Future{Future: ans.Future()}, release

}

func (c Process) Kill(ctx context.Context, params func(Process_kill_Params) error) (Process_kill_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Process_kill_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Process_kill_Results_Future{Future: ans.Future()}, release

}

func (c Process) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Process) String() string {
	return "Process(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Process) AddRef() Process {
	return Process(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Process) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Process) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Process) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Process) DecodeFromPtr(p capnp.Ptr) Process {
	return Process(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Process) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Process) IsSame(other Process) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Process) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Process) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Process_Server is a Process with a local implementation.
type Process_Server interface {
	Wait(context.Context, Process_wait) error

	Kill(context.Context, Process_kill) error
}

// Process_NewServer creates a new Server from an implementation of Process_Server.
func Process_NewServer(s Process_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Process_Methods(nil, s), s, c)
}

// Process_ServerToClient creates a new Client from an implementation of Process_Server.
// The caller is responsible for calling Release on the returned Client.
func Process_ServerToClient(s Process_Server) Process {
	return Process(capnp.NewClient(Process_NewServer(s)))
}

// Process_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Process_Methods(methods []server.Method, s Process_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      0,
			InterfaceName: "process.capnp:Process",
			MethodName:    "wait",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wait(ctx, Process_wait{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xda23f0d3a8250633,
			MethodID:      1,
			InterfaceName: "process.capnp:Process",
			MethodName:    "kill",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Kill(ctx, Process_kill{call})
		},
	})

	return methods
}

// Process_wait holds the state for a server call to Process.wait.
// See server.Call for documentation.
type Process_wait struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_wait) Args() Process_wait_Params {
	return Process_wait_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_wait) AllocResults() (Process_wait_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(r), err
}

// Process_kill holds the state for a server call to Process.kill.
// See server.Call for documentation.
type Process_kill struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Process_kill) Args() Process_kill_Params {
	return Process_kill_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Process_kill) AllocResults() (Process_kill_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(r), err
}

// Process_List is a list of Process.
type Process_List = capnp.CapList[Process]

// NewProcess creates a new list of Process.
func NewProcess_List(s *capnp.Segment, sz int32) (Process_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Process](l), err
}

type Process_wait_Params capnp.Struct

// Process_wait_Params_TypeID is the unique identifier for the type Process_wait_Params.
const Process_wait_Params_TypeID = 0xf9694ae208dbb3e3

func NewProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func NewRootProcess_wait_Params(s *capnp.Segment) (Process_wait_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_wait_Params(st), err
}

func ReadRootProcess_wait_Params(msg *capnp.Message) (Process_wait_Params, error) {
	root, err := msg.Root()
	return Process_wait_Params(root.Struct()), err
}

func (s Process_wait_Params) String() string {
	str, _ := text.Marshal(0xf9694ae208dbb3e3, capnp.Struct(s))
	return str
}

func (s Process_wait_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Params) DecodeFromPtr(p capnp.Ptr) Process_wait_Params {
	return Process_wait_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_wait_Params_List is a list of Process_wait_Params.
type Process_wait_Params_List = capnp.StructList[Process_wait_Params]

// NewProcess_wait_Params creates a new list of Process_wait_Params.
func NewProcess_wait_Params_List(s *capnp.Segment, sz int32) (Process_wait_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Params](l), err
}

// Process_wait_Params_Future is a wrapper for a Process_wait_Params promised by a client call.
type Process_wait_Params_Future struct{ *capnp.Future }

func (f Process_wait_Params_Future) Struct() (Process_wait_Params, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Params(p.Struct()), err
}

type Process_wait_Results capnp.Struct

// Process_wait_Results_TypeID is the unique identifier for the type Process_wait_Results.
const Process_wait_Results_TypeID = 0xd72ab4a0243047ac

func NewProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func NewRootProcess_wait_Results(s *capnp.Segment) (Process_wait_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Process_wait_Results(st), err
}

func ReadRootProcess_wait_Results(msg *capnp.Message) (Process_wait_Results, error) {
	root, err := msg.Root()
	return Process_wait_Results(root.Struct()), err
}

func (s Process_wait_Results) String() string {
	str, _ := text.Marshal(0xd72ab4a0243047ac, capnp.Struct(s))
	return str
}

func (s Process_wait_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_wait_Results) DecodeFromPtr(p capnp.Ptr) Process_wait_Results {
	return Process_wait_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_wait_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_wait_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_wait_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_wait_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Process_wait_Results) ExitCode() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s Process_wait_Results) SetExitCode(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// Process_wait_Results_List is a list of Process_wait_Results.
type Process_wait_Results_List = capnp.StructList[Process_wait_Results]

// NewProcess_wait_Results creates a new list of Process_wait_Results.
func NewProcess_wait_Results_List(s *capnp.Segment, sz int32) (Process_wait_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Process_wait_Results](l), err
}

// Process_wait_Results_Future is a wrapper for a Process_wait_Results promised by a client call.
type Process_wait_Results_Future struct{ *capnp.Future }

func (f Process_wait_Results_Future) Struct() (Process_wait_Results, error) {
	p, err := f.Future.Ptr()
	return Process_wait_Results(p.Struct()), err
}

type Process_kill_Params capnp.Struct

// Process_kill_Params_TypeID is the unique identifier for the type Process_kill_Params.
const Process_kill_Params_TypeID = 0xeea7ae19b02f5d47

func NewProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func NewRootProcess_kill_Params(s *capnp.Segment) (Process_kill_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Params(st), err
}

func ReadRootProcess_kill_Params(msg *capnp.Message) (Process_kill_Params, error) {
	root, err := msg.Root()
	return Process_kill_Params(root.Struct()), err
}

func (s Process_kill_Params) String() string {
	str, _ := text.Marshal(0xeea7ae19b02f5d47, capnp.Struct(s))
	return str
}

func (s Process_kill_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Params) DecodeFromPtr(p capnp.Ptr) Process_kill_Params {
	return Process_kill_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Params_List is a list of Process_kill_Params.
type Process_kill_Params_List = capnp.StructList[Process_kill_Params]

// NewProcess_kill_Params creates a new list of Process_kill_Params.
func NewProcess_kill_Params_List(s *capnp.Segment, sz int32) (Process_kill_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Params](l), err
}

// Process_kill_Params_Future is a wrapper for a Process_kill_Params promised by a client call.
type Process_kill_Params_Future struct{ *capnp.Future }

func (f Process_kill_Params_Future) Struct() (Process_kill_Params, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Params(p.Struct()), err
}

type Process_kill_Results capnp.Struct

// Process_kill_Results_TypeID is the unique identifier for the type Process_kill_Results.
const Process_kill_Results_TypeID = 0xc53168b273d497ee

func NewProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func NewRootProcess_kill_Results(s *capnp.Segment) (Process_kill_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Process_kill_Results(st), err
}

func ReadRootProcess_kill_Results(msg *capnp.Message) (Process_kill_Results, error) {
	root, err := msg.Root()
	return Process_kill_Results(root.Struct()), err
}

func (s Process_kill_Results) String() string {
	str, _ := text.Marshal(0xc53168b273d497ee, capnp.Struct(s))
	return str
}

func (s Process_kill_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Process_kill_Results) DecodeFromPtr(p capnp.Ptr) Process_kill_Results {
	return Process_kill_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Process_kill_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Process_kill_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Process_kill_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Process_kill_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Process_kill_Results_List is a list of Process_kill_Results.
type Process_kill_Results_List = capnp.StructList[Process_kill_Results]

// NewProcess_kill_Results creates a new list of Process_kill_Results.
func NewProcess_kill_Results_List(s *capnp.Segment, sz int32) (Process_kill_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Process_kill_Results](l), err
}

// Process_kill_Results_Future is a wrapper for a Process_kill_Results promised by a client call.
type Process_kill_Results_Future struct{ *capnp.Future }

func (f Process_kill_Results_Future) Struct() (Process_kill_Results, error) {
	p, err := f.Future.Ptr()
	return Process_kill_Results(p.Struct()), err
}

type Inbox capnp.Client

// Inbox_TypeID is the unique identifier for the type Inbox.
const Inbox_TypeID = 0xbdfd822e8766e325

func (c Inbox) Open(ctx context.Context, params func(Inbox_open_Params) error) (Inbox_open_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbdfd822e8766e325,
			MethodID:      0,
			InterfaceName: "process.capnp:Inbox",
			MethodName:    "open",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Inbox_open_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Inbox_open_Results_Future{Future: ans.Future()}, release

}

func (c Inbox) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Inbox) String() string {
	return "Inbox(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Inbox) AddRef() Inbox {
	return Inbox(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Inbox) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Inbox) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Inbox) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Inbox) DecodeFromPtr(p capnp.Ptr) Inbox {
	return Inbox(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Inbox) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Inbox) IsSame(other Inbox) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Inbox) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Inbox) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Inbox_Server is a Inbox with a local implementation.
type Inbox_Server interface {
	Open(context.Context, Inbox_open) error
}

// Inbox_NewServer creates a new Server from an implementation of Inbox_Server.
func Inbox_NewServer(s Inbox_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Inbox_Methods(nil, s), s, c)
}

// Inbox_ServerToClient creates a new Client from an implementation of Inbox_Server.
// The caller is responsible for calling Release on the returned Client.
func Inbox_ServerToClient(s Inbox_Server) Inbox {
	return Inbox(capnp.NewClient(Inbox_NewServer(s)))
}

// Inbox_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Inbox_Methods(methods []server.Method, s Inbox_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbdfd822e8766e325,
			MethodID:      0,
			InterfaceName: "process.capnp:Inbox",
			MethodName:    "open",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Open(ctx, Inbox_open{call})
		},
	})

	return methods
}

// Inbox_open holds the state for a server call to Inbox.open.
// See server.Call for documentation.
type Inbox_open struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Inbox_open) Args() Inbox_open_Params {
	return Inbox_open_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Inbox_open) AllocResults() (Inbox_open_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Inbox_open_Results(r), err
}

// Inbox_List is a list of Inbox.
type Inbox_List = capnp.CapList[Inbox]

// NewInbox creates a new list of Inbox.
func NewInbox_List(s *capnp.Segment, sz int32) (Inbox_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Inbox](l), err
}

type Inbox_open_Params capnp.Struct

// Inbox_open_Params_TypeID is the unique identifier for the type Inbox_open_Params.
const Inbox_open_Params_TypeID = 0x8e789e930a3f38c8

func NewInbox_open_Params(s *capnp.Segment) (Inbox_open_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Inbox_open_Params(st), err
}

func NewRootInbox_open_Params(s *capnp.Segment) (Inbox_open_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Inbox_open_Params(st), err
}

func ReadRootInbox_open_Params(msg *capnp.Message) (Inbox_open_Params, error) {
	root, err := msg.Root()
	return Inbox_open_Params(root.Struct()), err
}

func (s Inbox_open_Params) String() string {
	str, _ := text.Marshal(0x8e789e930a3f38c8, capnp.Struct(s))
	return str
}

func (s Inbox_open_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Inbox_open_Params) DecodeFromPtr(p capnp.Ptr) Inbox_open_Params {
	return Inbox_open_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Inbox_open_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Inbox_open_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Inbox_open_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Inbox_open_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Inbox_open_Params_List is a list of Inbox_open_Params.
type Inbox_open_Params_List = capnp.StructList[Inbox_open_Params]

// NewInbox_open_Params creates a new list of Inbox_open_Params.
func NewInbox_open_Params_List(s *capnp.Segment, sz int32) (Inbox_open_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Inbox_open_Params](l), err
}

// Inbox_open_Params_Future is a wrapper for a Inbox_open_Params promised by a client call.
type Inbox_open_Params_Future struct{ *capnp.Future }

func (f Inbox_open_Params_Future) Struct() (Inbox_open_Params, error) {
	p, err := f.Future.Ptr()
	return Inbox_open_Params(p.Struct()), err
}

type Inbox_open_Results capnp.Struct

// Inbox_open_Results_TypeID is the unique identifier for the type Inbox_open_Results.
const Inbox_open_Results_TypeID = 0xb4982f9891840060

func NewInbox_open_Results(s *capnp.Segment) (Inbox_open_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Inbox_open_Results(st), err
}

func NewRootInbox_open_Results(s *capnp.Segment) (Inbox_open_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Inbox_open_Results(st), err
}

func ReadRootInbox_open_Results(msg *capnp.Message) (Inbox_open_Results, error) {
	root, err := msg.Root()
	return Inbox_open_Results(root.Struct()), err
}

func (s Inbox_open_Results) String() string {
	str, _ := text.Marshal(0xb4982f9891840060, capnp.Struct(s))
	return str
}

func (s Inbox_open_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Inbox_open_Results) DecodeFromPtr(p capnp.Ptr) Inbox_open_Results {
	return Inbox_open_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Inbox_open_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Inbox_open_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Inbox_open_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Inbox_open_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Inbox_open_Results) Content() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s Inbox_open_Results) HasContent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Inbox_open_Results) SetContent(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Inbox_open_Results) NewContent(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Inbox_open_Results_List is a list of Inbox_open_Results.
type Inbox_open_Results_List = capnp.StructList[Inbox_open_Results]

// NewInbox_open_Results creates a new list of Inbox_open_Results.
func NewInbox_open_Results_List(s *capnp.Segment, sz int32) (Inbox_open_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Inbox_open_Results](l), err
}

// Inbox_open_Results_Future is a wrapper for a Inbox_open_Results promised by a client call.
type Inbox_open_Results_Future struct{ *capnp.Future }

func (f Inbox_open_Results_Future) Struct() (Inbox_open_Results, error) {
	p, err := f.Future.Ptr()
	return Inbox_open_Results(p.Struct()), err
}

const schema_9a51e53177277763 = "x\xda\xacT]h\x1cU\x14>\xe7\xce\xdf6f\xb3" +
	"\xdc\x9d\x18M_\x82\xe9\x86\xda\xb5\xddf\x1b\x0bZ\x90" +
	"\xddX\xe2\x9a\xbc\xb8\xe3\x8b\xa0(\x9d\x9d\x8e\xc9jv" +
	"g\x9d\x99\x90\xad EQ\xeaK\x05\x8d\xc1\x1a\xa1\xb4" +
	"\x95\xd2\x06\xaa-5/i\xd1\x17\x15\xf5A0U\x11" +
	"\xf5\xa1\xb4E\x11\x91\xe2\xcf\x83X(#\xf7\xce\xdc\xdd" +
	"\xcd\xee6O}\xbb\xc39\xf3}\xdf\xfd\xcew\xcf\xe8" +
	"1\x92\x97\xb3\xf1'z\x80\x18uE\x0d\x92=\xef\xde" +
	"\x97\\<~\x18\xa8\x8e\x00\x0aj\x00cT!\x08\xa8" +
	"\xdf\xa9\xe4\x00\x83/\x1f\xc8\xf5,\x1c\xad\xbf\x01\xb4\x1f" +
	"\x01dV\x9f`u9(\xed\xf8dy91\xb3\x14" +
	"\xfe\xca*\xfa6\xe5\x06\xc8\xc1\xe8\xd6\xed\x0bg\xaf\xf6" +
	"\x9e\x00zW\x033\xae\xa4\x9b\x98G\x0f\xfc\xd3\xf7\xe4" +
	"\xdb\x9b\xd75\xecV\x9ec\x0d\xe3\xbc\xe1\xd2\xdc\xcb'" +
	"/<\x939\x0b\xb4O\x0a\xac\xf9\xad\xf3\xd9_\x8c%" +
	"\x00\xd4M\xe5\x82^V\x18\x95\xad|\xa1_a\xa7\x9b" +
	"\xfb^}\xf3\xc8\xce#+\\_\x88\xf5\x95\xd2\xc3\xb0" +
	"\xd68Vir\xa5p\xf9\xb3\xd5\xd5\x88\x8c\xb0\x06T" +
	"K\xac!\xae\xce\x03\x06\xbf\xc6\xfe]\x1d;\x9d\xbe\xd8" +
	"AVV\x97\xf4\x17TFVQ\x0b\xfa\";\x05\xef" +
	"}s\xe9\xd4\xb9\x81\xc7.\xb6J\x7fI\x1dfh\xaf" +
	"\xa9\x8cn\xe4\xda\xb3\x872\xaf\xdc\xfc\xb8\x03\xed\xa4z" +
	"B\xff\x80\xa3-\xab\x05}\x8d\xa3]\x7f\xe7;\xef\xfc" +
	"L\xf6s\xa0\x03\xc2\xdcUu33\xf7La4u" +
	"l%\xfd\x03\x18\x03(J\xc7Y\x09\xf5e\xce3\xa6" +
	"\x8e\x9c\xfe\xf6\xcf-?u\xf0|\xad\x9e\xd7\xbf\xe7<" +
	"k\xea!\xfd\x1e\x8d\xf1\xbc\xff\xc7\x8b\x87\x9f\xdab\xfd" +
	"\x16\xaa\xe6`\x9b\xb4a\xc6Sxz\xe7\xb9\xc1\x0fO" +
	"]oQ\xf0\x97\x9ad\x95\xe4\xc2[\x8b\xbf?t\xc7" +
	"\xdf\xad\xbe\xfd\x18*\xb8\xc2}\xbb\xf6\xd1\xcf\xb1\xabS" +
	"\xe5\xffZ~5\xb4$\xc2\xebA\xcdu,\xdb\xf32" +
	"\x92e\xd6\xaa\xb5=\xe3\xee\xb4\x971\xddi/\xf5\xb8" +
	"\xed\xcd\xcd\xfa\x1e\x18\xb2$\x03\xc8\x08@\xe3i\x00#" +
	"&\xa1\x91\"\x98`M\xd8\x07X\x94\x10{\x81\xb0c" +
	"\x03L\x0d\xc1&\xab%\xa7\x9eqjv5U4]" +
	"\xb3\xe2\x81hh'\xcb\x85\xf5v5\x13u\xdb\x9a\xf3" +
	"\x1d7\xe3;\xce,\x97\x94`\x9aZ%\xed\x8a$\xf5" +
	"\x13\x1c\xe2]H\x83\xec\xe5376\x0d\x0c\x7f\x0a\x80" +
	"H[d\xc9m\xa8v\xdd\xb6\x1eq\x9d\xca^\xd3\x9a" +
	"\xb1\xbb\xa2?\xdcD?\x18\xa1 m\xce\xb3\x0d\x1f\x05" +
	"~.$(\"\x1a\xbd\x92\x02\xd0\x18\x10\x8aLR#" +
	"\x0d\x84Nh\xd8\x0c=\x8a\xa7F\x1ft\x81\xd0\xac\x86" +
	"\xa4\x11\x06\x14\xef\x94\x8e\xec\x02B\x07\xb5\x04\xd3\x9e\xc7" +
	"@\\\x01\x86\xf8%\xf2\x91\x09y,\"\xb6\xbb\xd92" +
	"\x0e1\\\xe8v\xd9\x14\xc1\x83\x96S\xf5\xed\xaa/\x06" +
	"\x9c\x94%\xc0u#\xde\xd8\xcb\xa2\xe9jf\xc53b" +
	"\x0d\xf4m{\x00\x8c\x94\x84\xc6(A\x8a\xd8\xcf^\x0a" +
	"\xdd1\x0c`\xdc+\xa1q?\xc1\\e\xffno\xae" +
	"\x82q \x18\x07\xd4,\xb3\x16\xd1&;-\x1ew\xa5" +
	"i\x8f\xd9+s{\xc5zC\xb1\")e\xf6*\x1a" +
	"OiW3\xd6\x09\xe7~h\xb7c\xf6\x93U\xad\xe4" +
	"\xd4\x9b\xca\xc4J\xc6}\x10\xad>\xa1\x8c\xcd\xa1\xab\xb2" +
	"b\xf4\xf9|yv6\x1c\x94\xe4{\xb7j\x9a7\xcb" +
	"~\xa3\xa9U\xfd\x14\x80\xd1+\xa1q7a!)\xfb" +
	"{\x9d\xfd6\x00`\x0c\x08\xc6:u\x17\xdd!\xfe\xcd" +
	"\x94\xc7\xb8r\xb12P\xac7\x9ae\xcaGXd\xc5" +
	"&B\xb1\x14\xe9 \xab\xc5\xb5\x04\xd3\x93\xc7\x04\xd3\xbe" +
	"\xb1\xed\xe1\x8b\x8er\xb2\xa1\x05|5\xa0\xb7\xf1\x00Y" +
	"\x93\xb4>pS\xcdl5\x02\x97e\x1bl\xbb\x84\xc6" +
	"\xa3\x04\x83\xd2\x01\xdf\xb6\"[\xa2\xd4%,\xb3\xe6\xdd" +
	":\xf4\xdd\xcc\x8f\xe4\xfd\x1f\x00\x00\xff\xffu\x8d\x1a:"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9a51e53177277763,
		Nodes: []uint64{
			0x8da195122b990a12,
			0x8e789e930a3f38c8,
			0x9a680fa9a9be2d62,
			0xa20ce2af932c2730,
			0xa21a945a0ef3799e,
			0xaf2e5ebaa58175d2,
			0xb4982f9891840060,
			0xb9b9c4df47b44962,
			0xbb2aa833b9f708e6,
			0xbb4f16b0a7d2d09b,
			0xbdfd822e8766e325,
			0xc53168b273d497ee,
			0xd72ab4a0243047ac,
			0xda23f0d3a8250633,
			0xe863235b8d7aeca3,
			0xeea7ae19b02f5d47,
			0xf20b3dea95929312,
			0xf9694ae208dbb3e3,
		},
		Compressed: true,
	})
}
